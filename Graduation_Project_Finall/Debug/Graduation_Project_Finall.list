
Graduation_Project_Finall.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c4  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019bec  080054f4  080054f4  000154f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f0e0  0801f0e0  00030050  2**0
                  CONTENTS
  4 .ARM          00000000  0801f0e0  0801f0e0  00030050  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f0e0  0801f0e0  00030050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f0e0  0801f0e0  0002f0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f0e4  0801f0e4  0002f0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0801f0e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004258  20000050  0801f138  00030050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042a8  0801f138  000342a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030079  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f753  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022db  00000000  00000000  0003f80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000039c0  00000000  00000000  00041aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000808  00000000  00000000  000454b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006f0  00000000  00000000  00045cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000018c7  00000000  00000000  000463a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a15e  00000000  00000000  00047c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00013fff  00000000  00000000  00051dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001cfc  00000000  00000000  00065dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	080054dc 	.word	0x080054dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	080054dc 	.word	0x080054dc

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	691b      	ldr	r3, [r3, #16]
 8000218:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	6892      	ldr	r2, [r2, #8]
 8000222:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	6852      	ldr	r2, [r2, #4]
 800022c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	429a      	cmp	r2, r3
 8000236:	d103      	bne.n	8000240 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689a      	ldr	r2, [r3, #8]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	1e5a      	subs	r2, r3, #1
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	681b      	ldr	r3, [r3, #0]
}
 8000254:	4618      	mov	r0, r3
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800025e:	b580      	push	{r7, lr}
 8000260:	b08c      	sub	sp, #48	; 0x30
 8000262:	af04      	add	r7, sp, #16
 8000264:	60f8      	str	r0, [r7, #12]
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	603b      	str	r3, [r7, #0]
 800026a:	4613      	mov	r3, r2
 800026c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f000 ff7c 	bl	8001170 <pvPortMalloc>
 8000278:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d013      	beq.n	80002a8 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000280:	2054      	movs	r0, #84	; 0x54
 8000282:	f000 ff75 	bl	8001170 <pvPortMalloc>
 8000286:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800028e:	2254      	movs	r2, #84	; 0x54
 8000290:	2100      	movs	r1, #0
 8000292:	69f8      	ldr	r0, [r7, #28]
 8000294:	f005 f8f5 	bl	8005482 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	631a      	str	r2, [r3, #48]	; 0x30
 800029e:	e005      	b.n	80002ac <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80002a0:	6978      	ldr	r0, [r7, #20]
 80002a2:	f000 ffb7 	bl	8001214 <vPortFree>
 80002a6:	e001      	b.n	80002ac <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d013      	beq.n	80002da <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80002b2:	88fa      	ldrh	r2, [r7, #6]
 80002b4:	2300      	movs	r3, #0
 80002b6:	9303      	str	r3, [sp, #12]
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	9302      	str	r3, [sp, #8]
 80002bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002be:	9301      	str	r3, [sp, #4]
 80002c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	68b9      	ldr	r1, [r7, #8]
 80002c8:	68f8      	ldr	r0, [r7, #12]
 80002ca:	f000 f80e 	bl	80002ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80002ce:	69f8      	ldr	r0, [r7, #28]
 80002d0:	f000 f874 	bl	80003bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80002d4:	2301      	movs	r3, #1
 80002d6:	61bb      	str	r3, [r7, #24]
 80002d8:	e002      	b.n	80002e0 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80002da:	f04f 33ff 	mov.w	r3, #4294967295
 80002de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80002e0:	69bb      	ldr	r3, [r7, #24]
    }
 80002e2:	4618      	mov	r0, r3
 80002e4:	3720      	adds	r7, #32
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b086      	sub	sp, #24
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	60f8      	str	r0, [r7, #12]
 80002f2:	60b9      	str	r1, [r7, #8]
 80002f4:	607a      	str	r2, [r7, #4]
 80002f6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80002f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000302:	3b01      	subs	r3, #1
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	4413      	add	r3, r2
 8000308:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	f023 0307 	bic.w	r3, r3, #7
 8000310:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d01e      	beq.n	8000356 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	e012      	b.n	8000344 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4413      	add	r3, r2
 8000324:	7819      	ldrb	r1, [r3, #0]
 8000326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	4413      	add	r3, r2
 800032c:	3334      	adds	r3, #52	; 0x34
 800032e:	460a      	mov	r2, r1
 8000330:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000332:	68ba      	ldr	r2, [r7, #8]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	4413      	add	r3, r2
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d006      	beq.n	800034c <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	2b0f      	cmp	r3, #15
 8000348:	d9e9      	bls.n	800031e <prvInitialiseNewTask+0x34>
 800034a:	e000      	b.n	800034e <prvInitialiseNewTask+0x64>
            {
                break;
 800034c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800034e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000356:	6a3b      	ldr	r3, [r7, #32]
 8000358:	2b04      	cmp	r3, #4
 800035a:	d901      	bls.n	8000360 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800035c:	2304      	movs	r3, #4
 800035e:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000362:	6a3a      	ldr	r2, [r7, #32]
 8000364:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000368:	6a3a      	ldr	r2, [r7, #32]
 800036a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036e:	3304      	adds	r3, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff1c 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000378:	3318      	adds	r3, #24
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff17 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000384:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000386:	6a3b      	ldr	r3, [r7, #32]
 8000388:	f1c3 0205 	rsb	r2, r3, #5
 800038c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000394:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	68f9      	ldr	r1, [r7, #12]
 800039a:	6938      	ldr	r0, [r7, #16]
 800039c:	f000 fdbe 	bl	8000f1c <pxPortInitialiseStack>
 80003a0:	4602      	mov	r2, r0
 80003a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80003a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d002      	beq.n	80003b2 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80003ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80003c4:	f000 fe3a 	bl	800103c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80003c8:	4b3e      	ldr	r3, [pc, #248]	; (80004c4 <prvAddNewTaskToReadyList+0x108>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	4a3d      	ldr	r2, [pc, #244]	; (80004c4 <prvAddNewTaskToReadyList+0x108>)
 80003d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80003d2:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d109      	bne.n	80003ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80003da:	4a3b      	ldr	r2, [pc, #236]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80003e0:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <prvAddNewTaskToReadyList+0x108>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d110      	bne.n	800040a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80003e8:	f000 fd00 	bl	8000dec <prvInitialiseTaskLists>
 80003ec:	e00d      	b.n	800040a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80003ee:	4b37      	ldr	r3, [pc, #220]	; (80004cc <prvAddNewTaskToReadyList+0x110>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d109      	bne.n	800040a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80003f6:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000400:	429a      	cmp	r2, r3
 8000402:	d802      	bhi.n	800040a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000404:	4a30      	ldr	r2, [pc, #192]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <prvAddNewTaskToReadyList+0x114>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	3301      	adds	r3, #1
 8000410:	4a2f      	ldr	r2, [pc, #188]	; (80004d0 <prvAddNewTaskToReadyList+0x114>)
 8000412:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000418:	2201      	movs	r2, #1
 800041a:	409a      	lsls	r2, r3
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <prvAddNewTaskToReadyList+0x118>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <prvAddNewTaskToReadyList+0x118>)
 8000424:	6013      	str	r3, [r2, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800042a:	492b      	ldr	r1, [pc, #172]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 800042c:	4613      	mov	r3, r2
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	4413      	add	r3, r2
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	440b      	add	r3, r1
 8000436:	3304      	adds	r3, #4
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	689a      	ldr	r2, [r3, #8]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	3204      	adds	r2, #4
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	1d1a      	adds	r2, r3, #4
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 800046a:	441a      	add	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000474:	4918      	ldr	r1, [pc, #96]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	440b      	add	r3, r1
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	1c59      	adds	r1, r3, #1
 8000484:	4814      	ldr	r0, [pc, #80]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4403      	add	r3, r0
 8000490:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000492:	f000 fded 	bl	8001070 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <prvAddNewTaskToReadyList+0x110>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d00e      	beq.n	80004bc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d207      	bcs.n	80004bc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <prvAddNewTaskToReadyList+0x120>)
 80004ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	f3bf 8f4f 	dsb	sy
 80004b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000144 	.word	0x20000144
 80004c8:	2000006c 	.word	0x2000006c
 80004cc:	20000150 	.word	0x20000150
 80004d0:	20000160 	.word	0x20000160
 80004d4:	2000014c 	.word	0x2000014c
 80004d8:	20000070 	.word	0x20000070
 80004dc:	e000ed04 	.word	0xe000ed04

080004e0 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d901      	bls.n	80004f8 <vTaskPrioritySet+0x18>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80004f4:	2304      	movs	r3, #4
 80004f6:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80004f8:	f000 fda0 	bl	800103c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d102      	bne.n	8000508 <vTaskPrioritySet+0x28>
 8000502:	4b55      	ldr	r3, [pc, #340]	; (8000658 <vTaskPrioritySet+0x178>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	e000      	b.n	800050a <vTaskPrioritySet+0x2a>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 800050c:	69bb      	ldr	r3, [r7, #24]
 800050e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000510:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	429a      	cmp	r2, r3
 8000518:	f000 8098 	beq.w	800064c <vTaskPrioritySet+0x16c>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	429a      	cmp	r2, r3
 8000522:	d90d      	bls.n	8000540 <vTaskPrioritySet+0x60>
                {
                    if( pxTCB != pxCurrentTCB )
 8000524:	4b4c      	ldr	r3, [pc, #304]	; (8000658 <vTaskPrioritySet+0x178>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	69ba      	ldr	r2, [r7, #24]
 800052a:	429a      	cmp	r2, r3
 800052c:	d00f      	beq.n	800054e <vTaskPrioritySet+0x6e>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800052e:	4b4a      	ldr	r3, [pc, #296]	; (8000658 <vTaskPrioritySet+0x178>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d309      	bcc.n	800054e <vTaskPrioritySet+0x6e>
                        {
                            xYieldRequired = pdTRUE;
 800053a:	2301      	movs	r3, #1
 800053c:	61fb      	str	r3, [r7, #28]
 800053e:	e006      	b.n	800054e <vTaskPrioritySet+0x6e>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8000540:	4b45      	ldr	r3, [pc, #276]	; (8000658 <vTaskPrioritySet+0x178>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	429a      	cmp	r2, r3
 8000548:	d101      	bne.n	800054e <vTaskPrioritySet+0x6e>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800054a:	2301      	movs	r3, #1
 800054c:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000552:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000558:	69bb      	ldr	r3, [r7, #24]
 800055a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055c:	429a      	cmp	r2, r3
 800055e:	d102      	bne.n	8000566 <vTaskPrioritySet+0x86>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	645a      	str	r2, [r3, #68]	; 0x44
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	2b00      	cmp	r3, #0
 8000572:	db04      	blt.n	800057e <vTaskPrioritySet+0x9e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	f1c3 0205 	rsb	r2, r3, #5
 800057a:	69bb      	ldr	r3, [r7, #24]
 800057c:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	6959      	ldr	r1, [r3, #20]
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4613      	mov	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4a33      	ldr	r2, [pc, #204]	; (800065c <vTaskPrioritySet+0x17c>)
 800058e:	4413      	add	r3, r2
 8000590:	4299      	cmp	r1, r3
 8000592:	d150      	bne.n	8000636 <vTaskPrioritySet+0x156>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	3304      	adds	r3, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fe37 	bl	800020c <uxListRemove>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d109      	bne.n	80005b8 <vTaskPrioritySet+0xd8>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80005a4:	2201      	movs	r2, #1
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	43da      	mvns	r2, r3
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <vTaskPrioritySet+0x180>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4013      	ands	r3, r2
 80005b4:	4a2a      	ldr	r2, [pc, #168]	; (8000660 <vTaskPrioritySet+0x180>)
 80005b6:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005bc:	2201      	movs	r2, #1
 80005be:	409a      	lsls	r2, r3
 80005c0:	4b27      	ldr	r3, [pc, #156]	; (8000660 <vTaskPrioritySet+0x180>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	4a26      	ldr	r2, [pc, #152]	; (8000660 <vTaskPrioritySet+0x180>)
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ce:	4923      	ldr	r1, [pc, #140]	; (800065c <vTaskPrioritySet+0x17c>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	3304      	adds	r3, #4
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	3204      	adds	r2, #4
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	1d1a      	adds	r2, r3, #4
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <vTaskPrioritySet+0x17c>)
 800060e:	441a      	add	r2, r3
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000618:	4910      	ldr	r1, [pc, #64]	; (800065c <vTaskPrioritySet+0x17c>)
 800061a:	4613      	mov	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	1c59      	adds	r1, r3, #1
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <vTaskPrioritySet+0x17c>)
 800062a:	4613      	mov	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4403      	add	r3, r0
 8000634:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d007      	beq.n	800064c <vTaskPrioritySet+0x16c>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <vTaskPrioritySet+0x184>)
 800063e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	f3bf 8f4f 	dsb	sy
 8000648:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 800064c:	f000 fd10 	bl	8001070 <vPortExitCritical>
    }
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000006c 	.word	0x2000006c
 800065c:	20000070 	.word	0x20000070
 8000660:	2000014c 	.word	0x2000014c
 8000664:	e000ed04 	.word	0xe000ed04

08000668 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000670:	f000 fce4 	bl	800103c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d102      	bne.n	8000680 <vTaskSuspend+0x18>
 800067a:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <vTaskSuspend+0x100>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	e000      	b.n	8000682 <vTaskSuspend+0x1a>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3304      	adds	r3, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fdbf 	bl	800020c <uxListRemove>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d115      	bne.n	80006c0 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000698:	4934      	ldr	r1, [pc, #208]	; (800076c <vTaskSuspend+0x104>)
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	440b      	add	r3, r1
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10a      	bne.n	80006c0 <vTaskSuspend+0x58>
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ae:	2201      	movs	r2, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	43da      	mvns	r2, r3
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <vTaskSuspend+0x108>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4013      	ands	r3, r2
 80006bc:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <vTaskSuspend+0x108>)
 80006be:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d004      	beq.n	80006d2 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3318      	adds	r3, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fd9d 	bl	800020c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	3304      	adds	r3, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4826      	ldr	r0, [pc, #152]	; (8000774 <vTaskSuspend+0x10c>)
 80006da:	f7ff fd74 	bl	80001c6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e010      	b.n	8000706 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	3350      	adds	r3, #80	; 0x50
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d105      	bne.n	8000700 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80006f4:	68ba      	ldr	r2, [r7, #8]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	3350      	adds	r3, #80	; 0x50
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3301      	adds	r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	ddeb      	ble.n	80006e4 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800070c:	f000 fcb0 	bl	8001070 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <vTaskSuspend+0x110>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d005      	beq.n	8000724 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000718:	f000 fc90 	bl	800103c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 800071c:	f000 fbe4 	bl	8000ee8 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000720:	f000 fca6 	bl	8001070 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <vTaskSuspend+0x100>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	429a      	cmp	r2, r3
 800072c:	d118      	bne.n	8000760 <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <vTaskSuspend+0x110>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d008      	beq.n	8000748 <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <vTaskSuspend+0x114>)
 8000738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	f3bf 8f4f 	dsb	sy
 8000742:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000746:	e00b      	b.n	8000760 <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <vTaskSuspend+0x10c>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <vTaskSuspend+0x118>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d103      	bne.n	800075c <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <vTaskSuspend+0x100>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
    }
 800075a:	e001      	b.n	8000760 <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 800075c:	f000 fae8 	bl	8000d30 <vTaskSwitchContext>
    }
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000006c 	.word	0x2000006c
 800076c:	20000070 	.word	0x20000070
 8000770:	2000014c 	.word	0x2000014c
 8000774:	20000130 	.word	0x20000130
 8000778:	20000150 	.word	0x20000150
 800077c:	e000ed04 	.word	0xe000ed04
 8000780:	20000144 	.word	0x20000144

08000784 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <prvTaskIsTaskSuspended+0x3c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d10a      	bne.n	80007b4 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <prvTaskIsTaskSuspended+0x40>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d005      	beq.n	80007b4 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80007b4:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000130 	.word	0x20000130
 80007c4:	20000104 	.word	0x20000104

080007c8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <vTaskResume+0xe0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d05f      	beq.n	800089e <vTaskResume+0xd6>
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d05c      	beq.n	800089e <vTaskResume+0xd6>
        {
            taskENTER_CRITICAL();
 80007e4:	f000 fc2a 	bl	800103c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff ffcb 	bl	8000784 <prvTaskIsTaskSuspended>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d052      	beq.n	800089a <vTaskResume+0xd2>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3304      	adds	r3, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fd07 	bl	800020c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	2201      	movs	r2, #1
 8000804:	409a      	lsls	r2, r3
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <vTaskResume+0xe4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4313      	orrs	r3, r2
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <vTaskResume+0xe4>)
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000814:	4926      	ldr	r1, [pc, #152]	; (80008b0 <vTaskResume+0xe8>)
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	3204      	adds	r2, #4
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	1d1a      	adds	r2, r3, #4
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <vTaskResume+0xe8>)
 8000854:	441a      	add	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085e:	4914      	ldr	r1, [pc, #80]	; (80008b0 <vTaskResume+0xe8>)
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	440b      	add	r3, r1
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1c59      	adds	r1, r3, #1
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <vTaskResume+0xe8>)
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4403      	add	r3, r0
 800087a:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <vTaskResume+0xe0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000886:	429a      	cmp	r2, r3
 8000888:	d307      	bcc.n	800089a <vTaskResume+0xd2>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <vTaskResume+0xec>)
 800088c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	f3bf 8f4f 	dsb	sy
 8000896:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800089a:	f000 fbe9 	bl	8001070 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000006c 	.word	0x2000006c
 80008ac:	2000014c 	.word	0x2000014c
 80008b0:	20000070 	.word	0x20000070
 80008b4:	e000ed04 	.word	0xe000ed04

080008b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <vTaskStartScheduler+0x5c>)
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2300      	movs	r3, #0
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008cc:	4912      	ldr	r1, [pc, #72]	; (8000918 <vTaskStartScheduler+0x60>)
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <vTaskStartScheduler+0x64>)
 80008d0:	f7ff fcc5 	bl	800025e <xTaskCreate>
 80008d4:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d115      	bne.n	8000908 <vTaskStartScheduler+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008dc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008ee:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <vTaskStartScheduler+0x68>)
 80008f2:	f04f 32ff 	mov.w	r2, #4294967295
 80008f6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <vTaskStartScheduler+0x6c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <vTaskStartScheduler+0x70>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000904:	f000 fb7a 	bl	8000ffc <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <vTaskStartScheduler+0x74>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000168 	.word	0x20000168
 8000918:	080054f4 	.word	0x080054f4
 800091c:	08000dbd 	.word	0x08000dbd
 8000920:	20000164 	.word	0x20000164
 8000924:	20000150 	.word	0x20000150
 8000928:	20000148 	.word	0x20000148
 800092c:	20000000 	.word	0x20000000

08000930 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <vTaskSuspendAll+0x18>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a03      	ldr	r2, [pc, #12]	; (8000948 <vTaskSuspendAll+0x18>)
 800093c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	2000016c 	.word	0x2000016c

0800094c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800095a:	f000 fb6f 	bl	800103c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800095e:	4b68      	ldr	r3, [pc, #416]	; (8000b00 <xTaskResumeAll+0x1b4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	3b01      	subs	r3, #1
 8000964:	4a66      	ldr	r2, [pc, #408]	; (8000b00 <xTaskResumeAll+0x1b4>)
 8000966:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000968:	4b65      	ldr	r3, [pc, #404]	; (8000b00 <xTaskResumeAll+0x1b4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	f040 80c0 	bne.w	8000af2 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000972:	4b64      	ldr	r3, [pc, #400]	; (8000b04 <xTaskResumeAll+0x1b8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	f000 80bb 	beq.w	8000af2 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800097c:	e08a      	b.n	8000a94 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800097e:	4b62      	ldr	r3, [pc, #392]	; (8000b08 <xTaskResumeAll+0x1bc>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	6a12      	ldr	r2, [r2, #32]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	69d2      	ldr	r2, [r2, #28]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3318      	adds	r3, #24
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d103      	bne.n	80009b4 <xTaskResumeAll+0x68>
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	6a1a      	ldr	r2, [r3, #32]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	68d2      	ldr	r2, [r2, #12]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	6892      	ldr	r2, [r2, #8]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3304      	adds	r3, #4
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d103      	bne.n	80009f2 <xTaskResumeAll+0xa6>
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1e5a      	subs	r2, r3, #1
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	2201      	movs	r2, #1
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <xTaskResumeAll+0x1c0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4a3e      	ldr	r2, [pc, #248]	; (8000b0c <xTaskResumeAll+0x1c0>)
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a18:	493d      	ldr	r1, [pc, #244]	; (8000b10 <xTaskResumeAll+0x1c4>)
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	3304      	adds	r3, #4
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	3204      	adds	r2, #4
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	1d1a      	adds	r2, r3, #4
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <xTaskResumeAll+0x1c4>)
 8000a58:	441a      	add	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a62:	492b      	ldr	r1, [pc, #172]	; (8000b10 <xTaskResumeAll+0x1c4>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	1c59      	adds	r1, r3, #1
 8000a72:	4827      	ldr	r0, [pc, #156]	; (8000b10 <xTaskResumeAll+0x1c4>)
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4403      	add	r3, r0
 8000a7e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <xTaskResumeAll+0x1c8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d302      	bcc.n	8000a94 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <xTaskResumeAll+0x1cc>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <xTaskResumeAll+0x1bc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f47f af70 	bne.w	800097e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000aa4:	f000 fa20 	bl	8000ee8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <xTaskResumeAll+0x1d0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d010      	beq.n	8000ad6 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000ab4:	f000 f836 	bl	8000b24 <xTaskIncrementTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <xTaskResumeAll+0x1cc>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1f1      	bne.n	8000ab4 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <xTaskResumeAll+0x1d0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <xTaskResumeAll+0x1cc>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d009      	beq.n	8000af2 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <xTaskResumeAll+0x1d4>)
 8000ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	f3bf 8f4f 	dsb	sy
 8000aee:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000af2:	f000 fabd 	bl	8001070 <vPortExitCritical>

    return xAlreadyYielded;
 8000af6:	693b      	ldr	r3, [r7, #16]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000016c 	.word	0x2000016c
 8000b04:	20000144 	.word	0x20000144
 8000b08:	20000104 	.word	0x20000104
 8000b0c:	2000014c 	.word	0x2000014c
 8000b10:	20000070 	.word	0x20000070
 8000b14:	2000006c 	.word	0x2000006c
 8000b18:	20000158 	.word	0x20000158
 8000b1c:	20000154 	.word	0x20000154
 8000b20:	e000ed04 	.word	0xe000ed04

08000b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b2e:	4b75      	ldr	r3, [pc, #468]	; (8000d04 <xTaskIncrementTick+0x1e0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f040 80dc 	bne.w	8000cf0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b38:	4b73      	ldr	r3, [pc, #460]	; (8000d08 <xTaskIncrementTick+0x1e4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000b40:	4a71      	ldr	r2, [pc, #452]	; (8000d08 <xTaskIncrementTick+0x1e4>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d110      	bne.n	8000b6e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000b4c:	4b6f      	ldr	r3, [pc, #444]	; (8000d0c <xTaskIncrementTick+0x1e8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	4b6f      	ldr	r3, [pc, #444]	; (8000d10 <xTaskIncrementTick+0x1ec>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a6d      	ldr	r2, [pc, #436]	; (8000d0c <xTaskIncrementTick+0x1e8>)
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4a6d      	ldr	r2, [pc, #436]	; (8000d10 <xTaskIncrementTick+0x1ec>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	4b6c      	ldr	r3, [pc, #432]	; (8000d14 <xTaskIncrementTick+0x1f0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a6b      	ldr	r2, [pc, #428]	; (8000d14 <xTaskIncrementTick+0x1f0>)
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	f000 f9bd 	bl	8000ee8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000b6e:	4b6a      	ldr	r3, [pc, #424]	; (8000d18 <xTaskIncrementTick+0x1f4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f0c0 80a6 	bcc.w	8000cc6 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b7a:	4b64      	ldr	r3, [pc, #400]	; (8000d0c <xTaskIncrementTick+0x1e8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b84:	4b64      	ldr	r3, [pc, #400]	; (8000d18 <xTaskIncrementTick+0x1f4>)
 8000b86:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8a:	601a      	str	r2, [r3, #0]
                    break;
 8000b8c:	e09b      	b.n	8000cc6 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b8e:	4b5f      	ldr	r3, [pc, #380]	; (8000d0c <xTaskIncrementTick+0x1e8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d203      	bcs.n	8000bae <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000ba6:	4a5c      	ldr	r2, [pc, #368]	; (8000d18 <xTaskIncrementTick+0x1f4>)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000bac:	e08b      	b.n	8000cc6 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68d2      	ldr	r2, [r2, #12]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	6892      	ldr	r2, [r2, #8]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d103      	bne.n	8000bdc <xTaskIncrementTick+0xb8>
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1e5a      	subs	r2, r3, #1
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d01e      	beq.n	8000c32 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	6a12      	ldr	r2, [r2, #32]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	69d2      	ldr	r2, [r2, #28]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	3318      	adds	r3, #24
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d103      	bne.n	8000c22 <xTaskIncrementTick+0xfe>
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	6a1a      	ldr	r2, [r3, #32]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c36:	2201      	movs	r2, #1
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <xTaskIncrementTick+0x1f8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	4a36      	ldr	r2, [pc, #216]	; (8000d1c <xTaskIncrementTick+0x1f8>)
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c48:	4935      	ldr	r1, [pc, #212]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3304      	adds	r3, #4
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	3204      	adds	r2, #4
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1d1a      	adds	r2, r3, #4
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000c88:	441a      	add	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c92:	4923      	ldr	r1, [pc, #140]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	1c59      	adds	r1, r3, #1
 8000ca2:	481f      	ldr	r0, [pc, #124]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4403      	add	r3, r0
 8000cae:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <xTaskIncrementTick+0x200>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	f67f af5d 	bls.w	8000b7a <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000cc4:	e759      	b.n	8000b7a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <xTaskIncrementTick+0x200>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ccc:	4914      	ldr	r1, [pc, #80]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d901      	bls.n	8000ce2 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <xTaskIncrementTick+0x204>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	e004      	b.n	8000cfa <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <xTaskIncrementTick+0x208>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <xTaskIncrementTick+0x208>)
 8000cf8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000016c 	.word	0x2000016c
 8000d08:	20000148 	.word	0x20000148
 8000d0c:	200000fc 	.word	0x200000fc
 8000d10:	20000100 	.word	0x20000100
 8000d14:	2000015c 	.word	0x2000015c
 8000d18:	20000164 	.word	0x20000164
 8000d1c:	2000014c 	.word	0x2000014c
 8000d20:	20000070 	.word	0x20000070
 8000d24:	2000006c 	.word	0x2000006c
 8000d28:	20000158 	.word	0x20000158
 8000d2c:	20000154 	.word	0x20000154

08000d30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <vTaskSwitchContext+0x78>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <vTaskSwitchContext+0x7c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000d44:	e02a      	b.n	8000d9c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <vTaskSwitchContext+0x7c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <vTaskSwitchContext+0x80>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	fab3 f383 	clz	r3, r3
 8000d58:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	f1c3 031f 	rsb	r3, r3, #31
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <vTaskSwitchContext+0x84>)
 8000d6e:	4413      	add	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	3308      	adds	r3, #8
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d104      	bne.n	8000d92 <vTaskSwitchContext+0x62>
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <vTaskSwitchContext+0x88>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	2000016c 	.word	0x2000016c
 8000dac:	20000158 	.word	0x20000158
 8000db0:	2000014c 	.word	0x2000014c
 8000db4:	20000070 	.word	0x20000070
 8000db8:	2000006c 	.word	0x2000006c

08000dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000dc4:	f000 f852 	bl	8000e6c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <prvIdleTask+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d9f9      	bls.n	8000dc4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <prvIdleTask+0x2c>)
 8000dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	f3bf 8f4f 	dsb	sy
 8000ddc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000de0:	e7f0      	b.n	8000dc4 <prvIdleTask+0x8>
 8000de2:	bf00      	nop
 8000de4:	20000070 	.word	0x20000070
 8000de8:	e000ed04 	.word	0xe000ed04

08000dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e00c      	b.n	8000e12 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <prvInitialiseTaskLists+0x60>)
 8000e04:	4413      	add	r3, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9b2 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d9ef      	bls.n	8000df8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <prvInitialiseTaskLists+0x64>)
 8000e1a:	f7ff f9a9 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <prvInitialiseTaskLists+0x68>)
 8000e20:	f7ff f9a6 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <prvInitialiseTaskLists+0x6c>)
 8000e26:	f7ff f9a3 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <prvInitialiseTaskLists+0x70>)
 8000e2c:	f7ff f9a0 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <prvInitialiseTaskLists+0x74>)
 8000e32:	f7ff f99d 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <prvInitialiseTaskLists+0x78>)
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <prvInitialiseTaskLists+0x64>)
 8000e3a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <prvInitialiseTaskLists+0x7c>)
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <prvInitialiseTaskLists+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000070 	.word	0x20000070
 8000e50:	200000d4 	.word	0x200000d4
 8000e54:	200000e8 	.word	0x200000e8
 8000e58:	20000104 	.word	0x20000104
 8000e5c:	20000118 	.word	0x20000118
 8000e60:	20000130 	.word	0x20000130
 8000e64:	200000fc 	.word	0x200000fc
 8000e68:	20000100 	.word	0x20000100

08000e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e72:	e019      	b.n	8000ea8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000e74:	f000 f8e2 	bl	800103c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <prvCheckTasksWaitingTermination+0x50>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3304      	adds	r3, #4
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9c1 	bl	800020c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <prvCheckTasksWaitingTermination+0x54>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <prvCheckTasksWaitingTermination+0x54>)
 8000e92:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <prvCheckTasksWaitingTermination+0x58>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <prvCheckTasksWaitingTermination+0x58>)
 8000e9c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000e9e:	f000 f8e7 	bl	8001070 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f810 	bl	8000ec8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <prvCheckTasksWaitingTermination+0x58>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e1      	bne.n	8000e74 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000118 	.word	0x20000118
 8000ec0:	20000144 	.word	0x20000144
 8000ec4:	2000012c 	.word	0x2000012c

08000ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f99d 	bl	8001214 <vPortFree>
            vPortFree( pxTCB );
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f99a 	bl	8001214 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <prvResetNextTaskUnblockTime+0x2c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <prvResetNextTaskUnblockTime+0x30>)
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000efe:	e005      	b.n	8000f0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <prvResetNextTaskUnblockTime+0x2c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <prvResetNextTaskUnblockTime+0x30>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	200000fc 	.word	0x200000fc
 8000f18:	20000164 	.word	0x20000164

08000f1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3b04      	subs	r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	f023 0201 	bic.w	r2, r3, #1
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3b04      	subs	r3, #4
 8000f4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000f4c:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <pxPortInitialiseStack+0x54>)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3b14      	subs	r3, #20
 8000f56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3b20      	subs	r3, #32
 8000f62:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000f64:	68fb      	ldr	r3, [r7, #12]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	08000f75 	.word	0x08000f75

08000f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000f7e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000f82:	f383 8811 	msr	BASEPRI, r3
 8000f86:	f3bf 8f6f 	isb	sy
 8000f8a:	f3bf 8f4f 	dsb	sy
 8000f8e:	607b      	str	r3, [r7, #4]
    }
 8000f90:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000f92:	bf00      	nop
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0fc      	beq.n	8000f94 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <pxCurrentTCBConst2>)
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	6808      	ldr	r0, [r1, #0]
 8000fb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000fba:	f380 8809 	msr	PSP, r0
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	f380 8811 	msr	BASEPRI, r0
 8000fca:	f04e 0e0d 	orr.w	lr, lr, #13
 8000fce:	4770      	bx	lr

08000fd0 <pxCurrentTCBConst2>:
 8000fd0:	2000006c 	.word	0x2000006c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop

08000fd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <prvPortStartFirstTask+0x1c>)
 8000fda:	6800      	ldr	r0, [r0, #0]
 8000fdc:	6800      	ldr	r0, [r0, #0]
 8000fde:	f380 8808 	msr	MSP, r0
 8000fe2:	b662      	cpsie	i
 8000fe4:	b661      	cpsie	f
 8000fe6:	f3bf 8f4f 	dsb	sy
 8000fea:	f3bf 8f6f 	isb	sy
 8000fee:	df00      	svc	0
 8000ff0:	bf00      	nop
 8000ff2:	0000      	.short	0x0000
 8000ff4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop

08000ffc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <xPortStartScheduler+0x38>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <xPortStartScheduler+0x38>)
 8001006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800100a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <xPortStartScheduler+0x38>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a08      	ldr	r2, [pc, #32]	; (8001034 <xPortStartScheduler+0x38>)
 8001012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001016:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001018:	f000 f890 	bl	800113c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <xPortStartScheduler+0x3c>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001022:	f7ff ffd9 	bl	8000fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001026:	f7ff fe83 	bl	8000d30 <vTaskSwitchContext>
    prvTaskExitError();
 800102a:	f7ff ffa3 	bl	8000f74 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	bd80      	pop	{r7, pc}
 8001034:	e000ed20 	.word	0xe000ed20
 8001038:	20000004 	.word	0x20000004

0800103c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
        __asm volatile
 8001042:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001046:	f383 8811 	msr	BASEPRI, r3
 800104a:	f3bf 8f6f 	isb	sy
 800104e:	f3bf 8f4f 	dsb	sy
 8001052:	607b      	str	r3, [r7, #4]
    }
 8001054:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <vPortEnterCritical+0x30>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a03      	ldr	r2, [pc, #12]	; (800106c <vPortEnterCritical+0x30>)
 800105e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000004 	.word	0x20000004

08001070 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <vPortExitCritical+0x30>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3b01      	subs	r3, #1
 800107c:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <vPortExitCritical+0x30>)
 800107e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <vPortExitCritical+0x30>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <vPortExitCritical+0x24>
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001092:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000004 	.word	0x20000004
	...

080010b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80010b0:	f3ef 8009 	mrs	r0, PSP
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <pxCurrentTCBConst>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010c0:	6010      	str	r0, [r2, #0]
 80010c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80010c6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80010ca:	f380 8811 	msr	BASEPRI, r0
 80010ce:	f7ff fe2f 	bl	8000d30 <vTaskSwitchContext>
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	f380 8811 	msr	BASEPRI, r0
 80010da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	6808      	ldr	r0, [r1, #0]
 80010e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010e6:	f380 8809 	msr	PSP, r0
 80010ea:	f3bf 8f6f 	isb	sy
 80010ee:	4770      	bx	lr

080010f0 <pxCurrentTCBConst>:
 80010f0:	2000006c 	.word	0x2000006c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop

080010f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
        __asm volatile
 80010fe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	607b      	str	r3, [r7, #4]
    }
 8001110:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001112:	f7ff fd07 	bl	8000b24 <xTaskIncrementTick>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SysTick_Handler+0x40>)
 800111e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f383 8811 	msr	BASEPRI, r3
    }
 800112e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	e000ed04 	.word	0xe000ed04

0800113c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <vPortSetupTimerInterrupt+0x28>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <vPortSetupTimerInterrupt+0x2c>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <vPortSetupTimerInterrupt+0x30>)
 800114e:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001152:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <vPortSetupTimerInterrupt+0x28>)
 8001156:	2207      	movs	r2, #7
 8001158:	601a      	str	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010
 8001168:	e000e018 	.word	0xe000e018
 800116c:	e000e014 	.word	0xe000e014

08001170 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00e      	beq.n	80011a4 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f023 0307 	bic.w	r3, r3, #7
 800118c:	3308      	adds	r3, #8
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	d205      	bcs.n	80011a0 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f023 0307 	bic.w	r3, r3, #7
 800119a:	3308      	adds	r3, #8
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e001      	b.n	80011a4 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 80011a4:	f7ff fbc4 	bl	8000930 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <pvPortMalloc+0x98>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <pvPortMalloc+0x9c>)
 80011b2:	f023 0307 	bic.w	r3, r3, #7
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <pvPortMalloc+0x98>)
 80011ba:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d01b      	beq.n	80011fa <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <pvPortMalloc+0xa0>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80011ca:	f643 6277 	movw	r2, #15991	; 0x3e77
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d813      	bhi.n	80011fa <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <pvPortMalloc+0xa0>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	441a      	add	r2, r3
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <pvPortMalloc+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80011de:	429a      	cmp	r2, r3
 80011e0:	d90b      	bls.n	80011fa <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <pvPortMalloc+0x98>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <pvPortMalloc+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <pvPortMalloc+0xa0>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <pvPortMalloc+0xa0>)
 80011f8:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80011fa:	f7ff fba7 	bl	800094c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20003ff4 	.word	0x20003ff4
 800120c:	20000177 	.word	0x20000177
 8001210:	20003ff0 	.word	0x20003ff0

08001214 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <DMS_init>:
 */

#include "DMS.h"


void DMS_init(){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
	PIN_config PINx={TOUCH1,INPUT_FI,0};
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <DMS_init+0x58>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4619      	mov	r1, r3
 800123a:	4812      	ldr	r0, [pc, #72]	; (8001284 <DMS_init+0x5c>)
 800123c:	f001 fd8c 	bl	8002d58 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH2,INPUT_FI,0};
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <DMS_init+0x60>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4619      	mov	r1, r3
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <DMS_init+0x5c>)
 800124e:	f001 fd83 	bl	8002d58 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH3,INPUT_FI,0};
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <DMS_init+0x64>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <DMS_init+0x5c>)
 8001260:	f001 fd7a 	bl	8002d58 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH4,INPUT_FI,0};
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <DMS_init+0x68>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <DMS_init+0x5c>)
 8001272:	f001 fd71 	bl	8002d58 <MCAL_GPIO_init>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	080054fc 	.word	0x080054fc
 8001284:	40010800 	.word	0x40010800
 8001288:	08005500 	.word	0x08005500
 800128c:	08005504 	.word	0x08005504
 8001290:	08005508 	.word	0x08005508

08001294 <DMS_read>:


uint8_t DMS_read(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	if((MCAL_Read_PIN(DMS_PORT, TOUCH1)) || (MCAL_Read_PIN(DMS_PORT, TOUCH2)) ||(MCAL_Read_PIN(DMS_PORT, TOUCH3)) || (MCAL_Read_PIN(DMS_PORT, TOUCH4))){
 8001298:	2101      	movs	r1, #1
 800129a:	4810      	ldr	r0, [pc, #64]	; (80012dc <DMS_read+0x48>)
 800129c:	f001 fe6e 	bl	8002f7c <MCAL_Read_PIN>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d114      	bne.n	80012d0 <DMS_read+0x3c>
 80012a6:	210c      	movs	r1, #12
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <DMS_read+0x48>)
 80012aa:	f001 fe67 	bl	8002f7c <MCAL_Read_PIN>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10d      	bne.n	80012d0 <DMS_read+0x3c>
 80012b4:	210b      	movs	r1, #11
 80012b6:	4809      	ldr	r0, [pc, #36]	; (80012dc <DMS_read+0x48>)
 80012b8:	f001 fe60 	bl	8002f7c <MCAL_Read_PIN>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d106      	bne.n	80012d0 <DMS_read+0x3c>
 80012c2:	2108      	movs	r1, #8
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <DMS_read+0x48>)
 80012c6:	f001 fe59 	bl	8002f7c <MCAL_Read_PIN>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <DMS_read+0x40>
		return 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <DMS_read+0x42>
		//		_TIM1_delay_ms(30); //depouncing delay
//		if((MCAL_Read_PIN(DMS_PORT, TOUCH1)) || (MCAL_Read_PIN(DMS_PORT, TOUCH2)) ||(MCAL_Read_PIN(DMS_PORT, TOUCH3)) || (MCAL_Read_PIN(DMS_PORT, TOUCH4))){
//				return 1;
//		}
	}
	return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40010800 	.word	0x40010800

080012e0 <LUNA_CallBack>:
#include "USART_Driver.h"
uint16_t LUNA_dis=0;
uint16_t LUNA_AMP=0;
uint16_t LUNA_TEMP=0;
uint8_t LUNA_CheckSum=0;
void LUNA_CallBack(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	static uint8_t x=0;


		if(x==0){
 80012e4:	4b5e      	ldr	r3, [pc, #376]	; (8001460 <LUNA_CallBack+0x180>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10d      	bne.n	8001308 <LUNA_CallBack+0x28>
			if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59){
 80012ec:	485d      	ldr	r0, [pc, #372]	; (8001464 <LUNA_CallBack+0x184>)
 80012ee:	f003 f877 	bl	80043e0 <MCAL_USART_ReciveData>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b59      	cmp	r3, #89	; 0x59
 80012f6:	f040 80b1 	bne.w	800145c <LUNA_CallBack+0x17c>
				x++;
 80012fa:	4b59      	ldr	r3, [pc, #356]	; (8001460 <LUNA_CallBack+0x180>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b57      	ldr	r3, [pc, #348]	; (8001460 <LUNA_CallBack+0x180>)
 8001304:	701a      	strb	r2, [r3, #0]
		}




}
 8001306:	e0a9      	b.n	800145c <LUNA_CallBack+0x17c>
		}else if(x==1){
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <LUNA_CallBack+0x180>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d10d      	bne.n	800132c <LUNA_CallBack+0x4c>
			if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59)
 8001310:	4854      	ldr	r0, [pc, #336]	; (8001464 <LUNA_CallBack+0x184>)
 8001312:	f003 f865 	bl	80043e0 <MCAL_USART_ReciveData>
 8001316:	4603      	mov	r3, r0
 8001318:	2b59      	cmp	r3, #89	; 0x59
 800131a:	f040 809f 	bne.w	800145c <LUNA_CallBack+0x17c>
				x++;
 800131e:	4b50      	ldr	r3, [pc, #320]	; (8001460 <LUNA_CallBack+0x180>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b4e      	ldr	r3, [pc, #312]	; (8001460 <LUNA_CallBack+0x180>)
 8001328:	701a      	strb	r2, [r3, #0]
}
 800132a:	e097      	b.n	800145c <LUNA_CallBack+0x17c>
		}else if(x==2){
 800132c:	4b4c      	ldr	r3, [pc, #304]	; (8001460 <LUNA_CallBack+0x180>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d110      	bne.n	8001356 <LUNA_CallBack+0x76>
			x++;
 8001334:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <LUNA_CallBack+0x180>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b48      	ldr	r3, [pc, #288]	; (8001460 <LUNA_CallBack+0x180>)
 800133e:	701a      	strb	r2, [r3, #0]
			LUNA_dis=0;
 8001340:	4b49      	ldr	r3, [pc, #292]	; (8001468 <LUNA_CallBack+0x188>)
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
			LUNA_dis=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001346:	4847      	ldr	r0, [pc, #284]	; (8001464 <LUNA_CallBack+0x184>)
 8001348:	f003 f84a 	bl	80043e0 <MCAL_USART_ReciveData>
 800134c:	4603      	mov	r3, r0
 800134e:	461a      	mov	r2, r3
 8001350:	4b45      	ldr	r3, [pc, #276]	; (8001468 <LUNA_CallBack+0x188>)
 8001352:	801a      	strh	r2, [r3, #0]
}
 8001354:	e082      	b.n	800145c <LUNA_CallBack+0x17c>
		}else if(x==3){
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <LUNA_CallBack+0x180>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d114      	bne.n	8001388 <LUNA_CallBack+0xa8>
			x++;
 800135e:	4b40      	ldr	r3, [pc, #256]	; (8001460 <LUNA_CallBack+0x180>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b3e      	ldr	r3, [pc, #248]	; (8001460 <LUNA_CallBack+0x180>)
 8001368:	701a      	strb	r2, [r3, #0]
			LUNA_dis=((LUNA_dis) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 800136a:	483e      	ldr	r0, [pc, #248]	; (8001464 <LUNA_CallBack+0x184>)
 800136c:	f003 f838 	bl	80043e0 <MCAL_USART_ReciveData>
 8001370:	4603      	mov	r3, r0
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21a      	sxth	r2, r3
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <LUNA_CallBack+0x188>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	b21b      	sxth	r3, r3
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b39      	ldr	r3, [pc, #228]	; (8001468 <LUNA_CallBack+0x188>)
 8001384:	801a      	strh	r2, [r3, #0]
}
 8001386:	e069      	b.n	800145c <LUNA_CallBack+0x17c>
		}else if(x==4){
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <LUNA_CallBack+0x180>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b04      	cmp	r3, #4
 800138e:	d110      	bne.n	80013b2 <LUNA_CallBack+0xd2>
			x++;
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <LUNA_CallBack+0x180>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <LUNA_CallBack+0x180>)
 800139a:	701a      	strb	r2, [r3, #0]
			LUNA_AMP=0;
 800139c:	4b33      	ldr	r3, [pc, #204]	; (800146c <LUNA_CallBack+0x18c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	801a      	strh	r2, [r3, #0]
			LUNA_AMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80013a2:	4830      	ldr	r0, [pc, #192]	; (8001464 <LUNA_CallBack+0x184>)
 80013a4:	f003 f81c 	bl	80043e0 <MCAL_USART_ReciveData>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b2f      	ldr	r3, [pc, #188]	; (800146c <LUNA_CallBack+0x18c>)
 80013ae:	801a      	strh	r2, [r3, #0]
}
 80013b0:	e054      	b.n	800145c <LUNA_CallBack+0x17c>
		}else if(x==5){
 80013b2:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <LUNA_CallBack+0x180>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b05      	cmp	r3, #5
 80013b8:	d114      	bne.n	80013e4 <LUNA_CallBack+0x104>
			x++;
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <LUNA_CallBack+0x180>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <LUNA_CallBack+0x180>)
 80013c4:	701a      	strb	r2, [r3, #0]
			LUNA_AMP=((LUNA_AMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80013c6:	4827      	ldr	r0, [pc, #156]	; (8001464 <LUNA_CallBack+0x184>)
 80013c8:	f003 f80a 	bl	80043e0 <MCAL_USART_ReciveData>
 80013cc:	4603      	mov	r3, r0
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <LUNA_CallBack+0x18c>)
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21b      	sxth	r3, r3
 80013dc:	b29a      	uxth	r2, r3
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <LUNA_CallBack+0x18c>)
 80013e0:	801a      	strh	r2, [r3, #0]
}
 80013e2:	e03b      	b.n	800145c <LUNA_CallBack+0x17c>
		}else if(x==6){
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <LUNA_CallBack+0x180>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b06      	cmp	r3, #6
 80013ea:	d110      	bne.n	800140e <LUNA_CallBack+0x12e>
			x++;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <LUNA_CallBack+0x180>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <LUNA_CallBack+0x180>)
 80013f6:	701a      	strb	r2, [r3, #0]
			LUNA_TEMP=0;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <LUNA_CallBack+0x190>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	801a      	strh	r2, [r3, #0]
			LUNA_TEMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80013fe:	4819      	ldr	r0, [pc, #100]	; (8001464 <LUNA_CallBack+0x184>)
 8001400:	f002 ffee 	bl	80043e0 <MCAL_USART_ReciveData>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <LUNA_CallBack+0x190>)
 800140a:	801a      	strh	r2, [r3, #0]
}
 800140c:	e026      	b.n	800145c <LUNA_CallBack+0x17c>
		}else if(x==7){
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <LUNA_CallBack+0x180>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b07      	cmp	r3, #7
 8001414:	d114      	bne.n	8001440 <LUNA_CallBack+0x160>
			x++;
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <LUNA_CallBack+0x180>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	3301      	adds	r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <LUNA_CallBack+0x180>)
 8001420:	701a      	strb	r2, [r3, #0]
			LUNA_TEMP=((LUNA_TEMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8001422:	4810      	ldr	r0, [pc, #64]	; (8001464 <LUNA_CallBack+0x184>)
 8001424:	f002 ffdc 	bl	80043e0 <MCAL_USART_ReciveData>
 8001428:	4603      	mov	r3, r0
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <LUNA_CallBack+0x190>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <LUNA_CallBack+0x190>)
 800143c:	801a      	strh	r2, [r3, #0]
}
 800143e:	e00d      	b.n	800145c <LUNA_CallBack+0x17c>
		}else if(x==8){
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <LUNA_CallBack+0x180>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b08      	cmp	r3, #8
 8001446:	d109      	bne.n	800145c <LUNA_CallBack+0x17c>
			LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <LUNA_CallBack+0x184>)
 800144a:	f002 ffc9 	bl	80043e0 <MCAL_USART_ReciveData>
 800144e:	4603      	mov	r3, r0
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <LUNA_CallBack+0x194>)
 8001454:	701a      	strb	r2, [r3, #0]
			x=0;
 8001456:	4b02      	ldr	r3, [pc, #8]	; (8001460 <LUNA_CallBack+0x180>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20003fff 	.word	0x20003fff
 8001464:	40004800 	.word	0x40004800
 8001468:	20003ff8 	.word	0x20003ff8
 800146c:	20003ffa 	.word	0x20003ffa
 8001470:	20003ffc 	.word	0x20003ffc
 8001474:	20003ffe 	.word	0x20003ffe

08001478 <LUNA_INIT>:
	NVIC_ISER1 |=(1<<(USART1_IRQ-32));

}

void LUNA_INIT(LUNA_MODES mode,OUTPUT_FORMAT format)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
	/*bude raete 9600*/
	USART_Config_t PIN ={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,Disabled,Asynchronous,ONE_STOP_BIT,LUNA_CallBack};
 8001488:	4b8e      	ldr	r3, [pc, #568]	; (80016c4 <LUNA_INIT+0x24c>)
 800148a:	f107 0408 	add.w	r4, r7, #8
 800148e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(LUNA_UART_INSTANT, &PIN);
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	488b      	ldr	r0, [pc, #556]	; (80016c8 <LUNA_INIT+0x250>)
 800149c:	f002 fdf4 	bl	8004088 <MCAL_USART_init>
	//	LUNA_Disable();
	MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0xC2);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80014a0:	215a      	movs	r1, #90	; 0x5a
 80014a2:	4889      	ldr	r0, [pc, #548]	; (80016c8 <LUNA_INIT+0x250>)
 80014a4:	f002 ff5c 	bl	8004360 <MCAL_USART_SendData>
 80014a8:	2108      	movs	r1, #8
 80014aa:	4887      	ldr	r0, [pc, #540]	; (80016c8 <LUNA_INIT+0x250>)
 80014ac:	f002 ff58 	bl	8004360 <MCAL_USART_SendData>
 80014b0:	2106      	movs	r1, #6
 80014b2:	4885      	ldr	r0, [pc, #532]	; (80016c8 <LUNA_INIT+0x250>)
 80014b4:	f002 ff54 	bl	8004360 <MCAL_USART_SendData>
 80014b8:	2100      	movs	r1, #0
 80014ba:	4883      	ldr	r0, [pc, #524]	; (80016c8 <LUNA_INIT+0x250>)
 80014bc:	f002 ff50 	bl	8004360 <MCAL_USART_SendData>
 80014c0:	21c2      	movs	r1, #194	; 0xc2
 80014c2:	4881      	ldr	r0, [pc, #516]	; (80016c8 <LUNA_INIT+0x250>)
 80014c4:	f002 ff4c 	bl	8004360 <MCAL_USART_SendData>
 80014c8:	2101      	movs	r1, #1
 80014ca:	487f      	ldr	r0, [pc, #508]	; (80016c8 <LUNA_INIT+0x250>)
 80014cc:	f002 ff48 	bl	8004360 <MCAL_USART_SendData>
 80014d0:	2100      	movs	r1, #0
 80014d2:	487d      	ldr	r0, [pc, #500]	; (80016c8 <LUNA_INIT+0x250>)
 80014d4:	f002 ff44 	bl	8004360 <MCAL_USART_SendData>
 80014d8:	2100      	movs	r1, #0
 80014da:	487b      	ldr	r0, [pc, #492]	; (80016c8 <LUNA_INIT+0x250>)
 80014dc:	f002 ff40 	bl	8004360 <MCAL_USART_SendData>
	switch (mode){
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d048      	beq.n	8001578 <LUNA_INIT+0x100>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	dc57      	bgt.n	800159a <LUNA_INIT+0x122>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <LUNA_INIT+0x7c>
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d019      	beq.n	8001526 <LUNA_INIT+0xae>
 80014f2:	e052      	b.n	800159a <LUNA_INIT+0x122>
	case CONTIOUS_RANGING_MODE:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x64);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80014f4:	215a      	movs	r1, #90	; 0x5a
 80014f6:	4874      	ldr	r0, [pc, #464]	; (80016c8 <LUNA_INIT+0x250>)
 80014f8:	f002 ff32 	bl	8004360 <MCAL_USART_SendData>
 80014fc:	2106      	movs	r1, #6
 80014fe:	4872      	ldr	r0, [pc, #456]	; (80016c8 <LUNA_INIT+0x250>)
 8001500:	f002 ff2e 	bl	8004360 <MCAL_USART_SendData>
 8001504:	2103      	movs	r1, #3
 8001506:	4870      	ldr	r0, [pc, #448]	; (80016c8 <LUNA_INIT+0x250>)
 8001508:	f002 ff2a 	bl	8004360 <MCAL_USART_SendData>
 800150c:	2164      	movs	r1, #100	; 0x64
 800150e:	486e      	ldr	r0, [pc, #440]	; (80016c8 <LUNA_INIT+0x250>)
 8001510:	f002 ff26 	bl	8004360 <MCAL_USART_SendData>
 8001514:	2100      	movs	r1, #0
 8001516:	486c      	ldr	r0, [pc, #432]	; (80016c8 <LUNA_INIT+0x250>)
 8001518:	f002 ff22 	bl	8004360 <MCAL_USART_SendData>
 800151c:	2100      	movs	r1, #0
 800151e:	486a      	ldr	r0, [pc, #424]	; (80016c8 <LUNA_INIT+0x250>)
 8001520:	f002 ff1e 	bl	8004360 <MCAL_USART_SendData>
		break;
 8001524:	e039      	b.n	800159a <LUNA_INIT+0x122>
	case TRIGER_MODE :
		/*frequancy ==0*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001526:	215a      	movs	r1, #90	; 0x5a
 8001528:	4867      	ldr	r0, [pc, #412]	; (80016c8 <LUNA_INIT+0x250>)
 800152a:	f002 ff19 	bl	8004360 <MCAL_USART_SendData>
 800152e:	2106      	movs	r1, #6
 8001530:	4865      	ldr	r0, [pc, #404]	; (80016c8 <LUNA_INIT+0x250>)
 8001532:	f002 ff15 	bl	8004360 <MCAL_USART_SendData>
 8001536:	2103      	movs	r1, #3
 8001538:	4863      	ldr	r0, [pc, #396]	; (80016c8 <LUNA_INIT+0x250>)
 800153a:	f002 ff11 	bl	8004360 <MCAL_USART_SendData>
 800153e:	2100      	movs	r1, #0
 8001540:	4861      	ldr	r0, [pc, #388]	; (80016c8 <LUNA_INIT+0x250>)
 8001542:	f002 ff0d 	bl	8004360 <MCAL_USART_SendData>
 8001546:	2100      	movs	r1, #0
 8001548:	485f      	ldr	r0, [pc, #380]	; (80016c8 <LUNA_INIT+0x250>)
 800154a:	f002 ff09 	bl	8004360 <MCAL_USART_SendData>
 800154e:	2100      	movs	r1, #0
 8001550:	485d      	ldr	r0, [pc, #372]	; (80016c8 <LUNA_INIT+0x250>)
 8001552:	f002 ff05 	bl	8004360 <MCAL_USART_SendData>
		/*triger mode*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001556:	215a      	movs	r1, #90	; 0x5a
 8001558:	485b      	ldr	r0, [pc, #364]	; (80016c8 <LUNA_INIT+0x250>)
 800155a:	f002 ff01 	bl	8004360 <MCAL_USART_SendData>
 800155e:	2104      	movs	r1, #4
 8001560:	4859      	ldr	r0, [pc, #356]	; (80016c8 <LUNA_INIT+0x250>)
 8001562:	f002 fefd 	bl	8004360 <MCAL_USART_SendData>
 8001566:	2104      	movs	r1, #4
 8001568:	4857      	ldr	r0, [pc, #348]	; (80016c8 <LUNA_INIT+0x250>)
 800156a:	f002 fef9 	bl	8004360 <MCAL_USART_SendData>
 800156e:	2100      	movs	r1, #0
 8001570:	4855      	ldr	r0, [pc, #340]	; (80016c8 <LUNA_INIT+0x250>)
 8001572:	f002 fef5 	bl	8004360 <MCAL_USART_SendData>
		break;
 8001576:	e010      	b.n	800159a <LUNA_INIT+0x122>
	case ON_OFF_MODE :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x3B);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001578:	215a      	movs	r1, #90	; 0x5a
 800157a:	4853      	ldr	r0, [pc, #332]	; (80016c8 <LUNA_INIT+0x250>)
 800157c:	f002 fef0 	bl	8004360 <MCAL_USART_SendData>
 8001580:	2104      	movs	r1, #4
 8001582:	4851      	ldr	r0, [pc, #324]	; (80016c8 <LUNA_INIT+0x250>)
 8001584:	f002 feec 	bl	8004360 <MCAL_USART_SendData>
 8001588:	213b      	movs	r1, #59	; 0x3b
 800158a:	484f      	ldr	r0, [pc, #316]	; (80016c8 <LUNA_INIT+0x250>)
 800158c:	f002 fee8 	bl	8004360 <MCAL_USART_SendData>
 8001590:	2100      	movs	r1, #0
 8001592:	484d      	ldr	r0, [pc, #308]	; (80016c8 <LUNA_INIT+0x250>)
 8001594:	f002 fee4 	bl	8004360 <MCAL_USART_SendData>
		break;
 8001598:	bf00      	nop
	}
	switch (format)
 800159a:	79bb      	ldrb	r3, [r7, #6]
 800159c:	2b05      	cmp	r3, #5
 800159e:	f200 808d 	bhi.w	80016bc <LUNA_INIT+0x244>
 80015a2:	a201      	add	r2, pc, #4	; (adr r2, 80015a8 <LUNA_INIT+0x130>)
 80015a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a8:	080015c1 	.word	0x080015c1
 80015ac:	080015eb 	.word	0x080015eb
 80015b0:	08001615 	.word	0x08001615
 80015b4:	0800163f 	.word	0x0800163f
 80015b8:	08001669 	.word	0x08001669
 80015bc:	08001693 	.word	0x08001693
	{
	case BYTE_9_CM:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80015c0:	215a      	movs	r1, #90	; 0x5a
 80015c2:	4841      	ldr	r0, [pc, #260]	; (80016c8 <LUNA_INIT+0x250>)
 80015c4:	f002 fecc 	bl	8004360 <MCAL_USART_SendData>
 80015c8:	2105      	movs	r1, #5
 80015ca:	483f      	ldr	r0, [pc, #252]	; (80016c8 <LUNA_INIT+0x250>)
 80015cc:	f002 fec8 	bl	8004360 <MCAL_USART_SendData>
 80015d0:	2105      	movs	r1, #5
 80015d2:	483d      	ldr	r0, [pc, #244]	; (80016c8 <LUNA_INIT+0x250>)
 80015d4:	f002 fec4 	bl	8004360 <MCAL_USART_SendData>
 80015d8:	2101      	movs	r1, #1
 80015da:	483b      	ldr	r0, [pc, #236]	; (80016c8 <LUNA_INIT+0x250>)
 80015dc:	f002 fec0 	bl	8004360 <MCAL_USART_SendData>
 80015e0:	2100      	movs	r1, #0
 80015e2:	4839      	ldr	r0, [pc, #228]	; (80016c8 <LUNA_INIT+0x250>)
 80015e4:	f002 febc 	bl	8004360 <MCAL_USART_SendData>
		break;
 80015e8:	e068      	b.n	80016bc <LUNA_INIT+0x244>
	case PLX :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x02);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80015ea:	215a      	movs	r1, #90	; 0x5a
 80015ec:	4836      	ldr	r0, [pc, #216]	; (80016c8 <LUNA_INIT+0x250>)
 80015ee:	f002 feb7 	bl	8004360 <MCAL_USART_SendData>
 80015f2:	2105      	movs	r1, #5
 80015f4:	4834      	ldr	r0, [pc, #208]	; (80016c8 <LUNA_INIT+0x250>)
 80015f6:	f002 feb3 	bl	8004360 <MCAL_USART_SendData>
 80015fa:	2105      	movs	r1, #5
 80015fc:	4832      	ldr	r0, [pc, #200]	; (80016c8 <LUNA_INIT+0x250>)
 80015fe:	f002 feaf 	bl	8004360 <MCAL_USART_SendData>
 8001602:	2102      	movs	r1, #2
 8001604:	4830      	ldr	r0, [pc, #192]	; (80016c8 <LUNA_INIT+0x250>)
 8001606:	f002 feab 	bl	8004360 <MCAL_USART_SendData>
 800160a:	2100      	movs	r1, #0
 800160c:	482e      	ldr	r0, [pc, #184]	; (80016c8 <LUNA_INIT+0x250>)
 800160e:	f002 fea7 	bl	8004360 <MCAL_USART_SendData>
		break;
 8001612:	e053      	b.n	80016bc <LUNA_INIT+0x244>
	case BYTE_9_MM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001614:	215a      	movs	r1, #90	; 0x5a
 8001616:	482c      	ldr	r0, [pc, #176]	; (80016c8 <LUNA_INIT+0x250>)
 8001618:	f002 fea2 	bl	8004360 <MCAL_USART_SendData>
 800161c:	2105      	movs	r1, #5
 800161e:	482a      	ldr	r0, [pc, #168]	; (80016c8 <LUNA_INIT+0x250>)
 8001620:	f002 fe9e 	bl	8004360 <MCAL_USART_SendData>
 8001624:	2105      	movs	r1, #5
 8001626:	4828      	ldr	r0, [pc, #160]	; (80016c8 <LUNA_INIT+0x250>)
 8001628:	f002 fe9a 	bl	8004360 <MCAL_USART_SendData>
 800162c:	2106      	movs	r1, #6
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <LUNA_INIT+0x250>)
 8001630:	f002 fe96 	bl	8004360 <MCAL_USART_SendData>
 8001634:	2100      	movs	r1, #0
 8001636:	4824      	ldr	r0, [pc, #144]	; (80016c8 <LUNA_INIT+0x250>)
 8001638:	f002 fe92 	bl	8004360 <MCAL_USART_SendData>
		break;
 800163c:	e03e      	b.n	80016bc <LUNA_INIT+0x244>
	case BYTE_32:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x07);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800163e:	215a      	movs	r1, #90	; 0x5a
 8001640:	4821      	ldr	r0, [pc, #132]	; (80016c8 <LUNA_INIT+0x250>)
 8001642:	f002 fe8d 	bl	8004360 <MCAL_USART_SendData>
 8001646:	2105      	movs	r1, #5
 8001648:	481f      	ldr	r0, [pc, #124]	; (80016c8 <LUNA_INIT+0x250>)
 800164a:	f002 fe89 	bl	8004360 <MCAL_USART_SendData>
 800164e:	2105      	movs	r1, #5
 8001650:	481d      	ldr	r0, [pc, #116]	; (80016c8 <LUNA_INIT+0x250>)
 8001652:	f002 fe85 	bl	8004360 <MCAL_USART_SendData>
 8001656:	2107      	movs	r1, #7
 8001658:	481b      	ldr	r0, [pc, #108]	; (80016c8 <LUNA_INIT+0x250>)
 800165a:	f002 fe81 	bl	8004360 <MCAL_USART_SendData>
 800165e:	2100      	movs	r1, #0
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <LUNA_INIT+0x250>)
 8001662:	f002 fe7d 	bl	8004360 <MCAL_USART_SendData>
		break;
 8001666:	e029      	b.n	80016bc <LUNA_INIT+0x244>
	case ID_0 :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001668:	215a      	movs	r1, #90	; 0x5a
 800166a:	4817      	ldr	r0, [pc, #92]	; (80016c8 <LUNA_INIT+0x250>)
 800166c:	f002 fe78 	bl	8004360 <MCAL_USART_SendData>
 8001670:	2105      	movs	r1, #5
 8001672:	4815      	ldr	r0, [pc, #84]	; (80016c8 <LUNA_INIT+0x250>)
 8001674:	f002 fe74 	bl	8004360 <MCAL_USART_SendData>
 8001678:	2105      	movs	r1, #5
 800167a:	4813      	ldr	r0, [pc, #76]	; (80016c8 <LUNA_INIT+0x250>)
 800167c:	f002 fe70 	bl	8004360 <MCAL_USART_SendData>
 8001680:	2108      	movs	r1, #8
 8001682:	4811      	ldr	r0, [pc, #68]	; (80016c8 <LUNA_INIT+0x250>)
 8001684:	f002 fe6c 	bl	8004360 <MCAL_USART_SendData>
 8001688:	2100      	movs	r1, #0
 800168a:	480f      	ldr	r0, [pc, #60]	; (80016c8 <LUNA_INIT+0x250>)
 800168c:	f002 fe68 	bl	8004360 <MCAL_USART_SendData>
		break;
 8001690:	e014      	b.n	80016bc <LUNA_INIT+0x244>
	case BYTE_8_CM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x09);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001692:	215a      	movs	r1, #90	; 0x5a
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LUNA_INIT+0x250>)
 8001696:	f002 fe63 	bl	8004360 <MCAL_USART_SendData>
 800169a:	2105      	movs	r1, #5
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <LUNA_INIT+0x250>)
 800169e:	f002 fe5f 	bl	8004360 <MCAL_USART_SendData>
 80016a2:	2105      	movs	r1, #5
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <LUNA_INIT+0x250>)
 80016a6:	f002 fe5b 	bl	8004360 <MCAL_USART_SendData>
 80016aa:	2109      	movs	r1, #9
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <LUNA_INIT+0x250>)
 80016ae:	f002 fe57 	bl	8004360 <MCAL_USART_SendData>
 80016b2:	2100      	movs	r1, #0
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <LUNA_INIT+0x250>)
 80016b6:	f002 fe53 	bl	8004360 <MCAL_USART_SendData>
		break;
 80016ba:	bf00      	nop
	}
}
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	0800550c 	.word	0x0800550c
 80016c8:	40004800 	.word	0x40004800

080016cc <TFT_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TFT_init(RGB_fromat RGB){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af04      	add	r7, sp, #16
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]

	/**************init the moudles used*************/
	SPI_Config_t TFT_Config={enabled,Master,SPI_8_BITS,MSB,SW,F_CPU_2,idle_0,first_clock};
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	2301      	movs	r3, #1
 80016e6:	743b      	strb	r3, [r7, #16]
 80016e8:	2301      	movs	r3, #1
 80016ea:	747b      	strb	r3, [r7, #17]
	PIN_config PINx={TFT_RESET_PIN,OUTPUT_PP,SPEED_10};
 80016ec:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <TFT_init+0xf4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
	MCAL_SPI_init(TFT_SPI_inistant, &TFT_Config);
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	4619      	mov	r1, r3
 80016f8:	4832      	ldr	r0, [pc, #200]	; (80017c4 <TFT_init+0xf8>)
 80016fa:	f002 f945 	bl	8003988 <MCAL_SPI_init>
	MCAL_GPIO_init(TFT_PORT, &PINx);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	4619      	mov	r1, r3
 8001704:	4830      	ldr	r0, [pc, #192]	; (80017c8 <TFT_init+0xfc>)
 8001706:	f001 fb27 	bl	8002d58 <MCAL_GPIO_init>
	PINx.PIN_number =TFT_A0_PIN;
 800170a:	2303      	movs	r3, #3
 800170c:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_init(TFT_PORT, &PINx);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4619      	mov	r1, r3
 8001714:	482c      	ldr	r0, [pc, #176]	; (80017c8 <TFT_init+0xfc>)
 8001716:	f001 fb1f 	bl	8002d58 <MCAL_GPIO_init>
	/**************Start the init*************/
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 800171a:	2201      	movs	r2, #1
 800171c:	2104      	movs	r1, #4
 800171e:	482a      	ldr	r0, [pc, #168]	; (80017c8 <TFT_init+0xfc>)
 8001720:	f001 fc04 	bl	8002f2c <MCAL_write_PIN>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_LOW);
 8001724:	2200      	movs	r2, #0
 8001726:	2102      	movs	r1, #2
 8001728:	4827      	ldr	r0, [pc, #156]	; (80017c8 <TFT_init+0xfc>)
 800172a:	f001 fbff 	bl	8002f2c <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 800172e:	2078      	movs	r0, #120	; 0x78
 8001730:	f002 fc92 	bl	8004058 <_TIM1_delay_ms>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_HIGH);
 8001734:	2201      	movs	r2, #1
 8001736:	2102      	movs	r1, #2
 8001738:	4823      	ldr	r0, [pc, #140]	; (80017c8 <TFT_init+0xfc>)
 800173a:	f001 fbf7 	bl	8002f2c <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 800173e:	2078      	movs	r0, #120	; 0x78
 8001740:	f002 fc8a 	bl	8004058 <_TIM1_delay_ms>

	TFT_send_command(0x01);
 8001744:	2001      	movs	r0, #1
 8001746:	f000 f91d 	bl	8001984 <TFT_send_command>
	_TIM1_delay_ms( 120);
 800174a:	2078      	movs	r0, #120	; 0x78
 800174c:	f002 fc84 	bl	8004058 <_TIM1_delay_ms>

	TFT_send_command(TFT_Sleep_Out_MODE);
 8001750:	2011      	movs	r0, #17
 8001752:	f000 f917 	bl	8001984 <TFT_send_command>
	_TIM1_delay_ms( 110);
 8001756:	206e      	movs	r0, #110	; 0x6e
 8001758:	f002 fc7e 	bl	8004058 <_TIM1_delay_ms>

	TFT_send_command(TFT_Pixel_Format_MODE); // Interface Pixel Format
 800175c:	203a      	movs	r0, #58	; 0x3a
 800175e:	f000 f911 	bl	8001984 <TFT_send_command>
	TFT_send_data(RGB); //18 bit
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f92f 	bl	80019c8 <TFT_send_data>
	_TIM1_delay_ms( 120);
 800176a:	2078      	movs	r0, #120	; 0x78
 800176c:	f002 fc74 	bl	8004058 <_TIM1_delay_ms>

	//		TFT_send_command(0x23); // Interface Pixel Format
	TFT_send_command(0x36);
 8001770:	2036      	movs	r0, #54	; 0x36
 8001772:	f000 f907 	bl	8001984 <TFT_send_command>
	_TIM1_delay_ms( 120);
 8001776:	2078      	movs	r0, #120	; 0x78
 8001778:	f002 fc6e 	bl	8004058 <_TIM1_delay_ms>

	//	TFT_send_data(0b00011000 );
	TFT_send_data(0b10000000 );
 800177c:	2080      	movs	r0, #128	; 0x80
 800177e:	f000 f923 	bl	80019c8 <TFT_send_data>

	_TIM1_delay_ms( 120);
 8001782:	2078      	movs	r0, #120	; 0x78
 8001784:	f002 fc68 	bl	8004058 <_TIM1_delay_ms>

	/////////////////////
	TFT_send_command(0xB4);
 8001788:	20b4      	movs	r0, #180	; 0xb4
 800178a:	f000 f8fb 	bl	8001984 <TFT_send_command>
	//	_TIM1_delay_ms( 120);

	TFT_send_data(0 );
 800178e:	2000      	movs	r0, #0
 8001790:	f000 f91a 	bl	80019c8 <TFT_send_data>
	/////////////////////////
	TFT_send_command(TFT_Display_On_MODE);
 8001794:	2029      	movs	r0, #41	; 0x29
 8001796:	f000 f8f5 	bl	8001984 <TFT_send_command>
	_TIM1_delay_ms( 120);
 800179a:	2078      	movs	r0, #120	; 0x78
 800179c:	f002 fc5c 	bl	8004058 <_TIM1_delay_ms>





	TFT_SET_BACKGROUND(0,159,0,127,0xff,0xff,0xff);
 80017a0:	23ff      	movs	r3, #255	; 0xff
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	23ff      	movs	r3, #255	; 0xff
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	23ff      	movs	r3, #255	; 0xff
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	237f      	movs	r3, #127	; 0x7f
 80017ae:	2200      	movs	r2, #0
 80017b0:	219f      	movs	r1, #159	; 0x9f
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 f8a3 	bl	80018fe <TFT_SET_BACKGROUND>



}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	0800551c 	.word	0x0800551c
 80017c4:	40013000 	.word	0x40013000
 80017c8:	40010800 	.word	0x40010800

080017cc <TFT_SET_LOCATION>:
void TFT_SET_LOCATION(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2){
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	4611      	mov	r1, r2
 80017d8:	461a      	mov	r2, r3
 80017da:	4623      	mov	r3, r4
 80017dc:	80fb      	strh	r3, [r7, #6]
 80017de:	4603      	mov	r3, r0
 80017e0:	80bb      	strh	r3, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	803b      	strh	r3, [r7, #0]
	/***********************************/
	TFT_send_command(TFT_SET_Column_MODE);
 80017ea:	202a      	movs	r0, #42	; 0x2a
 80017ec:	f000 f8ca 	bl	8001984 <TFT_send_command>
	TFT_send_data((y1>>8));
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	0a1b      	lsrs	r3, r3, #8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 f8e5 	bl	80019c8 <TFT_send_data>
	TFT_send_data(((uint8_t)y1));
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f8e0 	bl	80019c8 <TFT_send_data>


	TFT_send_data((y2>>8));
 8001808:	883b      	ldrh	r3, [r7, #0]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	b29b      	uxth	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f8d9 	bl	80019c8 <TFT_send_data>
	TFT_send_data(((uint8_t)y2));
 8001816:	883b      	ldrh	r3, [r7, #0]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f8d4 	bl	80019c8 <TFT_send_data>
	/***********************************/
	TFT_send_command(TFT_SET_Row_MODE);
 8001820:	202b      	movs	r0, #43	; 0x2b
 8001822:	f000 f8af 	bl	8001984 <TFT_send_command>
	TFT_send_data((x1>>8));
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	b29b      	uxth	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f8ca 	bl	80019c8 <TFT_send_data>
	TFT_send_data(((uint8_t)x1));
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f8c5 	bl	80019c8 <TFT_send_data>


	TFT_send_data((x2>>8));
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	b29b      	uxth	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f8be 	bl	80019c8 <TFT_send_data>
	TFT_send_data(((uint8_t)x2));
 800184c:	88bb      	ldrh	r3, [r7, #4]
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f8b9 	bl	80019c8 <TFT_send_data>
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}

0800185e <TFT_SEND_Image>:

void TFT_SEND_Image(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2,uint16_t* image){
 800185e:	b590      	push	{r4, r7, lr}
 8001860:	b087      	sub	sp, #28
 8001862:	af00      	add	r7, sp, #0
 8001864:	4604      	mov	r4, r0
 8001866:	4608      	mov	r0, r1
 8001868:	4611      	mov	r1, r2
 800186a:	461a      	mov	r2, r3
 800186c:	4623      	mov	r3, r4
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	4603      	mov	r3, r0
 8001872:	80bb      	strh	r3, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
 8001878:	4613      	mov	r3, r2
 800187a:	803b      	strh	r3, [r7, #0]
	uint32_t image_size=(((x2)-x1)*((y2)-y1));
 800187c:	88ba      	ldrh	r2, [r7, #4]
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	8839      	ldrh	r1, [r7, #0]
 8001884:	887a      	ldrh	r2, [r7, #2]
 8001886:	1a8a      	subs	r2, r1, r2
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	613b      	str	r3, [r7, #16]
	uint8_t r=0,g=0,b=0;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	2300      	movs	r3, #0
 8001894:	73bb      	strb	r3, [r7, #14]
 8001896:	2300      	movs	r3, #0
 8001898:	737b      	strb	r3, [r7, #13]

	TFT_SET_LOCATION(x1,(x2-1),y1,(y2-1));
 800189a:	88bb      	ldrh	r3, [r7, #4]
 800189c:	3b01      	subs	r3, #1
 800189e:	b299      	uxth	r1, r3
 80018a0:	883b      	ldrh	r3, [r7, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	88f8      	ldrh	r0, [r7, #6]
 80018aa:	f7ff ff8f 	bl	80017cc <TFT_SET_LOCATION>
	TFT_send_command(TFT_Memory_Write_MODE);
 80018ae:	202c      	movs	r0, #44	; 0x2c
 80018b0:	f000 f868 	bl	8001984 <TFT_send_command>
	for(uint32_t i=0;i<image_size;i++){
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e016      	b.n	80018e8 <TFT_SEND_Image+0x8a>
		//		b = (b * 255) / 31;
		//
		//		TFT_send_data(r);
		//		TFT_send_data(g);
		//		TFT_send_data(b);
		TFT_send_data(((image[i])>>8));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018c0:	4413      	add	r3, r2
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 f87c 	bl	80019c8 <TFT_send_data>
		TFT_send_data(image[i]);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018d6:	4413      	add	r3, r2
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f873 	bl	80019c8 <TFT_send_data>
	for(uint32_t i=0;i<image_size;i++){
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d3e4      	bcc.n	80018ba <TFT_SEND_Image+0x5c>
	}
	TFT_send_command(0x00);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 f847 	bl	8001984 <TFT_send_command>


}
 80018f6:	bf00      	nop
 80018f8:	371c      	adds	r7, #28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd90      	pop	{r4, r7, pc}

080018fe <TFT_SET_BACKGROUND>:
void TFT_SET_BACKGROUND(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2,uint8_t r,uint8_t g,uint8_t b){
 80018fe:	b590      	push	{r4, r7, lr}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	4604      	mov	r4, r0
 8001906:	4608      	mov	r0, r1
 8001908:	4611      	mov	r1, r2
 800190a:	461a      	mov	r2, r3
 800190c:	4623      	mov	r3, r4
 800190e:	80fb      	strh	r3, [r7, #6]
 8001910:	4603      	mov	r3, r0
 8001912:	80bb      	strh	r3, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	807b      	strh	r3, [r7, #2]
 8001918:	4613      	mov	r3, r2
 800191a:	803b      	strh	r3, [r7, #0]
	uint32_t image_size=(((x2+1)-x1)*((y2+1)-y1));
 800191c:	88bb      	ldrh	r3, [r7, #4]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	883a      	ldrh	r2, [r7, #0]
 8001926:	1c51      	adds	r1, r2, #1
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	1a8a      	subs	r2, r1, r2
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	60bb      	str	r3, [r7, #8]
	TFT_SET_LOCATION(x1,x2,y1,y2);
 8001932:	883b      	ldrh	r3, [r7, #0]
 8001934:	887a      	ldrh	r2, [r7, #2]
 8001936:	88b9      	ldrh	r1, [r7, #4]
 8001938:	88f8      	ldrh	r0, [r7, #6]
 800193a:	f7ff ff47 	bl	80017cc <TFT_SET_LOCATION>
	TFT_send_command(TFT_Memory_Write_MODE);
 800193e:	202c      	movs	r0, #44	; 0x2c
 8001940:	f000 f820 	bl	8001984 <TFT_send_command>
	for(uint32_t i=0;i<image_size;i++){
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e011      	b.n	800196e <TFT_SET_BACKGROUND+0x70>
		TFT_send_data(r);
 800194a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f83a 	bl	80019c8 <TFT_send_data>
		TFT_send_data(g);
 8001954:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001958:	4618      	mov	r0, r3
 800195a:	f000 f835 	bl	80019c8 <TFT_send_data>
		TFT_send_data(b);
 800195e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f830 	bl	80019c8 <TFT_send_data>
	for(uint32_t i=0;i<image_size;i++){
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	429a      	cmp	r2, r3
 8001974:	d3e9      	bcc.n	800194a <TFT_SET_BACKGROUND+0x4c>
	}
	TFT_send_command(0x00);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f804 	bl	8001984 <TFT_send_command>


}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bd90      	pop	{r4, r7, pc}

08001984 <TFT_send_command>:

		break;
	}
}
void TFT_send_command(uint8_t command)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 800198e:	2200      	movs	r2, #0
 8001990:	2104      	movs	r1, #4
 8001992:	480b      	ldr	r0, [pc, #44]	; (80019c0 <TFT_send_command+0x3c>)
 8001994:	f001 faca 	bl	8002f2c <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_LOW);
 8001998:	2200      	movs	r2, #0
 800199a:	2103      	movs	r1, #3
 800199c:	4808      	ldr	r0, [pc, #32]	; (80019c0 <TFT_send_command+0x3c>)
 800199e:	f001 fac5 	bl	8002f2c <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, command);
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	4619      	mov	r1, r3
 80019a6:	4807      	ldr	r0, [pc, #28]	; (80019c4 <TFT_send_command+0x40>)
 80019a8:	f002 f8ae 	bl	8003b08 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 80019ac:	2201      	movs	r2, #1
 80019ae:	2104      	movs	r1, #4
 80019b0:	4803      	ldr	r0, [pc, #12]	; (80019c0 <TFT_send_command+0x3c>)
 80019b2:	f001 fabb 	bl	8002f2c <MCAL_write_PIN>

}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40010800 	.word	0x40010800
 80019c4:	40013000 	.word	0x40013000

080019c8 <TFT_send_data>:


void TFT_send_data(uint8_t data){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]

	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 80019d2:	2200      	movs	r2, #0
 80019d4:	2104      	movs	r1, #4
 80019d6:	480b      	ldr	r0, [pc, #44]	; (8001a04 <TFT_send_data+0x3c>)
 80019d8:	f001 faa8 	bl	8002f2c <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_HIGH);
 80019dc:	2201      	movs	r2, #1
 80019de:	2103      	movs	r1, #3
 80019e0:	4808      	ldr	r0, [pc, #32]	; (8001a04 <TFT_send_data+0x3c>)
 80019e2:	f001 faa3 	bl	8002f2c <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, data);
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <TFT_send_data+0x40>)
 80019ec:	f002 f88c 	bl	8003b08 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2104      	movs	r1, #4
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <TFT_send_data+0x3c>)
 80019f6:	f001 fa99 	bl	8002f2c <MCAL_write_PIN>


}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40010800 	.word	0x40010800
 8001a08:	40013000 	.word	0x40013000

08001a0c <TFT_SPEED_ICON_Print>:

void TFT_SPEED_ICON_Print(){
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af04      	add	r7, sp, #16
	TFT_SEND_Image(130, 159, 46, 81, SPEED);
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <TFT_SPEED_ICON_Print+0x34>)
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2351      	movs	r3, #81	; 0x51
 8001a18:	222e      	movs	r2, #46	; 0x2e
 8001a1a:	219f      	movs	r1, #159	; 0x9f
 8001a1c:	2082      	movs	r0, #130	; 0x82
 8001a1e:	f7ff ff1e 	bl	800185e <TFT_SEND_Image>
	TFT_SET_BACKGROUND(130,136,46,81,0xff,0xff,0xff);
 8001a22:	23ff      	movs	r3, #255	; 0xff
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	23ff      	movs	r3, #255	; 0xff
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	23ff      	movs	r3, #255	; 0xff
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2351      	movs	r3, #81	; 0x51
 8001a30:	222e      	movs	r2, #46	; 0x2e
 8001a32:	2188      	movs	r1, #136	; 0x88
 8001a34:	2082      	movs	r0, #130	; 0x82
 8001a36:	f7ff ff62 	bl	80018fe <TFT_SET_BACKGROUND>

}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	0801b05c 	.word	0x0801b05c

08001a44 <TFT_Welcome_ICON_Print>:
void TFT_Welcome_ICON_Print(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af04      	add	r7, sp, #16
	TFT_SET_BACKGROUND(0,159,0,127,0,0,0);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	237f      	movs	r3, #127	; 0x7f
 8001a58:	2200      	movs	r2, #0
 8001a5a:	219f      	movs	r1, #159	; 0x9f
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff ff4e 	bl	80018fe <TFT_SET_BACKGROUND>
	TFT_SEND_Image(42, 117, 26, 101, Welcome);
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <TFT_Welcome_ICON_Print+0x54>)
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2365      	movs	r3, #101	; 0x65
 8001a68:	221a      	movs	r2, #26
 8001a6a:	2175      	movs	r1, #117	; 0x75
 8001a6c:	202a      	movs	r0, #42	; 0x2a
 8001a6e:	f7ff fef6 	bl	800185e <TFT_SEND_Image>
	_TIM1_delay_ms(500);
 8001a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a76:	f002 faef 	bl	8004058 <_TIM1_delay_ms>
	TFT_SET_BACKGROUND(0,159,0,127,0xff,0xff,0xff);
 8001a7a:	23ff      	movs	r3, #255	; 0xff
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	23ff      	movs	r3, #255	; 0xff
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	23ff      	movs	r3, #255	; 0xff
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	237f      	movs	r3, #127	; 0x7f
 8001a88:	2200      	movs	r2, #0
 8001a8a:	219f      	movs	r1, #159	; 0x9f
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff ff36 	bl	80018fe <TFT_SET_BACKGROUND>

}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	0801c4ec 	.word	0x0801c4ec

08001a9c <TFT_KM_H_ICON_Print>:
void TFT_KM_H_ICON_Print(){
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af02      	add	r7, sp, #8
	TFT_SEND_Image(75, 102, 49, 79, KM_H);
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <TFT_KM_H_ICON_Print+0x1c>)
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	234f      	movs	r3, #79	; 0x4f
 8001aa8:	2231      	movs	r2, #49	; 0x31
 8001aaa:	2166      	movs	r1, #102	; 0x66
 8001aac:	204b      	movs	r0, #75	; 0x4b
 8001aae:	f7ff fed6 	bl	800185e <TFT_SEND_Image>

}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	0801a954 	.word	0x0801a954

08001abc <TFT_cruise_control_ICON_Print>:
void TFT_cruise_control_ICON_Print(uint8_t on_off){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af04      	add	r7, sp, #16
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
	if(on_off){
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <TFT_cruise_control_ICON_Print+0x22>
		TFT_SEND_Image(0, 26, 0, 26, image_data_cruisecontrol);
 8001acc:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <TFT_cruise_control_ICON_Print+0x44>)
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	231a      	movs	r3, #26
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	211a      	movs	r1, #26
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fec1 	bl	800185e <TFT_SEND_Image>
	}else{
		TFT_SET_BACKGROUND(0, 26, 0, 26,0xff,0xff,0xff);

	}

}
 8001adc:	e00b      	b.n	8001af6 <TFT_cruise_control_ICON_Print+0x3a>
		TFT_SET_BACKGROUND(0, 26, 0, 26,0xff,0xff,0xff);
 8001ade:	23ff      	movs	r3, #255	; 0xff
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	23ff      	movs	r3, #255	; 0xff
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	23ff      	movs	r3, #255	; 0xff
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	231a      	movs	r3, #26
 8001aec:	2200      	movs	r2, #0
 8001aee:	211a      	movs	r1, #26
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff ff04 	bl	80018fe <TFT_SET_BACKGROUND>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	0801b9f0 	.word	0x0801b9f0

08001b04 <TFT_HOD_ICON_Print>:
void TFT_HOD_ICON_Print(uint8_t on_off){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	71fb      	strb	r3, [r7, #7]
	if(on_off){
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <TFT_HOD_ICON_Print+0x22>
		TFT_SEND_Image(0, 27, 101, 128, image_data_hod);
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <TFT_HOD_ICON_Print+0x44>)
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	2265      	movs	r2, #101	; 0x65
 8001b1c:	211b      	movs	r1, #27
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fe9d 	bl	800185e <TFT_SEND_Image>
	}else{
		TFT_SET_BACKGROUND(0, 27, 101, 128,0xff,0xff,0xff);

	}

}
 8001b24:	e00b      	b.n	8001b3e <TFT_HOD_ICON_Print+0x3a>
		TFT_SET_BACKGROUND(0, 27, 101, 128,0xff,0xff,0xff);
 8001b26:	23ff      	movs	r3, #255	; 0xff
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	23ff      	movs	r3, #255	; 0xff
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	23ff      	movs	r3, #255	; 0xff
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	2265      	movs	r2, #101	; 0x65
 8001b36:	211b      	movs	r1, #27
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff fee0 	bl	80018fe <TFT_SET_BACKGROUND>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	0801bf38 	.word	0x0801bf38

08001b4c <TFT_send_TSR_image>:
uint8_t TFT_send_TSR_image(uint8_t image_flag){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]


	//	TFT_SET_BACKGROUND(0x008C,0x0153,0x006E,0x00D1,0xff,0xff,0xff);
	switch(image_flag){
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b19      	cmp	r3, #25
 8001b5a:	d873      	bhi.n	8001c44 <TFT_send_TSR_image+0xf8>
 8001b5c:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <TFT_send_TSR_image+0x18>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001c09 	.word	0x08001c09
 8001b68:	08001c45 	.word	0x08001c45
 8001b6c:	08001c45 	.word	0x08001c45
 8001b70:	08001c45 	.word	0x08001c45
 8001b74:	08001c45 	.word	0x08001c45
 8001b78:	08001c45 	.word	0x08001c45
 8001b7c:	08001c45 	.word	0x08001c45
 8001b80:	08001c31 	.word	0x08001c31
 8001b84:	08001bf5 	.word	0x08001bf5
 8001b88:	08001bcd 	.word	0x08001bcd
 8001b8c:	08001c45 	.word	0x08001c45
 8001b90:	08001c45 	.word	0x08001c45
 8001b94:	08001c45 	.word	0x08001c45
 8001b98:	08001c45 	.word	0x08001c45
 8001b9c:	08001c45 	.word	0x08001c45
 8001ba0:	08001c45 	.word	0x08001c45
 8001ba4:	08001be1 	.word	0x08001be1
 8001ba8:	08001c45 	.word	0x08001c45
 8001bac:	08001c45 	.word	0x08001c45
 8001bb0:	08001c45 	.word	0x08001c45
 8001bb4:	08001c45 	.word	0x08001c45
 8001bb8:	08001c45 	.word	0x08001c45
 8001bbc:	08001c45 	.word	0x08001c45
 8001bc0:	08001c45 	.word	0x08001c45
 8001bc4:	08001c45 	.word	0x08001c45
 8001bc8:	08001c1d 	.word	0x08001c1d
	case (_100_KM_SIGN_FLAG):

			TFT_SEND_Image(0, 75, 26, 101, _100_KM_SIGN);
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <TFT_send_TSR_image+0x114>)
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2365      	movs	r3, #101	; 0x65
 8001bd2:	221a      	movs	r2, #26
 8001bd4:	214b      	movs	r1, #75	; 0x4b
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fe41 	bl	800185e <TFT_SEND_Image>

	return 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e03a      	b.n	8001c56 <TFT_send_TSR_image+0x10a>
	break;

	case _120_KM_SIGN_FLAG:
		TFT_SEND_Image(0, 75, 26, 101, _120_KM_SIGN);
 8001be0:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <TFT_send_TSR_image+0x118>)
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2365      	movs	r3, #101	; 0x65
 8001be6:	221a      	movs	r2, #26
 8001be8:	214b      	movs	r1, #75	; 0x4b
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff fe37 	bl	800185e <TFT_SEND_Image>


		return 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e030      	b.n	8001c56 <TFT_send_TSR_image+0x10a>
		break;


		break;
	case NO_WAITING_SIGN_FLAG:
		TFT_SEND_Image(0, 75, 26, 101, NO_WAITING_SIGN);
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <TFT_send_TSR_image+0x11c>)
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2365      	movs	r3, #101	; 0x65
 8001bfa:	221a      	movs	r2, #26
 8001bfc:	214b      	movs	r1, #75	; 0x4b
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fe2d 	bl	800185e <TFT_SEND_Image>

		return 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	e026      	b.n	8001c56 <TFT_send_TSR_image+0x10a>
		break;
	case _PARKING_SIGN_FLAG:
		TFT_SEND_Image(0, 75, 26, 101, _Parking_SIGN);
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <TFT_send_TSR_image+0x120>)
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2365      	movs	r3, #101	; 0x65
 8001c0e:	221a      	movs	r2, #26
 8001c10:	214b      	movs	r1, #75	; 0x4b
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fe23 	bl	800185e <TFT_SEND_Image>

		return 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e01c      	b.n	8001c56 <TFT_send_TSR_image+0x10a>
		break;
	case STOP_SIGN_FLAG:
		TFT_SEND_Image(0, 75, 26, 101, _STOP_SIGN);
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <TFT_send_TSR_image+0x124>)
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2365      	movs	r3, #101	; 0x65
 8001c22:	221a      	movs	r2, #26
 8001c24:	214b      	movs	r1, #75	; 0x4b
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fe19 	bl	800185e <TFT_SEND_Image>

		return 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e012      	b.n	8001c56 <TFT_send_TSR_image+0x10a>
		break;
	case NO_PARKING_SIGN_FLAG:
		TFT_SEND_Image(0, 75, 26, 101, NO_Parking_SIGN);
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <TFT_send_TSR_image+0x128>)
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2365      	movs	r3, #101	; 0x65
 8001c36:	221a      	movs	r2, #26
 8001c38:	214b      	movs	r1, #75	; 0x4b
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff fe0f 	bl	800185e <TFT_SEND_Image>

		return 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e008      	b.n	8001c56 <TFT_send_TSR_image+0x10a>
		break;
	default:
		TFT_SEND_Image(0, 75, 26, 101, _NO_SIGN);
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <TFT_send_TSR_image+0x12c>)
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2365      	movs	r3, #101	; 0x65
 8001c4a:	221a      	movs	r2, #26
 8001c4c:	214b      	movs	r1, #75	; 0x4b
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff fe05 	bl	800185e <TFT_SEND_Image>

		return 1;
 8001c54:	2301      	movs	r3, #1





}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	08015e20 	.word	0x08015e20
 8001c64:	0801322c 	.word	0x0801322c
 8001c68:	08005668 	.word	0x08005668
 8001c6c:	0800ae50 	.word	0x0800ae50
 8001c70:	0800825c 	.word	0x0800825c
 8001c74:	0800da44 	.word	0x0800da44
 8001c78:	08010638 	.word	0x08010638

08001c7c <TFT_send_ACC_image>:

void TFT_send_ACC_image(uint8_t NUMBER){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af04      	add	r7, sp, #16
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	static uint8_t clear_times=0;
	if(NUMBER<100){
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b63      	cmp	r3, #99	; 0x63
 8001c8a:	d848      	bhi.n	8001d1e <TFT_send_ACC_image+0xa2>
		if(clear_times==0){
 8001c8c:	4b4e      	ldr	r3, [pc, #312]	; (8001dc8 <TFT_send_ACC_image+0x14c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d111      	bne.n	8001cb8 <TFT_send_ACC_image+0x3c>
			TFT_SET_BACKGROUND(105,125,34,94,0xff,0xff,0xff);
 8001c94:	23ff      	movs	r3, #255	; 0xff
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	23ff      	movs	r3, #255	; 0xff
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	23ff      	movs	r3, #255	; 0xff
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	235e      	movs	r3, #94	; 0x5e
 8001ca2:	2222      	movs	r2, #34	; 0x22
 8001ca4:	217d      	movs	r1, #125	; 0x7d
 8001ca6:	2069      	movs	r0, #105	; 0x69
 8001ca8:	f7ff fe29 	bl	80018fe <TFT_SET_BACKGROUND>
			clear_times++;
 8001cac:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <TFT_send_ACC_image+0x14c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <TFT_send_ACC_image+0x14c>)
 8001cb6:	701a      	strb	r2, [r3, #0]
		}
		TFT_SEND_Image(105, 125, 64, 84, numbers_ptr[(NUMBER%10)]); //digit 1
 8001cb8:	79fa      	ldrb	r2, [r7, #7]
 8001cba:	4b44      	ldr	r3, [pc, #272]	; (8001dcc <TFT_send_ACC_image+0x150>)
 8001cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001cc0:	08d9      	lsrs	r1, r3, #3
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <TFT_send_ACC_image+0x154>)
 8001cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2354      	movs	r3, #84	; 0x54
 8001cda:	2240      	movs	r2, #64	; 0x40
 8001cdc:	217d      	movs	r1, #125	; 0x7d
 8001cde:	2069      	movs	r0, #105	; 0x69
 8001ce0:	f7ff fdbd 	bl	800185e <TFT_SEND_Image>
		NUMBER/=10;
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4a39      	ldr	r2, [pc, #228]	; (8001dcc <TFT_send_ACC_image+0x150>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	08db      	lsrs	r3, r3, #3
 8001cee:	71fb      	strb	r3, [r7, #7]
		TFT_SEND_Image(105, 125, 44, 64, numbers_ptr[(NUMBER%10)]); //digit 2
 8001cf0:	79fa      	ldrb	r2, [r7, #7]
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <TFT_send_ACC_image+0x150>)
 8001cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8001cf8:	08d9      	lsrs	r1, r3, #3
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <TFT_send_ACC_image+0x154>)
 8001d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	222c      	movs	r2, #44	; 0x2c
 8001d14:	217d      	movs	r1, #125	; 0x7d
 8001d16:	2069      	movs	r0, #105	; 0x69
 8001d18:	f7ff fda1 	bl	800185e <TFT_SEND_Image>
		TFT_SEND_Image(105, 125, 34, 54, numbers_ptr[(NUMBER%10)]); //digit 3
	}



}
 8001d1c:	e050      	b.n	8001dc0 <TFT_send_ACC_image+0x144>
		clear_times=0;
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <TFT_send_ACC_image+0x14c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
		TFT_SEND_Image(105, 125, 74, 94, numbers_ptr[(NUMBER%10)]); //digit 1
 8001d24:	79fa      	ldrb	r2, [r7, #7]
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <TFT_send_ACC_image+0x150>)
 8001d28:	fba3 1302 	umull	r1, r3, r3, r2
 8001d2c:	08d9      	lsrs	r1, r3, #3
 8001d2e:	460b      	mov	r3, r1
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <TFT_send_ACC_image+0x154>)
 8001d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	235e      	movs	r3, #94	; 0x5e
 8001d46:	224a      	movs	r2, #74	; 0x4a
 8001d48:	217d      	movs	r1, #125	; 0x7d
 8001d4a:	2069      	movs	r0, #105	; 0x69
 8001d4c:	f7ff fd87 	bl	800185e <TFT_SEND_Image>
		NUMBER/=10;
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	4a1e      	ldr	r2, [pc, #120]	; (8001dcc <TFT_send_ACC_image+0x150>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	71fb      	strb	r3, [r7, #7]
		TFT_SEND_Image(105, 125, 54, 74, numbers_ptr[(NUMBER%10)]); //digit 2
 8001d5c:	79fa      	ldrb	r2, [r7, #7]
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <TFT_send_ACC_image+0x150>)
 8001d60:	fba3 1302 	umull	r1, r3, r3, r2
 8001d64:	08d9      	lsrs	r1, r3, #3
 8001d66:	460b      	mov	r3, r1
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <TFT_send_ACC_image+0x154>)
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	234a      	movs	r3, #74	; 0x4a
 8001d7e:	2236      	movs	r2, #54	; 0x36
 8001d80:	217d      	movs	r1, #125	; 0x7d
 8001d82:	2069      	movs	r0, #105	; 0x69
 8001d84:	f7ff fd6b 	bl	800185e <TFT_SEND_Image>
		NUMBER/=10;
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4a10      	ldr	r2, [pc, #64]	; (8001dcc <TFT_send_ACC_image+0x150>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	08db      	lsrs	r3, r3, #3
 8001d92:	71fb      	strb	r3, [r7, #7]
		TFT_SEND_Image(105, 125, 34, 54, numbers_ptr[(NUMBER%10)]); //digit 3
 8001d94:	79fa      	ldrb	r2, [r7, #7]
 8001d96:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <TFT_send_ACC_image+0x150>)
 8001d98:	fba3 1302 	umull	r1, r3, r3, r2
 8001d9c:	08d9      	lsrs	r1, r3, #3
 8001d9e:	460b      	mov	r3, r1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <TFT_send_ACC_image+0x154>)
 8001dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	2336      	movs	r3, #54	; 0x36
 8001db6:	2222      	movs	r2, #34	; 0x22
 8001db8:	217d      	movs	r1, #125	; 0x7d
 8001dba:	2069      	movs	r0, #105	; 0x69
 8001dbc:	f7ff fd4f 	bl	800185e <TFT_SEND_Image>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20004000 	.word	0x20004000
 8001dcc:	cccccccd 	.word	0xcccccccd
 8001dd0:	20000008 	.word	0x20000008

08001dd4 <ADC_ERROR_HANDLER>:
 *      Author: medoo
 */

#include "ADC.h"
ADC_CONFIG G_ADC_config[2][16]={0};
void ADC_ERROR_HANDLER(){
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	while(1);
 8001dd8:	e7fe      	b.n	8001dd8 <ADC_ERROR_HANDLER+0x4>
	...

08001ddc <ADC_GPIO_CONFIG>:
}
void ADC_GPIO_CONFIG(uint8_t CHx){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b090      	sub	sp, #64	; 0x40
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
	PIN_config PINx={PIN_0,Analog,0};
 8001de6:	2300      	movs	r3, #0
 8001de8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	switch(CHx){
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	2b0f      	cmp	r3, #15
 8001dfa:	f200 80d7 	bhi.w	8001fac <ADC_GPIO_CONFIG+0x1d0>
 8001dfe:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <ADC_GPIO_CONFIG+0x28>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e45 	.word	0x08001e45
 8001e08:	08001e63 	.word	0x08001e63
 8001e0c:	08001e81 	.word	0x08001e81
 8001e10:	08001e9f 	.word	0x08001e9f
 8001e14:	08001ebd 	.word	0x08001ebd
 8001e18:	08001edb 	.word	0x08001edb
 8001e1c:	08001ef9 	.word	0x08001ef9
 8001e20:	08001f17 	.word	0x08001f17
 8001e24:	08001f35 	.word	0x08001f35
 8001e28:	08001f53 	.word	0x08001f53
 8001e2c:	08001fad 	.word	0x08001fad
 8001e30:	08001fad 	.word	0x08001fad
 8001e34:	08001fad 	.word	0x08001fad
 8001e38:	08001fad 	.word	0x08001fad
 8001e3c:	08001f71 	.word	0x08001f71
 8001e40:	08001f8f 	.word	0x08001f8f
	case 0:
		PINx=(PIN_config){PIN_0,Analog,0};
 8001e44:	2300      	movs	r3, #0
 8001e46:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001e54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4858      	ldr	r0, [pc, #352]	; (8001fbc <ADC_GPIO_CONFIG+0x1e0>)
 8001e5c:	f000 ff7c 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001e60:	e0a7      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 1:
		PINx=(PIN_config){PIN_1,Analog,0};
 8001e62:	2301      	movs	r3, #1
 8001e64:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001e66:	2300      	movs	r3, #0
 8001e68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001e72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e76:	4619      	mov	r1, r3
 8001e78:	4850      	ldr	r0, [pc, #320]	; (8001fbc <ADC_GPIO_CONFIG+0x1e0>)
 8001e7a:	f000 ff6d 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001e7e:	e098      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 2:
		PINx=(PIN_config){PIN_2,Analog,0};
 8001e80:	2302      	movs	r3, #2
 8001e82:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001e90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e94:	4619      	mov	r1, r3
 8001e96:	4849      	ldr	r0, [pc, #292]	; (8001fbc <ADC_GPIO_CONFIG+0x1e0>)
 8001e98:	f000 ff5e 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001e9c:	e089      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 3:
		PINx=(PIN_config){PIN_3,Analog,0};
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001eae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4841      	ldr	r0, [pc, #260]	; (8001fbc <ADC_GPIO_CONFIG+0x1e0>)
 8001eb6:	f000 ff4f 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001eba:	e07a      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 4:
		PINx=(PIN_config){PIN_4,Analog,0};
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001ecc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	483a      	ldr	r0, [pc, #232]	; (8001fbc <ADC_GPIO_CONFIG+0x1e0>)
 8001ed4:	f000 ff40 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001ed8:	e06b      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 5:
		PINx=(PIN_config){PIN_5,Analog,0};
 8001eda:	2305      	movs	r3, #5
 8001edc:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001eea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4832      	ldr	r0, [pc, #200]	; (8001fbc <ADC_GPIO_CONFIG+0x1e0>)
 8001ef2:	f000 ff31 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001ef6:	e05c      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 6:
		PINx=(PIN_config){PIN_6,Analog,0};
 8001ef8:	2306      	movs	r3, #6
 8001efa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001f08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	482b      	ldr	r0, [pc, #172]	; (8001fbc <ADC_GPIO_CONFIG+0x1e0>)
 8001f10:	f000 ff22 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001f14:	e04d      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 7:
		PINx=(PIN_config){PIN_7,Analog,0};
 8001f16:	2307      	movs	r3, #7
 8001f18:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001f26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4823      	ldr	r0, [pc, #140]	; (8001fbc <ADC_GPIO_CONFIG+0x1e0>)
 8001f2e:	f000 ff13 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001f32:	e03e      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 8:
		PINx=(PIN_config){PIN_0,Analog,0};
 8001f34:	2300      	movs	r3, #0
 8001f36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8001f44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481d      	ldr	r0, [pc, #116]	; (8001fc0 <ADC_GPIO_CONFIG+0x1e4>)
 8001f4c:	f000 ff04 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001f50:	e02f      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 9:
		PINx=(PIN_config){PIN_1,Analog,0};
 8001f52:	2301      	movs	r3, #1
 8001f54:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8001f62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f66:	4619      	mov	r1, r3
 8001f68:	4815      	ldr	r0, [pc, #84]	; (8001fc0 <ADC_GPIO_CONFIG+0x1e4>)
 8001f6a:	f000 fef5 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001f6e:	e020      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 14:
		PINx=(PIN_config){PIN_4,Analog,0};
 8001f70:	2304      	movs	r3, #4
 8001f72:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 8001f80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f84:	4619      	mov	r1, r3
 8001f86:	480f      	ldr	r0, [pc, #60]	; (8001fc4 <ADC_GPIO_CONFIG+0x1e8>)
 8001f88:	f000 fee6 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001f8c:	e011      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	case 15:
		PINx=(PIN_config){PIN_5,Analog,0};
 8001f8e:	2305      	movs	r3, #5
 8001f90:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 8001f9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <ADC_GPIO_CONFIG+0x1e8>)
 8001fa6:	f000 fed7 	bl	8002d58 <MCAL_GPIO_init>
		break;
 8001faa:	e002      	b.n	8001fb2 <ADC_GPIO_CONFIG+0x1d6>
	default:
		ADC_ERROR_HANDLER();
 8001fac:	f7ff ff12 	bl	8001dd4 <ADC_ERROR_HANDLER>
		break;
 8001fb0:	bf00      	nop

	}



}
 8001fb2:	bf00      	nop
 8001fb4:	3740      	adds	r7, #64	; 0x40
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40010800 	.word	0x40010800
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40011000 	.word	0x40011000

08001fc8 <ADC_init>:

ADC_return ADC_init(ADCx_REG *ADCx,ADC_CONFIG *config)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
	if(config->CHx_num>9 &&config->CHx_num<14)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b09      	cmp	r3, #9
 8001fd8:	d905      	bls.n	8001fe6 <ADC_init+0x1e>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b0d      	cmp	r3, #13
 8001fe0:	d801      	bhi.n	8001fe6 <ADC_init+0x1e>
		return ADC_error;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e177      	b.n	80022d6 <ADC_init+0x30e>
	//peripheral clock enable
	if(ADCx ==ADC1){
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a9a      	ldr	r2, [pc, #616]	; (8002254 <ADC_init+0x28c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d113      	bne.n	8002016 <ADC_init+0x4e>
		G_ADC_config[0][config->CHx_num]=*config;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4a98      	ldr	r2, [pc, #608]	; (8002258 <ADC_init+0x290>)
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	440b      	add	r3, r1
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	ca07      	ldmia	r2, {r0, r1, r2}
 8002004:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<9);
 8002008:	4b94      	ldr	r3, [pc, #592]	; (800225c <ADC_init+0x294>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a93      	ldr	r2, [pc, #588]	; (800225c <ADC_init+0x294>)
 800200e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	e013      	b.n	800203e <ADC_init+0x76>
	}
	else{
		G_ADC_config[1][config->CHx_num]=*config;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	4619      	mov	r1, r3
 800201c:	4a8e      	ldr	r2, [pc, #568]	; (8002258 <ADC_init+0x290>)
 800201e:	460b      	mov	r3, r1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	440b      	add	r3, r1
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	33c0      	adds	r3, #192	; 0xc0
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	ca07      	ldmia	r2, {r0, r1, r2}
 800202e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<10);
 8002032:	4b8a      	ldr	r3, [pc, #552]	; (800225c <ADC_init+0x294>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	4a89      	ldr	r2, [pc, #548]	; (800225c <ADC_init+0x294>)
 8002038:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800203c:	6193      	str	r3, [r2, #24]
	}
	ADC_GPIO_CONFIG(config->CHx_num);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff feca 	bl	8001ddc <ADC_GPIO_CONFIG>

	//The ADC can be powered-on by setting the ADON bit in the ADC_CR2 register
	ADCx->CR2.Bit_Name.ADON=1;
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6893      	ldr	r3, [r2, #8]
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6093      	str	r3, [r2, #8]
	_TIM1_delay_us(10);
 8002052:	200a      	movs	r0, #10
 8002054:	f001 ffd4 	bl	8004000 <_TIM1_delay_us>
	/*Conversion starts when ADON bit is set for a second time by software after ADC power-up
	time (tSTAB).*/
	ADCx->CR2.Bit_Name.ADON=1;
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6893      	ldr	r3, [r2, #8]
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6093      	str	r3, [r2, #8]
	//	ADC clock (max 14Mhz)
	// i want to edit the prescaler to ensure the adc clock not more 14Mhz but i assume the my
	//	max clock not more 24 Mhz so the clock will be 12 Mhz

	switch((MCAL_GET_PCLCK2()/1000000UL)){
 8002062:	f001 fc7d 	bl	8003960 <MCAL_GET_PCLCK2>
 8002066:	4603      	mov	r3, r0
 8002068:	4a7d      	ldr	r2, [pc, #500]	; (8002260 <ADC_init+0x298>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0c9b      	lsrs	r3, r3, #18
 8002070:	2b1c      	cmp	r3, #28
 8002072:	d014      	beq.n	800209e <ADC_init+0xd6>
 8002074:	2b1c      	cmp	r3, #28
 8002076:	d819      	bhi.n	80020ac <ADC_init+0xe4>
 8002078:	2b08      	cmp	r3, #8
 800207a:	d002      	beq.n	8002082 <ADC_init+0xba>
 800207c:	2b10      	cmp	r3, #16
 800207e:	d007      	beq.n	8002090 <ADC_init+0xc8>
 8002080:	e014      	b.n	80020ac <ADC_init+0xe4>
	case 8: //ADC CLK 4MHZ
		RCC->CFGR&=~(0b11<<14);
 8002082:	4b76      	ldr	r3, [pc, #472]	; (800225c <ADC_init+0x294>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a75      	ldr	r2, [pc, #468]	; (800225c <ADC_init+0x294>)
 8002088:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800208c:	6053      	str	r3, [r2, #4]
		break;
 800208e:	e014      	b.n	80020ba <ADC_init+0xf2>
	case 16://ADC CLK 8MHZ
		RCC->CFGR&=~(0b11<<14);
 8002090:	4b72      	ldr	r3, [pc, #456]	; (800225c <ADC_init+0x294>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a71      	ldr	r2, [pc, #452]	; (800225c <ADC_init+0x294>)
 8002096:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800209a:	6053      	str	r3, [r2, #4]
		break;
 800209c:	e00d      	b.n	80020ba <ADC_init+0xf2>
	case 28://ADC CLK 12MHZ
		RCC->CFGR&=~(0b11<<14);
 800209e:	4b6f      	ldr	r3, [pc, #444]	; (800225c <ADC_init+0x294>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a6e      	ldr	r2, [pc, #440]	; (800225c <ADC_init+0x294>)
 80020a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020a8:	6053      	str	r3, [r2, #4]
		break;
 80020aa:	e006      	b.n	80020ba <ADC_init+0xf2>
	default:
		//the worst case that 72Mhz so i will divde by 6 to ensure that i'm ok
		RCC->CFGR|=(0b10<<14);
 80020ac:	4b6b      	ldr	r3, [pc, #428]	; (800225c <ADC_init+0x294>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a6a      	ldr	r2, [pc, #424]	; (800225c <ADC_init+0x294>)
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b6:	6053      	str	r3, [r2, #4]
		break;
 80020b8:	bf00      	nop
	}
	//It is recommended to perform a calibration after each power-up.
	ADCx->CR2.Bit_Name.CAL=1;
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6893      	ldr	r3, [r2, #8]
 80020be:	f043 0304 	orr.w	r3, r3, #4
 80020c2:	6093      	str	r3, [r2, #8]
	//Right alignment of data
	ADCx->CR2.Bit_Name.ALIGN=0;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6893      	ldr	r3, [r2, #8]
 80020c8:	f36f 23cb 	bfc	r3, #11, #1
 80020cc:	6093      	str	r3, [r2, #8]
	/*Tconv = Sampling time + 12.5 cycles
			Example:
		With an ADCCLK = 14 MHz and a sampling time of 1.5 cycles:
		Tconv = 1.5 + 12.5 = 14 cycles = 1 μs
		STM32F103xx performance line devices: 1 μs at 56 MHz (1.17 μs at 72 MHz)*/
	switch(config->CHx_num){
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	f200 80a8 	bhi.w	8002228 <ADC_init+0x260>
 80020d8:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <ADC_init+0x118>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	08002121 	.word	0x08002121
 80020e4:	08002137 	.word	0x08002137
 80020e8:	0800214d 	.word	0x0800214d
 80020ec:	08002163 	.word	0x08002163
 80020f0:	08002179 	.word	0x08002179
 80020f4:	0800218f 	.word	0x0800218f
 80020f8:	080021a5 	.word	0x080021a5
 80020fc:	080021bb 	.word	0x080021bb
 8002100:	080021d1 	.word	0x080021d1
 8002104:	080021e7 	.word	0x080021e7
 8002108:	08002229 	.word	0x08002229
 800210c:	08002229 	.word	0x08002229
 8002110:	08002229 	.word	0x08002229
 8002114:	08002229 	.word	0x08002229
 8002118:	080021fd 	.word	0x080021fd
 800211c:	08002213 	.word	0x08002213
	case 0:
		ADCx->SMPR2.Bit_Name.SMP0=config->SPT;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	789b      	ldrb	r3, [r3, #2]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	b2d9      	uxtb	r1, r3
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6913      	ldr	r3, [r2, #16]
 800212e:	f361 0302 	bfi	r3, r1, #0, #3
 8002132:	6113      	str	r3, [r2, #16]
		break;
 8002134:	e07b      	b.n	800222e <ADC_init+0x266>
	case 1:
		ADCx->SMPR2.Bit_Name.SMP1=config->SPT;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	789b      	ldrb	r3, [r3, #2]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	b2d9      	uxtb	r1, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6913      	ldr	r3, [r2, #16]
 8002144:	f361 03c5 	bfi	r3, r1, #3, #3
 8002148:	6113      	str	r3, [r2, #16]

		break;
 800214a:	e070      	b.n	800222e <ADC_init+0x266>
	case 2:
		ADCx->SMPR2.Bit_Name.SMP2=config->SPT;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	789b      	ldrb	r3, [r3, #2]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	b2d9      	uxtb	r1, r3
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6913      	ldr	r3, [r2, #16]
 800215a:	f361 1388 	bfi	r3, r1, #6, #3
 800215e:	6113      	str	r3, [r2, #16]

		break;
 8002160:	e065      	b.n	800222e <ADC_init+0x266>
	case 3:
		ADCx->SMPR2.Bit_Name.SMP3=config->SPT;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	789b      	ldrb	r3, [r3, #2]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	b2d9      	uxtb	r1, r3
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6913      	ldr	r3, [r2, #16]
 8002170:	f361 234b 	bfi	r3, r1, #9, #3
 8002174:	6113      	str	r3, [r2, #16]

		break;
 8002176:	e05a      	b.n	800222e <ADC_init+0x266>
	case 4:
		ADCx->SMPR2.Bit_Name.SMP4=config->SPT;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	789b      	ldrb	r3, [r3, #2]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	b2d9      	uxtb	r1, r3
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6913      	ldr	r3, [r2, #16]
 8002186:	f361 330e 	bfi	r3, r1, #12, #3
 800218a:	6113      	str	r3, [r2, #16]

		break;
 800218c:	e04f      	b.n	800222e <ADC_init+0x266>
	case 5:
		ADCx->SMPR2.Bit_Name.SMP5=config->SPT;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	789b      	ldrb	r3, [r3, #2]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	b2d9      	uxtb	r1, r3
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6913      	ldr	r3, [r2, #16]
 800219c:	f361 33d1 	bfi	r3, r1, #15, #3
 80021a0:	6113      	str	r3, [r2, #16]

		break;
 80021a2:	e044      	b.n	800222e <ADC_init+0x266>
	case 6:
		ADCx->SMPR2.Bit_Name.SMP6=config->SPT;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	789b      	ldrb	r3, [r3, #2]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	b2d9      	uxtb	r1, r3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6913      	ldr	r3, [r2, #16]
 80021b2:	f361 4394 	bfi	r3, r1, #18, #3
 80021b6:	6113      	str	r3, [r2, #16]

		break;
 80021b8:	e039      	b.n	800222e <ADC_init+0x266>
	case 7:
		ADCx->SMPR2.Bit_Name.SMP7=config->SPT;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	789b      	ldrb	r3, [r3, #2]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	b2d9      	uxtb	r1, r3
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6913      	ldr	r3, [r2, #16]
 80021c8:	f361 5357 	bfi	r3, r1, #21, #3
 80021cc:	6113      	str	r3, [r2, #16]

		break;
 80021ce:	e02e      	b.n	800222e <ADC_init+0x266>
	case 8:
		ADCx->SMPR2.Bit_Name.SMP8=config->SPT;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	789b      	ldrb	r3, [r3, #2]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	b2d9      	uxtb	r1, r3
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6913      	ldr	r3, [r2, #16]
 80021de:	f361 631a 	bfi	r3, r1, #24, #3
 80021e2:	6113      	str	r3, [r2, #16]

		break;
 80021e4:	e023      	b.n	800222e <ADC_init+0x266>
	case 9:
		ADCx->SMPR2.Bit_Name.SMP9=config->SPT;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	789b      	ldrb	r3, [r3, #2]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	b2d9      	uxtb	r1, r3
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6913      	ldr	r3, [r2, #16]
 80021f4:	f361 63dd 	bfi	r3, r1, #27, #3
 80021f8:	6113      	str	r3, [r2, #16]

		break;
 80021fa:	e018      	b.n	800222e <ADC_init+0x266>
	case 14:
		ADCx->SMPR1.Bit_Name.SMP14=config->SPT;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	789b      	ldrb	r3, [r3, #2]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	b2d9      	uxtb	r1, r3
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68d3      	ldr	r3, [r2, #12]
 800220a:	f361 330e 	bfi	r3, r1, #12, #3
 800220e:	60d3      	str	r3, [r2, #12]

		break;
 8002210:	e00d      	b.n	800222e <ADC_init+0x266>
	case 15:
		ADCx->SMPR1.Bit_Name.SMP15=config->SPT;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	789b      	ldrb	r3, [r3, #2]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	b2d9      	uxtb	r1, r3
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68d3      	ldr	r3, [r2, #12]
 8002220:	f361 33d1 	bfi	r3, r1, #15, #3
 8002224:	60d3      	str	r3, [r2, #12]
		break;
 8002226:	e002      	b.n	800222e <ADC_init+0x266>
	default:
		ADC_ERROR_HANDLER();
 8002228:	f7ff fdd4 	bl	8001dd4 <ADC_ERROR_HANDLER>
		break;
 800222c:	bf00      	nop


	}

	switch(config->mode){
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <ADC_init+0x274>
 8002236:	2b01      	cmp	r3, #1
 8002238:	d006      	beq.n	8002248 <ADC_init+0x280>
 800223a:	e013      	b.n	8002264 <ADC_init+0x29c>
	case ADC_Single_conversion:
		/*In Single conversion mode the ADC does one conversion. This mode is started either by
setting the ADON bit in the ADC_CR2 register (for a regular channel only) or by external
trigger (for a regular or injected channel), while the CONT bit is 0.*/
		ADCx->CR2.Bit_Name.CONT=0;
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6893      	ldr	r3, [r2, #8]
 8002240:	f36f 0341 	bfc	r3, #1, #1
 8002244:	6093      	str	r3, [r2, #8]
		break;
 8002246:	e010      	b.n	800226a <ADC_init+0x2a2>
	case ADC_Continuous_conversion:
		/*In continuous conversion mode ADC starts another conversion as soon as it finishes one.
This mode is started either by external trigger or by setting the ADON bit in the ADC_CR2
register, while the CONT bit is 1. */
		ADCx->CR2.Bit_Name.CONT=1;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6893      	ldr	r3, [r2, #8]
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6093      	str	r3, [r2, #8]
		break;
 8002252:	e00a      	b.n	800226a <ADC_init+0x2a2>
 8002254:	40012400 	.word	0x40012400
 8002258:	20004004 	.word	0x20004004
 800225c:	40021000 	.word	0x40021000
 8002260:	431bde83 	.word	0x431bde83

	default:
		ADC_ERROR_HANDLER();
 8002264:	f7ff fdb6 	bl	8001dd4 <ADC_ERROR_HANDLER>
		break;
 8002268:	bf00      	nop
	}

	if(config->AWDG->AWGD_Enable){
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d022      	beq.n	80022c0 <ADC_init+0x2f8>
		ADCx->CR1.Bit_Name.AWDEN=1;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6853      	ldr	r3, [r2, #4]
 800227e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002282:	6053      	str	r3, [r2, #4]
		ADCx->CR1.Bit_Name.AWDCH=config->CHx_num;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	b2d9      	uxtb	r1, r3
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6853      	ldr	r3, [r2, #4]
 8002292:	f361 0304 	bfi	r3, r1, #0, #5
 8002296:	6053      	str	r3, [r2, #4]
		if(config->IE ==ADC_interrupt){
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	78db      	ldrb	r3, [r3, #3]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <ADC_init+0x2e4>
			ADCx->CR1.Bit_Name.AWDIE=1;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6853      	ldr	r3, [r2, #4]
 80022a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a8:	6053      	str	r3, [r2, #4]
 80022aa:	e004      	b.n	80022b6 <ADC_init+0x2ee>
		}else{
			ADCx->CR1.Bit_Name.AWDIE=0;
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6853      	ldr	r3, [r2, #4]
 80022b0:	f36f 1386 	bfc	r3, #6, #1
 80022b4:	6053      	str	r3, [r2, #4]
		}
		ADCx->CR1.Bit_Name.AWDSGL=1;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6853      	ldr	r3, [r2, #4]
 80022ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022be:	6053      	str	r3, [r2, #4]

	if(config->IE){
 // this will done when ADC_interrupt_Enable(); calles
	}

	ADCx->CR2.Bit_Name.EXTSEL=0b111; //111: SWSTART
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6893      	ldr	r3, [r2, #8]
 80022c4:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 80022c8:	6093      	str	r3, [r2, #8]
	ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6893      	ldr	r3, [r2, #8]
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d2:	6093      	str	r3, [r2, #8]

	return ADC_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop

080022e0 <ADC_read>:

void ADC_read(ADCx_REG *ADCx,uint8_t CH_num,uint16_t *data){
 80022e0:	b480      	push	{r7}
 80022e2:	b087      	sub	sp, #28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	460b      	mov	r3, r1
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	72fb      	strb	r3, [r7, #11]
	ADC_CONFIG *ADC_CONFIG_v=NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]

	//GET the back up sitting from the global sitting
	if(ADCx ==ADC1){
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a30      	ldr	r2, [pc, #192]	; (80023b8 <ADC_read+0xd8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d108      	bne.n	800230c <ADC_read+0x2c>
		ADC_CONFIG_v=&G_ADC_config[0][CH_num];
 80022fa:	7afa      	ldrb	r2, [r7, #11]
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4a2d      	ldr	r2, [pc, #180]	; (80023bc <ADC_read+0xdc>)
 8002306:	4413      	add	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e008      	b.n	800231e <ADC_read+0x3e>
	}
	else{
		ADC_CONFIG_v=&G_ADC_config[1][CH_num];
 800230c:	7afa      	ldrb	r2, [r7, #11]
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	33c0      	adds	r3, #192	; 0xc0
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <ADC_read+0xdc>)
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
	}




	ADCx->SQR1.ALL_Bits=0;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
	ADCx->SQR2.ALL_Bits=0;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
	ADCx->SQR3.ALL_Bits=0;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	635a      	str	r2, [r3, #52]	; 0x34

	ADCx->SQR3.Bit_Name.SQ1=ADC_CONFIG_v->CHx_num;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	f003 031f 	and.w	r3, r3, #31
 8002338:	b2d9      	uxtb	r1, r3
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800233e:	f361 0304 	bfi	r3, r1, #0, #5
 8002342:	6353      	str	r3, [r2, #52]	; 0x34



	if(ADC_CONFIG_v->mode==ADC_Single_conversion){
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	785b      	ldrb	r3, [r3, #1]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10c      	bne.n	8002366 <ADC_read+0x86>
		ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	6893      	ldr	r3, [r2, #8]
 8002350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002354:	6093      	str	r3, [r2, #8]
		//		while(ADCx->SR.Bit_Name.STRT==0);
		while(ADCx->SR.Bit_Name.EOC==0);
 8002356:	bf00      	nop
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f8      	beq.n	8002358 <ADC_read+0x78>

	}

	if(ADC_CONFIG_v->IE){
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	78db      	ldrb	r3, [r3, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <ADC_read+0xa0>
		*data=ADCx->DR.Bit_Name.Regular_DATA;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	801a      	strh	r2, [r3, #0]
		data++;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3302      	adds	r3, #2
 800237c:	607b      	str	r3, [r7, #4]
			*data=ADCx->DR.Bit_Name.Regular_DATA;
			data++;
		}
	}

}
 800237e:	e016      	b.n	80023ae <ADC_read+0xce>
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 8002380:	2300      	movs	r3, #0
 8002382:	74fb      	strb	r3, [r7, #19]
 8002384:	e00a      	b.n	800239c <ADC_read+0xbc>
			*data=ADCx->DR.Bit_Name.Regular_DATA;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	b29a      	uxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	801a      	strh	r2, [r3, #0]
			data++;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3302      	adds	r3, #2
 8002394:	607b      	str	r3, [r7, #4]
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	3301      	adds	r3, #1
 800239a:	74fb      	strb	r3, [r7, #19]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	f3c3 5303 	ubfx	r3, r3, #20, #4
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d9eb      	bls.n	8002386 <ADC_read+0xa6>
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	40012400 	.word	0x40012400
 80023bc:	20004004 	.word	0x20004004

080023c0 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	if(ADC1->SR.Bit_Name.EOC ==1){
 80023c4:	4b13      	ldr	r3, [pc, #76]	; (8002414 <ADC1_2_IRQHandler+0x54>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10f      	bne.n	80023f2 <ADC1_2_IRQHandler+0x32>

		G_ADC_config[0][(ADC1->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <ADC1_2_IRQHandler+0x54>)
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	4619      	mov	r1, r3
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <ADC1_2_IRQHandler+0x58>)
 80023e0:	460b      	mov	r3, r1
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	440b      	add	r3, r1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	3308      	adds	r3, #8
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4798      	blx	r3
	}else{
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
	}
}
 80023f0:	e00e      	b.n	8002410 <ADC1_2_IRQHandler+0x50>
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <ADC1_2_IRQHandler+0x5c>)
 80023f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	4619      	mov	r1, r3
 80023fe:	4a06      	ldr	r2, [pc, #24]	; (8002418 <ADC1_2_IRQHandler+0x58>)
 8002400:	460b      	mov	r3, r1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	440b      	add	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	33c8      	adds	r3, #200	; 0xc8
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4798      	blx	r3
}
 8002410:	bf00      	nop
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40012400 	.word	0x40012400
 8002418:	20004004 	.word	0x20004004
 800241c:	40012800 	.word	0x40012800

08002420 <ERROR_HANDLER>:
 */


#include "CAN.h"
CAN_config CAN_SITTING={0};
void ERROR_HANDLER(){
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
	while(1);
 8002424:	e7fe      	b.n	8002424 <ERROR_HANDLER+0x4>
	...

08002428 <MCAL_CAN_SET_GPIO>:
}
void MCAL_CAN_SET_GPIO(){
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
	PIN_config PINx={PIN_12,OUTPUT_AF_PP,SPEED_10}; //CAN_TX
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <MCAL_CAN_SET_GPIO+0x30>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4808      	ldr	r0, [pc, #32]	; (800245c <MCAL_CAN_SET_GPIO+0x34>)
 800243a:	f000 fc8d 	bl	8002d58 <MCAL_GPIO_init>
	PINx=(PIN_config){PIN_11,INPUT_FI,0}; //CAN_RX
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MCAL_CAN_SET_GPIO+0x38>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	4619      	mov	r1, r3
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <MCAL_CAN_SET_GPIO+0x34>)
 800244a:	f000 fc85 	bl	8002d58 <MCAL_GPIO_init>

}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	08005520 	.word	0x08005520
 800245c:	40010800 	.word	0x40010800
 8002460:	08005524 	.word	0x08005524

08002464 <MCAL_CAN_init>:
CAN_retrun MCAL_CAN_init(CAN_config *CANx){
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
	CAN_SITTING =(*CANx);
 800246c:	4b84      	ldr	r3, [pc, #528]	; (8002680 <MCAL_CAN_init+0x21c>)
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	ca07      	ldmia	r2, {r0, r1, r2}
 8002472:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Make the Can State ITIALIZATION
	RCC->APB1ENR|=(1<<25);
 8002476:	4b83      	ldr	r3, [pc, #524]	; (8002684 <MCAL_CAN_init+0x220>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a82      	ldr	r2, [pc, #520]	; (8002684 <MCAL_CAN_init+0x220>)
 800247c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002480:	61d3      	str	r3, [r2, #28]
	MCAL_CAN_SET_GPIO();
 8002482:	f7ff ffd1 	bl	8002428 <MCAL_CAN_SET_GPIO>
	if((CAN1->MSR.Bit_Name.INAK ==0) &&(CAN1->MSR.Bit_Name.SLAK ==1) ){
 8002486:	4b80      	ldr	r3, [pc, #512]	; (8002688 <MCAL_CAN_init+0x224>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d11f      	bne.n	80024d4 <MCAL_CAN_init+0x70>
 8002494:	4b7c      	ldr	r3, [pc, #496]	; (8002688 <MCAL_CAN_init+0x224>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d118      	bne.n	80024d4 <MCAL_CAN_init+0x70>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 80024a2:	4a79      	ldr	r2, [pc, #484]	; (8002688 <MCAL_CAN_init+0x224>)
 80024a4:	6813      	ldr	r3, [r2, #0]
 80024a6:	f36f 0341 	bfc	r3, #1, #1
 80024aa:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=1;
 80024ac:	4a76      	ldr	r2, [pc, #472]	; (8002688 <MCAL_CAN_init+0x224>)
 80024ae:	6813      	ldr	r3, [r2, #0]
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	6013      	str	r3, [r2, #0]
		while(!((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0)));
 80024b6:	bf00      	nop
 80024b8:	4b73      	ldr	r3, [pc, #460]	; (8002688 <MCAL_CAN_init+0x224>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d1f8      	bne.n	80024b8 <MCAL_CAN_init+0x54>
 80024c6:	4b70      	ldr	r3, [pc, #448]	; (8002688 <MCAL_CAN_init+0x224>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f1      	bne.n	80024b8 <MCAL_CAN_init+0x54>
	}
	//Automatic bus-off management
	if(CANx->ABO){
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <MCAL_CAN_init+0x84>
		CAN1->MCR.Bit_Name.ABOM=1;
 80024dc:	4a6a      	ldr	r2, [pc, #424]	; (8002688 <MCAL_CAN_init+0x224>)
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e004      	b.n	80024f2 <MCAL_CAN_init+0x8e>
	}else{
		CAN1->MCR.Bit_Name.ABOM=0;
 80024e8:	4a67      	ldr	r2, [pc, #412]	; (8002688 <MCAL_CAN_init+0x224>)
 80024ea:	6813      	ldr	r3, [r2, #0]
 80024ec:	f36f 1386 	bfc	r3, #6, #1
 80024f0:	6013      	str	r3, [r2, #0]
	}
	//No automatic retransmission
	if(CANx->NAT){
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <MCAL_CAN_init+0xa2>
		CAN1->MCR.Bit_Name.NART=1;
 80024fa:	4a63      	ldr	r2, [pc, #396]	; (8002688 <MCAL_CAN_init+0x224>)
 80024fc:	6813      	ldr	r3, [r2, #0]
 80024fe:	f043 0310 	orr.w	r3, r3, #16
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	e004      	b.n	8002510 <MCAL_CAN_init+0xac>
	}else{
		CAN1->MCR.Bit_Name.NART=0;
 8002506:	4a60      	ldr	r2, [pc, #384]	; (8002688 <MCAL_CAN_init+0x224>)
 8002508:	6813      	ldr	r3, [r2, #0]
 800250a:	f36f 1304 	bfc	r3, #4, #1
 800250e:	6013      	str	r3, [r2, #0]
	}

	//Transmit FIFO priority by the identifier of the message
	CAN1->MCR.Bit_Name.TXFP=0;
 8002510:	4a5d      	ldr	r2, [pc, #372]	; (8002688 <MCAL_CAN_init+0x224>)
 8002512:	6813      	ldr	r3, [r2, #0]
 8002514:	f36f 0382 	bfc	r3, #2, #1
 8002518:	6013      	str	r3, [r2, #0]
	//Receive FIFO locked mode Receive FIFO locked against overrun. Once a receive FIFO
	//is full the next incoming message will be discarded.
	if(CANx->RFL){
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	789b      	ldrb	r3, [r3, #2]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <MCAL_CAN_init+0xca>
		CAN1->MCR.Bit_Name.RFLM=1;
 8002522:	4a59      	ldr	r2, [pc, #356]	; (8002688 <MCAL_CAN_init+0x224>)
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	f043 0308 	orr.w	r3, r3, #8
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e004      	b.n	8002538 <MCAL_CAN_init+0xd4>
	}else{
		CAN1->MCR.Bit_Name.RFLM=0;
 800252e:	4a56      	ldr	r2, [pc, #344]	; (8002688 <MCAL_CAN_init+0x224>)
 8002530:	6813      	ldr	r3, [r2, #0]
 8002532:	f36f 03c3 	bfc	r3, #3, #1
 8002536:	6013      	str	r3, [r2, #0]

	}

	//from http://www.bittiming.can-wiki.info/ we can get the CAN1->BTR
	switch(MCAL_GET_PCLCK1()){
 8002538:	f001 f9fe 	bl	8003938 <MCAL_GET_PCLCK1>
 800253c:	4603      	mov	r3, r0
 800253e:	4a53      	ldr	r2, [pc, #332]	; (800268c <MCAL_CAN_init+0x228>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <MCAL_CAN_init+0xe8>
 8002544:	4a52      	ldr	r2, [pc, #328]	; (8002690 <MCAL_CAN_init+0x22c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d023      	beq.n	8002592 <MCAL_CAN_init+0x12e>

			}

			break;
			default:
				break;
 800254a:	e045      	b.n	80025d8 <MCAL_CAN_init+0x174>
		switch(CANx->SPEED){
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	78db      	ldrb	r3, [r3, #3]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d83e      	bhi.n	80025d2 <MCAL_CAN_init+0x16e>
 8002554:	a201      	add	r2, pc, #4	; (adr r2, 800255c <MCAL_CAN_init+0xf8>)
 8002556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255a:	bf00      	nop
 800255c:	0800256d 	.word	0x0800256d
 8002560:	08002577 	.word	0x08002577
 8002564:	08002581 	.word	0x08002581
 8002568:	08002589 	.word	0x08002589
			CAN1->BTR.ALL_Bits=0x00050000;
 800256c:	4b46      	ldr	r3, [pc, #280]	; (8002688 <MCAL_CAN_init+0x224>)
 800256e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002572:	61da      	str	r2, [r3, #28]
			break;
 8002574:	e00c      	b.n	8002590 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0000;
 8002576:	4b44      	ldr	r3, [pc, #272]	; (8002688 <MCAL_CAN_init+0x224>)
 8002578:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 800257c:	61da      	str	r2, [r3, #28]
			break;
 800257e:	e007      	b.n	8002590 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0001;
 8002580:	4b41      	ldr	r3, [pc, #260]	; (8002688 <MCAL_CAN_init+0x224>)
 8002582:	4a44      	ldr	r2, [pc, #272]	; (8002694 <MCAL_CAN_init+0x230>)
 8002584:	61da      	str	r2, [r3, #28]
			break;
 8002586:	e003      	b.n	8002590 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0004;
 8002588:	4b3f      	ldr	r3, [pc, #252]	; (8002688 <MCAL_CAN_init+0x224>)
 800258a:	4a43      	ldr	r2, [pc, #268]	; (8002698 <MCAL_CAN_init+0x234>)
 800258c:	61da      	str	r2, [r3, #28]
			break;
 800258e:	bf00      	nop
		break;
 8002590:	e01f      	b.n	80025d2 <MCAL_CAN_init+0x16e>
			switch(CANx->SPEED){
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	78db      	ldrb	r3, [r3, #3]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d81d      	bhi.n	80025d6 <MCAL_CAN_init+0x172>
 800259a:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <MCAL_CAN_init+0x13c>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025b1 	.word	0x080025b1
 80025a4:	080025b9 	.word	0x080025b9
 80025a8:	080025c1 	.word	0x080025c1
 80025ac:	080025c9 	.word	0x080025c9
				CAN1->BTR.ALL_Bits=0x00090001;
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <MCAL_CAN_init+0x224>)
 80025b2:	4a3a      	ldr	r2, [pc, #232]	; (800269c <MCAL_CAN_init+0x238>)
 80025b4:	61da      	str	r2, [r3, #28]
				break;
 80025b6:	e00b      	b.n	80025d0 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0002;
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <MCAL_CAN_init+0x224>)
 80025ba:	4a39      	ldr	r2, [pc, #228]	; (80026a0 <MCAL_CAN_init+0x23c>)
 80025bc:	61da      	str	r2, [r3, #28]
				break;
 80025be:	e007      	b.n	80025d0 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0005;
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <MCAL_CAN_init+0x224>)
 80025c2:	4a38      	ldr	r2, [pc, #224]	; (80026a4 <MCAL_CAN_init+0x240>)
 80025c4:	61da      	str	r2, [r3, #28]
				break;
 80025c6:	e003      	b.n	80025d0 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c000e;
 80025c8:	4b2f      	ldr	r3, [pc, #188]	; (8002688 <MCAL_CAN_init+0x224>)
 80025ca:	4a37      	ldr	r2, [pc, #220]	; (80026a8 <MCAL_CAN_init+0x244>)
 80025cc:	61da      	str	r2, [r3, #28]
				break;
 80025ce:	bf00      	nop
			break;
 80025d0:	e001      	b.n	80025d6 <MCAL_CAN_init+0x172>
		break;
 80025d2:	bf00      	nop
 80025d4:	e000      	b.n	80025d8 <MCAL_CAN_init+0x174>
			break;
 80025d6:	bf00      	nop

	}

	switch(CANx->MODE){
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	791b      	ldrb	r3, [r3, #4]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d837      	bhi.n	8002650 <MCAL_CAN_init+0x1ec>
 80025e0:	a201      	add	r2, pc, #4	; (adr r2, 80025e8 <MCAL_CAN_init+0x184>)
 80025e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e6:	bf00      	nop
 80025e8:	080025f9 	.word	0x080025f9
 80025ec:	0800260f 	.word	0x0800260f
 80025f0:	08002625 	.word	0x08002625
 80025f4:	0800263b 	.word	0x0800263b
	case CAN_NORMAL:
		CAN1->BTR.Bit_Name.SILM=0;
 80025f8:	4a23      	ldr	r2, [pc, #140]	; (8002688 <MCAL_CAN_init+0x224>)
 80025fa:	69d3      	ldr	r3, [r2, #28]
 80025fc:	f36f 73df 	bfc	r3, #31, #1
 8002600:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8002602:	4a21      	ldr	r2, [pc, #132]	; (8002688 <MCAL_CAN_init+0x224>)
 8002604:	69d3      	ldr	r3, [r2, #28]
 8002606:	f36f 739e 	bfc	r3, #30, #1
 800260a:	61d3      	str	r3, [r2, #28]

		break;
 800260c:	e023      	b.n	8002656 <MCAL_CAN_init+0x1f2>
	case CAN_Silent:
		CAN1->BTR.Bit_Name.SILM=1;
 800260e:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <MCAL_CAN_init+0x224>)
 8002610:	69d3      	ldr	r3, [r2, #28]
 8002612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002616:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8002618:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <MCAL_CAN_init+0x224>)
 800261a:	69d3      	ldr	r3, [r2, #28]
 800261c:	f36f 739e 	bfc	r3, #30, #1
 8002620:	61d3      	str	r3, [r2, #28]
		break;
 8002622:	e018      	b.n	8002656 <MCAL_CAN_init+0x1f2>
	case CAN_Loop_back:
		CAN1->BTR.Bit_Name.SILM=0;
 8002624:	4a18      	ldr	r2, [pc, #96]	; (8002688 <MCAL_CAN_init+0x224>)
 8002626:	69d3      	ldr	r3, [r2, #28]
 8002628:	f36f 73df 	bfc	r3, #31, #1
 800262c:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 800262e:	4a16      	ldr	r2, [pc, #88]	; (8002688 <MCAL_CAN_init+0x224>)
 8002630:	69d3      	ldr	r3, [r2, #28]
 8002632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002636:	61d3      	str	r3, [r2, #28]
		break;
 8002638:	e00d      	b.n	8002656 <MCAL_CAN_init+0x1f2>
	case CAN_Silent_Loop_back:
		CAN1->BTR.Bit_Name.SILM=1;
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <MCAL_CAN_init+0x224>)
 800263c:	69d3      	ldr	r3, [r2, #28]
 800263e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002642:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 8002644:	4a10      	ldr	r2, [pc, #64]	; (8002688 <MCAL_CAN_init+0x224>)
 8002646:	69d3      	ldr	r3, [r2, #28]
 8002648:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800264c:	61d3      	str	r3, [r2, #28]
		break;
 800264e:	e002      	b.n	8002656 <MCAL_CAN_init+0x1f2>
	default:
		ERROR_HANDLER();
 8002650:	f7ff fee6 	bl	8002420 <ERROR_HANDLER>
		break;
 8002654:	bf00      	nop

	}

	if(CANx->IE){
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	795b      	ldrb	r3, [r3, #5]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d028      	beq.n	80026b0 <MCAL_CAN_init+0x24c>
		CAN1->IER.Bit_Name.FMPIE0=1;
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <MCAL_CAN_init+0x224>)
 8002660:	6953      	ldr	r3, [r2, #20]
 8002662:	f043 0302 	orr.w	r3, r3, #2
 8002666:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=1;
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <MCAL_CAN_init+0x224>)
 800266a:	6953      	ldr	r3, [r2, #20]
 800266c:	f043 0310 	orr.w	r3, r3, #16
 8002670:	6153      	str	r3, [r2, #20]
		NVIC_ISER0|=(1<<20) |(1<<21);
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <MCAL_CAN_init+0x248>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a0d      	ldr	r2, [pc, #52]	; (80026ac <MCAL_CAN_init+0x248>)
 8002678:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e027      	b.n	80026d0 <MCAL_CAN_init+0x26c>
 8002680:	20004184 	.word	0x20004184
 8002684:	40021000 	.word	0x40021000
 8002688:	40006400 	.word	0x40006400
 800268c:	007a1200 	.word	0x007a1200
 8002690:	016e3600 	.word	0x016e3600
 8002694:	001c0001 	.word	0x001c0001
 8002698:	001c0004 	.word	0x001c0004
 800269c:	00090001 	.word	0x00090001
 80026a0:	001c0002 	.word	0x001c0002
 80026a4:	001c0005 	.word	0x001c0005
 80026a8:	001c000e 	.word	0x001c000e
 80026ac:	e000e100 	.word	0xe000e100
	}else{
		CAN1->IER.Bit_Name.FMPIE0=0;
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <MCAL_CAN_init+0x2d8>)
 80026b2:	6953      	ldr	r3, [r2, #20]
 80026b4:	f36f 0341 	bfc	r3, #1, #1
 80026b8:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=0;
 80026ba:	4a20      	ldr	r2, [pc, #128]	; (800273c <MCAL_CAN_init+0x2d8>)
 80026bc:	6953      	ldr	r3, [r2, #20]
 80026be:	f36f 1304 	bfc	r3, #4, #1
 80026c2:	6153      	str	r3, [r2, #20]
		NVIC_ICER0|=(1<<20) |(1<<21);
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <MCAL_CAN_init+0x2dc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1d      	ldr	r2, [pc, #116]	; (8002740 <MCAL_CAN_init+0x2dc>)
 80026ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80026ce:	6013      	str	r3, [r2, #0]
	}

	CAN1->IER.Bit_Name.BOFIE=1;
 80026d0:	4a1a      	ldr	r2, [pc, #104]	; (800273c <MCAL_CAN_init+0x2d8>)
 80026d2:	6953      	ldr	r3, [r2, #20]
 80026d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d8:	6153      	str	r3, [r2, #20]
	CAN1->IER.Bit_Name.ERRIE=1;
 80026da:	4a18      	ldr	r2, [pc, #96]	; (800273c <MCAL_CAN_init+0x2d8>)
 80026dc:	6953      	ldr	r3, [r2, #20]
 80026de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e2:	6153      	str	r3, [r2, #20]
	NVIC_ISER0|=(1<<22);
 80026e4:	4b17      	ldr	r3, [pc, #92]	; (8002744 <MCAL_CAN_init+0x2e0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a16      	ldr	r2, [pc, #88]	; (8002744 <MCAL_CAN_init+0x2e0>)
 80026ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026ee:	6013      	str	r3, [r2, #0]
	//Make the Can State Normal
	if((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0) ){
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <MCAL_CAN_init+0x2d8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d118      	bne.n	8002730 <MCAL_CAN_init+0x2cc>
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <MCAL_CAN_init+0x2d8>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d111      	bne.n	8002730 <MCAL_CAN_init+0x2cc>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 800270c:	4a0b      	ldr	r2, [pc, #44]	; (800273c <MCAL_CAN_init+0x2d8>)
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	f36f 0341 	bfc	r3, #1, #1
 8002714:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=0;
 8002716:	4a09      	ldr	r2, [pc, #36]	; (800273c <MCAL_CAN_init+0x2d8>)
 8002718:	6813      	ldr	r3, [r2, #0]
 800271a:	f36f 0300 	bfc	r3, #0, #1
 800271e:	6013      	str	r3, [r2, #0]
		while(CAN1->MSR.Bit_Name.INAK ==1);
 8002720:	bf00      	nop
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <MCAL_CAN_init+0x2d8>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d0f8      	beq.n	8002722 <MCAL_CAN_init+0x2be>
	}


	return CAN_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40006400 	.word	0x40006400
 8002740:	e000e180 	.word	0xe000e180
 8002744:	e000e100 	.word	0xe000e100

08002748 <MCAL_CAN_RESET>:

	return CAN_OK;

}

void MCAL_CAN_RESET(){
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
	RCC->APB1RSTR|=(1<<25);
 800274c:	4b07      	ldr	r3, [pc, #28]	; (800276c <MCAL_CAN_RESET+0x24>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <MCAL_CAN_RESET+0x24>)
 8002752:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002756:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR&=~(1<<25);
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <MCAL_CAN_RESET+0x24>)
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	4a03      	ldr	r2, [pc, #12]	; (800276c <MCAL_CAN_RESET+0x24>)
 800275e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002762:	6113      	str	r3, [r2, #16]

}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	40021000 	.word	0x40021000

08002770 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(){
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 8002774:	4b02      	ldr	r3, [pc, #8]	; (8002780 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4798      	blx	r3
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20004184 	.word	0x20004184

08002784 <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(){
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 8002788:	4b02      	ldr	r3, [pc, #8]	; (8002794 <CAN_RX1_IRQHandler+0x10>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4798      	blx	r3
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20004184 	.word	0x20004184

08002798 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(){
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	MCAL_CAN_RESET();
 800279c:	f7ff ffd4 	bl	8002748 <MCAL_CAN_RESET>
	MCAL_CAN_init(&CAN_SITTING);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <CAN_SCE_IRQHandler+0x14>)
 80027a2:	f7ff fe5f 	bl	8002464 <MCAL_CAN_init>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20004184 	.word	0x20004184

080027b0 <NVIC_ENABLE>:
 */

#include "EXTI_Driver.h"

void (*g_P_CALLBACK_f[15])();
void NVIC_ENABLE(usint8_t irq){
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2b0f      	cmp	r3, #15
 80027be:	d854      	bhi.n	800286a <NVIC_ENABLE+0xba>
 80027c0:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <NVIC_ENABLE+0x18>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002817 	.word	0x08002817
 80027d0:	08002825 	.word	0x08002825
 80027d4:	08002833 	.word	0x08002833
 80027d8:	08002841 	.word	0x08002841
 80027dc:	0800284f 	.word	0x0800284f
 80027e0:	0800284f 	.word	0x0800284f
 80027e4:	0800284f 	.word	0x0800284f
 80027e8:	0800284f 	.word	0x0800284f
 80027ec:	0800284f 	.word	0x0800284f
 80027f0:	0800285d 	.word	0x0800285d
 80027f4:	0800285d 	.word	0x0800285d
 80027f8:	0800285d 	.word	0x0800285d
 80027fc:	0800285d 	.word	0x0800285d
 8002800:	0800285d 	.word	0x0800285d
 8002804:	0800285d 	.word	0x0800285d
	case 0:
		NVIC_EXTI0_EN;
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <NVIC_ENABLE+0xc4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <NVIC_ENABLE+0xc4>)
 800280e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002812:	6013      	str	r3, [r2, #0]
		break;
 8002814:	e029      	b.n	800286a <NVIC_ENABLE+0xba>
	case 1:
		NVIC_EXTI1_EN;
 8002816:	4b17      	ldr	r3, [pc, #92]	; (8002874 <NVIC_ENABLE+0xc4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a16      	ldr	r2, [pc, #88]	; (8002874 <NVIC_ENABLE+0xc4>)
 800281c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002820:	6013      	str	r3, [r2, #0]
		break;
 8002822:	e022      	b.n	800286a <NVIC_ENABLE+0xba>
	case 2:
		NVIC_EXTI2_EN;
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <NVIC_ENABLE+0xc4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a12      	ldr	r2, [pc, #72]	; (8002874 <NVIC_ENABLE+0xc4>)
 800282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282e:	6013      	str	r3, [r2, #0]
		break;
 8002830:	e01b      	b.n	800286a <NVIC_ENABLE+0xba>
	case 3:
		NVIC_EXTI3_EN;
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <NVIC_ENABLE+0xc4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <NVIC_ENABLE+0xc4>)
 8002838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800283c:	6013      	str	r3, [r2, #0]
		break;
 800283e:	e014      	b.n	800286a <NVIC_ENABLE+0xba>
	case 4:
		NVIC_EXTI4_EN;
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <NVIC_ENABLE+0xc4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <NVIC_ENABLE+0xc4>)
 8002846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800284a:	6013      	str	r3, [r2, #0]
		break;
 800284c:	e00d      	b.n	800286a <NVIC_ENABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_EN;
 800284e:	4b09      	ldr	r3, [pc, #36]	; (8002874 <NVIC_ENABLE+0xc4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a08      	ldr	r2, [pc, #32]	; (8002874 <NVIC_ENABLE+0xc4>)
 8002854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002858:	6013      	str	r3, [r2, #0]
		break;
 800285a:	e006      	b.n	800286a <NVIC_ENABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_EN;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <NVIC_ENABLE+0xc8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a05      	ldr	r2, [pc, #20]	; (8002878 <NVIC_ENABLE+0xc8>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]
break;
 8002868:	bf00      	nop

	}
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000e104 	.word	0xe000e104

0800287c <NVIC_DISABLE>:
void NVIC_DISABLE(usint8_t irq){
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b0f      	cmp	r3, #15
 800288a:	d854      	bhi.n	8002936 <NVIC_DISABLE+0xba>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <NVIC_DISABLE+0x18>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028d5 	.word	0x080028d5
 8002898:	080028e3 	.word	0x080028e3
 800289c:	080028f1 	.word	0x080028f1
 80028a0:	080028ff 	.word	0x080028ff
 80028a4:	0800290d 	.word	0x0800290d
 80028a8:	0800291b 	.word	0x0800291b
 80028ac:	0800291b 	.word	0x0800291b
 80028b0:	0800291b 	.word	0x0800291b
 80028b4:	0800291b 	.word	0x0800291b
 80028b8:	0800291b 	.word	0x0800291b
 80028bc:	08002929 	.word	0x08002929
 80028c0:	08002929 	.word	0x08002929
 80028c4:	08002929 	.word	0x08002929
 80028c8:	08002929 	.word	0x08002929
 80028cc:	08002929 	.word	0x08002929
 80028d0:	08002929 	.word	0x08002929
	case 0:
		NVIC_EXTI0_D;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <NVIC_DISABLE+0xc4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <NVIC_DISABLE+0xc4>)
 80028da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028de:	6013      	str	r3, [r2, #0]
		break;
 80028e0:	e029      	b.n	8002936 <NVIC_DISABLE+0xba>
	case 1:
		NVIC_EXTI1_D;
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <NVIC_DISABLE+0xc4>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a16      	ldr	r2, [pc, #88]	; (8002940 <NVIC_DISABLE+0xc4>)
 80028e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ec:	6013      	str	r3, [r2, #0]
		break;
 80028ee:	e022      	b.n	8002936 <NVIC_DISABLE+0xba>
	case 2:
		NVIC_EXTI2_D;
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <NVIC_DISABLE+0xc4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a12      	ldr	r2, [pc, #72]	; (8002940 <NVIC_DISABLE+0xc4>)
 80028f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]
		break;
 80028fc:	e01b      	b.n	8002936 <NVIC_DISABLE+0xba>
	case 3:
		NVIC_EXTI3_D;
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <NVIC_DISABLE+0xc4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <NVIC_DISABLE+0xc4>)
 8002904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002908:	6013      	str	r3, [r2, #0]
		break;
 800290a:	e014      	b.n	8002936 <NVIC_DISABLE+0xba>
	case 4:
		NVIC_EXTI4_D;
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <NVIC_DISABLE+0xc4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <NVIC_DISABLE+0xc4>)
 8002912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002916:	6013      	str	r3, [r2, #0]
		break;
 8002918:	e00d      	b.n	8002936 <NVIC_DISABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_D;
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <NVIC_DISABLE+0xc4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a08      	ldr	r2, [pc, #32]	; (8002940 <NVIC_DISABLE+0xc4>)
 8002920:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002924:	6013      	str	r3, [r2, #0]
		break;
 8002926:	e006      	b.n	8002936 <NVIC_DISABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_D;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <NVIC_DISABLE+0xc8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a05      	ldr	r2, [pc, #20]	; (8002944 <NVIC_DISABLE+0xc8>)
 800292e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002932:	6013      	str	r3, [r2, #0]
break;
 8002934:	bf00      	nop

	}
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	e000e100 	.word	0xe000e100
 8002944:	e000e104 	.word	0xe000e104

08002948 <MCAL_EXTI_init>:
	void MCAL_EXTI_init(EXTI_config_t *EXTI){
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
		RCC->APB2ENR |=(1<<0);
 8002950:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <MCAL_EXTI_init+0x1a0>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a64      	ldr	r2, [pc, #400]	; (8002ae8 <MCAL_EXTI_init+0x1a0>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6193      	str	r3, [r2, #24]
		usint8_t AFIO_EXTICR = (EXTI->EXTI_PIN.EXI_LINE /4);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	089b      	lsrs	r3, r3, #2
 8002962:	b29b      	uxth	r3, r3
 8002964:	73fb      	strb	r3, [r7, #15]
		usint8_t EXTI_position = (EXTI->EXTI_PIN.EXI_LINE %4)*4;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	73bb      	strb	r3, [r7, #14]

		// MAKE THE PIN INPUT FLOATING
		PIN_config pin={EXTI->EXTI_PIN.PIN,INPUT_FI};
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	891b      	ldrh	r3, [r3, #8]
 800297e:	813b      	strh	r3, [r7, #8]
 8002980:	2301      	movs	r3, #1
 8002982:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_init(EXTI->EXTI_PIN.GIPO, &pin);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f107 0208 	add.w	r2, r7, #8
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f9e2 	bl	8002d58 <MCAL_GPIO_init>

		//MAKE THE SIGNAL RISING OR FALLING OR BOTH
		if(EXTI->EXT_TRIGGER ==FALLING){
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7b1b      	ldrb	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <MCAL_EXTI_init+0x6c>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	8812      	ldrh	r2, [r2, #0]
 80029a4:	4611      	mov	r1, r2
 80029a6:	2201      	movs	r2, #1
 80029a8:	408a      	lsls	r2, r1
 80029aa:	4611      	mov	r1, r2
 80029ac:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 80029ae:	430b      	orrs	r3, r1
 80029b0:	60d3      	str	r3, [r2, #12]
 80029b2:	e029      	b.n	8002a08 <MCAL_EXTI_init+0xc0>
		}else if(EXTI->EXT_TRIGGER ==RISEING){
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7b1b      	ldrb	r3, [r3, #12]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10b      	bne.n	80029d4 <MCAL_EXTI_init+0x8c>
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80029bc:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	8812      	ldrh	r2, [r2, #0]
 80029c4:	4611      	mov	r1, r2
 80029c6:	2201      	movs	r2, #1
 80029c8:	408a      	lsls	r2, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	4a47      	ldr	r2, [pc, #284]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 80029ce:	430b      	orrs	r3, r1
 80029d0:	6093      	str	r3, [r2, #8]
 80029d2:	e019      	b.n	8002a08 <MCAL_EXTI_init+0xc0>

		}else if(EXTI->EXT_TRIGGER ==FALLING_RISEING){
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d115      	bne.n	8002a08 <MCAL_EXTI_init+0xc0>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80029dc:	4b43      	ldr	r3, [pc, #268]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	8812      	ldrh	r2, [r2, #0]
 80029e4:	4611      	mov	r1, r2
 80029e6:	2201      	movs	r2, #1
 80029e8:	408a      	lsls	r2, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	4a3f      	ldr	r2, [pc, #252]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 80029ee:	430b      	orrs	r3, r1
 80029f0:	60d3      	str	r3, [r2, #12]
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80029f2:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	8812      	ldrh	r2, [r2, #0]
 80029fa:	4611      	mov	r1, r2
 80029fc:	2201      	movs	r2, #1
 80029fe:	408a      	lsls	r2, r1
 8002a00:	4611      	mov	r1, r2
 8002a02:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 8002a04:	430b      	orrs	r3, r1
 8002a06:	6093      	str	r3, [r2, #8]


		}
		//UPDATE THE ALTERNATIVE FUNC
			AFIO->EXTICR[AFIO_EXTICR] &=~(0xF <<EXTI_position);
 8002a08:	4a39      	ldr	r2, [pc, #228]	; (8002af0 <MCAL_EXTI_init+0x1a8>)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	3302      	adds	r3, #2
 8002a0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a12:	7bbb      	ldrb	r3, [r7, #14]
 8002a14:	210f      	movs	r1, #15
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4934      	ldr	r1, [pc, #208]	; (8002af0 <MCAL_EXTI_init+0x1a8>)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	4002      	ands	r2, r0
 8002a24:	3302      	adds	r3, #2
 8002a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			AFIO->EXTICR[AFIO_EXTICR] |=(PORT_Detector(EXTI->EXTI_PIN.GIPO)<<EXTI_position);
 8002a2a:	4a31      	ldr	r2, [pc, #196]	; (8002af0 <MCAL_EXTI_init+0x1a8>)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	3302      	adds	r3, #2
 8002a30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	492e      	ldr	r1, [pc, #184]	; (8002af4 <MCAL_EXTI_init+0x1ac>)
 8002a3a:	428b      	cmp	r3, r1
 8002a3c:	d016      	beq.n	8002a6c <MCAL_EXTI_init+0x124>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	492d      	ldr	r1, [pc, #180]	; (8002af8 <MCAL_EXTI_init+0x1b0>)
 8002a44:	428b      	cmp	r3, r1
 8002a46:	d00f      	beq.n	8002a68 <MCAL_EXTI_init+0x120>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	492b      	ldr	r1, [pc, #172]	; (8002afc <MCAL_EXTI_init+0x1b4>)
 8002a4e:	428b      	cmp	r3, r1
 8002a50:	d008      	beq.n	8002a64 <MCAL_EXTI_init+0x11c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	492a      	ldr	r1, [pc, #168]	; (8002b00 <MCAL_EXTI_init+0x1b8>)
 8002a58:	428b      	cmp	r3, r1
 8002a5a:	d101      	bne.n	8002a60 <MCAL_EXTI_init+0x118>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e006      	b.n	8002a6e <MCAL_EXTI_init+0x126>
 8002a60:	2300      	movs	r3, #0
 8002a62:	e004      	b.n	8002a6e <MCAL_EXTI_init+0x126>
 8002a64:	2303      	movs	r3, #3
 8002a66:	e002      	b.n	8002a6e <MCAL_EXTI_init+0x126>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <MCAL_EXTI_init+0x126>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	7bb9      	ldrb	r1, [r7, #14]
 8002a70:	408b      	lsls	r3, r1
 8002a72:	4618      	mov	r0, r3
 8002a74:	491e      	ldr	r1, [pc, #120]	; (8002af0 <MCAL_EXTI_init+0x1a8>)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	4302      	orrs	r2, r0
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Update Call Back Func
		g_P_CALLBACK_f[EXTI->EXTI_PIN.EXI_LINE]=EXTI->P_CallBack;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <MCAL_EXTI_init+0x1bc>)
 8002a8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//ENABLE THE Interrupt MASK AND NVIC
		if(EXTI->EXT_EN ==ENABLE){
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7b5b      	ldrb	r3, [r3, #13]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d111      	bne.n	8002abc <MCAL_EXTI_init+0x174>
		EXTI_REG->IMR|=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	8812      	ldrh	r2, [r2, #0]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	408a      	lsls	r2, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4a10      	ldr	r2, [pc, #64]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	6013      	str	r3, [r2, #0]
		NVIC_ENABLE(EXTI->EXTI_PIN.EXI_LINE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fe7b 	bl	80027b0 <NVIC_ENABLE>
		else{
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
 8002aba:	e011      	b.n	8002ae0 <MCAL_EXTI_init+0x198>
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	408a      	lsls	r2, r1
 8002aca:	43d2      	mvns	r2, r2
 8002acc:	4611      	mov	r1, r2
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <MCAL_EXTI_init+0x1a4>)
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	6013      	str	r3, [r2, #0]
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fece 	bl	800287c <NVIC_DISABLE>
	}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40010400 	.word	0x40010400
 8002af0:	40010000 	.word	0x40010000
 8002af4:	40010800 	.word	0x40010800
 8002af8:	40010c00 	.word	0x40010c00
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40011400 	.word	0x40011400
 8002b04:	20004190 	.word	0x20004190

08002b08 <EXTI0_IRQHandler>:
	void EXTI0_IRQHandler(){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <EXTI0_IRQHandler+0x1c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <EXTI0_IRQHandler+0x20>)
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <EXTI0_IRQHandler+0x20>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6153      	str	r3, [r2, #20]
	}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20004190 	.word	0x20004190
 8002b28:	40010400 	.word	0x40010400

08002b2c <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <EXTI1_IRQHandler+0x1c>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <EXTI1_IRQHandler+0x20>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <EXTI1_IRQHandler+0x20>)
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	6153      	str	r3, [r2, #20]

	}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20004190 	.word	0x20004190
 8002b4c:	40010400 	.word	0x40010400

08002b50 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <EXTI2_IRQHandler+0x1c>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <EXTI2_IRQHandler+0x20>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4a04      	ldr	r2, [pc, #16]	; (8002b70 <EXTI2_IRQHandler+0x20>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6153      	str	r3, [r2, #20]

	}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20004190 	.word	0x20004190
 8002b70:	40010400 	.word	0x40010400

08002b74 <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <EXTI3_IRQHandler+0x1c>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <EXTI3_IRQHandler+0x20>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <EXTI3_IRQHandler+0x20>)
 8002b84:	f043 0308 	orr.w	r3, r3, #8
 8002b88:	6153      	str	r3, [r2, #20]

	}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20004190 	.word	0x20004190
 8002b94:	40010400 	.word	0x40010400

08002b98 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <EXTI4_IRQHandler+0x1c>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 8002ba2:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <EXTI4_IRQHandler+0x20>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <EXTI4_IRQHandler+0x20>)
 8002ba8:	f043 0310 	orr.w	r3, r3, #16
 8002bac:	6153      	str	r3, [r2, #20]

	}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20004190 	.word	0x20004190
 8002bb8:	40010400 	.word	0x40010400

08002bbc <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8002bc0:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <EXTI9_5_IRQHandler+0x22>
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002bd2:	f043 0320 	orr.w	r3, r3, #32
 8002bd6:	6153      	str	r3, [r2, #20]
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <EXTI9_5_IRQHandler+0xa4>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8002bde:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <EXTI9_5_IRQHandler+0x40>
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf4:	6153      	str	r3, [r2, #20]
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <EXTI9_5_IRQHandler+0xa4>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8002bfc:	4b17      	ldr	r3, [pc, #92]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <EXTI9_5_IRQHandler+0x5e>
 8002c08:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c12:	6153      	str	r3, [r2, #20]
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <EXTI9_5_IRQHandler+0xa4>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <EXTI9_5_IRQHandler+0x7c>
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c30:	6153      	str	r3, [r2, #20]
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <EXTI9_5_IRQHandler+0xa4>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <EXTI9_5_IRQHandler+0x9a>
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <EXTI9_5_IRQHandler+0xa0>)
 8002c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c4e:	6153      	str	r3, [r2, #20]
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <EXTI9_5_IRQHandler+0xa4>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	4798      	blx	r3
	}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40010400 	.word	0x40010400
 8002c60:	20004190 	.word	0x20004190

08002c64 <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 8002c68:	4b2d      	ldr	r3, [pc, #180]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <EXTI15_10_IRQHandler+0x22>
 8002c74:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7e:	6153      	str	r3, [r2, #20]
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <EXTI15_10_IRQHandler+0xc0>)
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <EXTI15_10_IRQHandler+0x40>
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4a22      	ldr	r2, [pc, #136]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c9c:	6153      	str	r3, [r2, #20]
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <EXTI15_10_IRQHandler+0xc0>)
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <EXTI15_10_IRQHandler+0x5e>
 8002cb0:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cba:	6153      	str	r3, [r2, #20]
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <EXTI15_10_IRQHandler+0xc0>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <EXTI15_10_IRQHandler+0x7c>
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002cd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cd8:	6153      	str	r3, [r2, #20]
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <EXTI15_10_IRQHandler+0xc0>)
 8002cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cde:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <EXTI15_10_IRQHandler+0x9a>
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	4a0b      	ldr	r2, [pc, #44]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf6:	6153      	str	r3, [r2, #20]
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <EXTI15_10_IRQHandler+0xc0>)
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <EXTI15_10_IRQHandler+0xb8>
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <EXTI15_10_IRQHandler+0xbc>)
 8002d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d14:	6153      	str	r3, [r2, #20]
 8002d16:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <EXTI15_10_IRQHandler+0xc0>)
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	4798      	blx	r3

	}
 8002d1c:	bf00      	nop
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40010400 	.word	0x40010400
 8002d24:	20004190 	.word	0x20004190

08002d28 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	2b07      	cmp	r3, #7
 8002d36:	d803      	bhi.n	8002d40 <Get_PIN_Positon+0x18>
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	e004      	b.n	8002d4a <Get_PIN_Positon+0x22>
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	3b08      	subs	r3, #8
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	81fb      	strh	r3, [r7, #14]
return positon;
 8002d4c:	89fb      	ldrh	r3, [r7, #14]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a6b      	ldr	r2, [pc, #428]	; (8002f14 <MCAL_GPIO_init+0x1bc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d106      	bne.n	8002d78 <MCAL_GPIO_init+0x20>
 8002d6a:	4b6b      	ldr	r3, [pc, #428]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	4a6a      	ldr	r2, [pc, #424]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6193      	str	r3, [r2, #24]
 8002d76:	e02a      	b.n	8002dce <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a68      	ldr	r2, [pc, #416]	; (8002f1c <MCAL_GPIO_init+0x1c4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d106      	bne.n	8002d8e <MCAL_GPIO_init+0x36>
 8002d80:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a64      	ldr	r2, [pc, #400]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	e01f      	b.n	8002dce <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <MCAL_GPIO_init+0x1c8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d106      	bne.n	8002da4 <MCAL_GPIO_init+0x4c>
 8002d96:	4b60      	ldr	r3, [pc, #384]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002d9c:	f043 0310 	orr.w	r3, r3, #16
 8002da0:	6193      	str	r3, [r2, #24]
 8002da2:	e014      	b.n	8002dce <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a5f      	ldr	r2, [pc, #380]	; (8002f24 <MCAL_GPIO_init+0x1cc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d106      	bne.n	8002dba <MCAL_GPIO_init+0x62>
 8002dac:	4b5a      	ldr	r3, [pc, #360]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4a59      	ldr	r2, [pc, #356]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002db2:	f043 0320 	orr.w	r3, r3, #32
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	e009      	b.n	8002dce <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <MCAL_GPIO_init+0x1d0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d105      	bne.n	8002dce <MCAL_GPIO_init+0x76>
 8002dc2:	4b55      	ldr	r3, [pc, #340]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	4a54      	ldr	r2, [pc, #336]	; (8002f18 <MCAL_GPIO_init+0x1c0>)
 8002dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dcc:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b07      	cmp	r3, #7
 8002dd6:	d801      	bhi.n	8002ddc <MCAL_GPIO_init+0x84>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	e001      	b.n	8002de0 <MCAL_GPIO_init+0x88>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff9d 	bl	8002d28 <Get_PIN_Positon>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	230f      	movs	r3, #15
 8002df4:	4093      	lsls	r3, r2
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	789b      	ldrb	r3, [r3, #2]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <MCAL_GPIO_init+0xd2>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	789b      	ldrb	r3, [r3, #2]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d009      	beq.n	8002e2a <MCAL_GPIO_init+0xd2>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	789b      	ldrb	r3, [r3, #2]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d004      	beq.n	8002e2a <MCAL_GPIO_init+0xd2>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	789b      	ldrb	r3, [r3, #2]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d156      	bne.n	8002ed8 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	789b      	ldrb	r3, [r3, #2]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d11c      	bne.n	8002e6e <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff74 	bl	8002d28 <Get_PIN_Positon>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	2308      	movs	r3, #8
 8002e46:	fa03 f202 	lsl.w	r2, r3, r2
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	43da      	mvns	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	401a      	ands	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8002e6c:	e04d      	b.n	8002f0a <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	789b      	ldrb	r3, [r3, #2]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d11c      	bne.n	8002eb2 <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff52 	bl	8002d28 <Get_PIN_Positon>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	2308      	movs	r3, #8
 8002e8a:	fa03 f202 	lsl.w	r2, r3, r2
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	fa03 f202 	lsl.w	r2, r3, r2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8002eb0:	e02b      	b.n	8002f0a <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	789b      	ldrb	r3, [r3, #2]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	009c      	lsls	r4, r3, #2
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff31 	bl	8002d28 <Get_PIN_Positon>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	fa04 f203 	lsl.w	r2, r4, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8002ed6:	e018      	b.n	8002f0a <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	789b      	ldrb	r3, [r3, #2]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3b04      	subs	r3, #4
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	78d2      	ldrb	r2, [r2, #3]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	ea43 0402 	orr.w	r4, r3, r2
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff18 	bl	8002d28 <Get_PIN_Positon>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	fa04 f203 	lsl.w	r2, r4, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	601a      	str	r2, [r3, #0]

	}

}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40010800 	.word	0x40010800
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40010c00 	.word	0x40010c00
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40011400 	.word	0x40011400
 8002f28:	40011800 	.word	0x40011800

08002f2c <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8002f3c:	787b      	ldrb	r3, [r7, #1]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d10b      	bne.n	8002f5c <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8002f44:	887b      	ldrh	r3, [r7, #2]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	fa03 f202 	lsl.w	r2, r3, r2
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	60da      	str	r2, [r3, #12]

	}



}
 8002f5a:	e00a      	b.n	8002f72 <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	2301      	movs	r3, #1
 8002f64:	4093      	lsls	r3, r2
 8002f66:	43da      	mvns	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60da      	str	r2, [r3, #12]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <MCAL_Read_PIN>:
void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
	GPIOX->ODR=value;


}
usint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]

	return ((GPIOx->IDR>>PIN_Number) & 1);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	887a      	ldrh	r2, [r7, #2]
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	40d3      	lsrs	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	b29b      	uxth	r3, r3

}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <GP_ERROR_HANDLER>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_ERROR_HANDLER(){
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
	while(1);
 8002fa8:	e7fe      	b.n	8002fa8 <GP_ERROR_HANDLER+0x4>
	...

08002fac <MCAL_SET_GP_TIMx_GPIO>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void MCAL_SET_GP_TIMx_GPIO(GP_TIMx_REG* TIMx,GP_TIMER_Mode MODE,uint8_t CHx){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b09c      	sub	sp, #112	; 0x70
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	70fb      	strb	r3, [r7, #3]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	70bb      	strb	r3, [r7, #2]
	PIN_config pin;
	if(TIMx ==TIM2){
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	f040 8089 	bne.w	80030d8 <MCAL_SET_GP_TIMx_GPIO+0x12c>
		switch (MODE) {
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d043      	beq.n	8003054 <MCAL_SET_GP_TIMx_GPIO+0xa8>
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	f300 81bb 	bgt.w	8003348 <MCAL_SET_GP_TIMx_GPIO+0x39c>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f000 81ba 	beq.w	800334c <MCAL_SET_GP_TIMx_GPIO+0x3a0>
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d000      	beq.n	8002fde <MCAL_SET_GP_TIMx_GPIO+0x32>
				default:
					GP_ERROR_HANDLER();
				}
				break;
				default:
					break;
 8002fdc:	e1b4      	b.n	8003348 <MCAL_SET_GP_TIMx_GPIO+0x39c>
			switch(CHx){
 8002fde:	78bb      	ldrb	r3, [r7, #2]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d832      	bhi.n	800304c <MCAL_SET_GP_TIMx_GPIO+0xa0>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <MCAL_SET_GP_TIMx_GPIO+0x40>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	08003011 	.word	0x08003011
 8002ff4:	08003025 	.word	0x08003025
 8002ff8:	08003039 	.word	0x08003039
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 8002ffc:	4bb0      	ldr	r3, [pc, #704]	; (80032c0 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8003002:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003006:	4619      	mov	r1, r3
 8003008:	48ae      	ldr	r0, [pc, #696]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800300a:	f7ff fea5 	bl	8002d58 <MCAL_GPIO_init>
				break;
 800300e:	e020      	b.n	8003052 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 8003010:	4bad      	ldr	r3, [pc, #692]	; (80032c8 <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8003016:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800301a:	4619      	mov	r1, r3
 800301c:	48a9      	ldr	r0, [pc, #676]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800301e:	f7ff fe9b 	bl	8002d58 <MCAL_GPIO_init>
				break;
 8003022:	e016      	b.n	8003052 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_10};
 8003024:	4ba9      	ldr	r3, [pc, #676]	; (80032cc <MCAL_SET_GP_TIMx_GPIO+0x320>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 800302a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800302e:	4619      	mov	r1, r3
 8003030:	48a4      	ldr	r0, [pc, #656]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8003032:	f7ff fe91 	bl	8002d58 <MCAL_GPIO_init>
				break;
 8003036:	e00c      	b.n	8003052 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				pin=(PIN_config){PIN_3,OUTPUT_AF_PP,SPEED_10};
 8003038:	4ba5      	ldr	r3, [pc, #660]	; (80032d0 <MCAL_SET_GP_TIMx_GPIO+0x324>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 800303e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003042:	4619      	mov	r1, r3
 8003044:	489f      	ldr	r0, [pc, #636]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8003046:	f7ff fe87 	bl	8002d58 <MCAL_GPIO_init>
				break;
 800304a:	e002      	b.n	8003052 <MCAL_SET_GP_TIMx_GPIO+0xa6>
				GP_ERROR_HANDLER();
 800304c:	f7ff ffaa 	bl	8002fa4 <GP_ERROR_HANDLER>
			break;
 8003050:	e185      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8003052:	e184      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8003054:	78bb      	ldrb	r3, [r7, #2]
 8003056:	3b01      	subs	r3, #1
 8003058:	2b03      	cmp	r3, #3
 800305a:	d839      	bhi.n	80030d0 <MCAL_SET_GP_TIMx_GPIO+0x124>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <MCAL_SET_GP_TIMx_GPIO+0xb8>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003075 	.word	0x08003075
 8003068:	08003095 	.word	0x08003095
 800306c:	080030a9 	.word	0x080030a9
 8003070:	080030bd 	.word	0x080030bd
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 8003074:	2300      	movs	r3, #0
 8003076:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800307a:	2301      	movs	r3, #1
 800307c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8003080:	2300      	movs	r3, #0
 8003082:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOA, &pin);
 8003086:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800308a:	4619      	mov	r1, r3
 800308c:	488d      	ldr	r0, [pc, #564]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800308e:	f7ff fe63 	bl	8002d58 <MCAL_GPIO_init>
					break;
 8003092:	e020      	b.n	80030d6 <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 8003094:	4b8f      	ldr	r3, [pc, #572]	; (80032d4 <MCAL_SET_GP_TIMx_GPIO+0x328>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 800309a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800309e:	4619      	mov	r1, r3
 80030a0:	4888      	ldr	r0, [pc, #544]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80030a2:	f7ff fe59 	bl	8002d58 <MCAL_GPIO_init>
					break;
 80030a6:	e016      	b.n	80030d6 <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_2,INPUT_FI,0};
 80030a8:	4b8b      	ldr	r3, [pc, #556]	; (80032d8 <MCAL_SET_GP_TIMx_GPIO+0x32c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 80030ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030b2:	4619      	mov	r1, r3
 80030b4:	4883      	ldr	r0, [pc, #524]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80030b6:	f7ff fe4f 	bl	8002d58 <MCAL_GPIO_init>
					break;
 80030ba:	e00c      	b.n	80030d6 <MCAL_SET_GP_TIMx_GPIO+0x12a>
					pin=(PIN_config){PIN_3,INPUT_FI,0};
 80030bc:	4b87      	ldr	r3, [pc, #540]	; (80032dc <MCAL_SET_GP_TIMx_GPIO+0x330>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 80030c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030c6:	4619      	mov	r1, r3
 80030c8:	487e      	ldr	r0, [pc, #504]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80030ca:	f7ff fe45 	bl	8002d58 <MCAL_GPIO_init>
					break;
 80030ce:	e002      	b.n	80030d6 <MCAL_SET_GP_TIMx_GPIO+0x12a>
					GP_ERROR_HANDLER();
 80030d0:	f7ff ff68 	bl	8002fa4 <GP_ERROR_HANDLER>
				break;
 80030d4:	e143      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 80030d6:	e142      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}

	}else if(TIMx ==TIM3){
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a81      	ldr	r2, [pc, #516]	; (80032e0 <MCAL_SET_GP_TIMx_GPIO+0x334>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	f040 8089 	bne.w	80031f4 <MCAL_SET_GP_TIMx_GPIO+0x248>
		switch (MODE) {
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d043      	beq.n	8003170 <MCAL_SET_GP_TIMx_GPIO+0x1c4>
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	f300 8131 	bgt.w	8003350 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8130 	beq.w	8003354 <MCAL_SET_GP_TIMx_GPIO+0x3a8>
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d000      	beq.n	80030fa <MCAL_SET_GP_TIMx_GPIO+0x14e>
				default:
					GP_ERROR_HANDLER();
				}
				break;
				default:
					break;
 80030f8:	e12a      	b.n	8003350 <MCAL_SET_GP_TIMx_GPIO+0x3a4>
			switch(CHx){
 80030fa:	78bb      	ldrb	r3, [r7, #2]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d832      	bhi.n	8003168 <MCAL_SET_GP_TIMx_GPIO+0x1bc>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <MCAL_SET_GP_TIMx_GPIO+0x15c>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003119 	.word	0x08003119
 800310c:	0800312d 	.word	0x0800312d
 8003110:	08003141 	.word	0x08003141
 8003114:	08003155 	.word	0x08003155
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8003118:	4b72      	ldr	r3, [pc, #456]	; (80032e4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 800311e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003122:	4619      	mov	r1, r3
 8003124:	4867      	ldr	r0, [pc, #412]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 8003126:	f7ff fe17 	bl	8002d58 <MCAL_GPIO_init>
				break;
 800312a:	e020      	b.n	800316e <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 800312c:	4b6e      	ldr	r3, [pc, #440]	; (80032e8 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOA, &pin);
 8003132:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003136:	4619      	mov	r1, r3
 8003138:	4862      	ldr	r0, [pc, #392]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800313a:	f7ff fe0d 	bl	8002d58 <MCAL_GPIO_init>
				break;
 800313e:	e016      	b.n	800316e <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_0,OUTPUT_AF_PP,SPEED_10};
 8003140:	4b5f      	ldr	r3, [pc, #380]	; (80032c0 <MCAL_SET_GP_TIMx_GPIO+0x314>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8003146:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800314a:	4619      	mov	r1, r3
 800314c:	4867      	ldr	r0, [pc, #412]	; (80032ec <MCAL_SET_GP_TIMx_GPIO+0x340>)
 800314e:	f7ff fe03 	bl	8002d58 <MCAL_GPIO_init>
				break;
 8003152:	e00c      	b.n	800316e <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				pin=(PIN_config){PIN_1,OUTPUT_AF_PP,SPEED_10};
 8003154:	4b5c      	ldr	r3, [pc, #368]	; (80032c8 <MCAL_SET_GP_TIMx_GPIO+0x31c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 800315a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800315e:	4619      	mov	r1, r3
 8003160:	4862      	ldr	r0, [pc, #392]	; (80032ec <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8003162:	f7ff fdf9 	bl	8002d58 <MCAL_GPIO_init>
				break;
 8003166:	e002      	b.n	800316e <MCAL_SET_GP_TIMx_GPIO+0x1c2>
				GP_ERROR_HANDLER();
 8003168:	f7ff ff1c 	bl	8002fa4 <GP_ERROR_HANDLER>
			break;
 800316c:	e0f7      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 800316e:	e0f6      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 8003170:	78bb      	ldrb	r3, [r7, #2]
 8003172:	3b01      	subs	r3, #1
 8003174:	2b03      	cmp	r3, #3
 8003176:	d839      	bhi.n	80031ec <MCAL_SET_GP_TIMx_GPIO+0x240>
 8003178:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <MCAL_SET_GP_TIMx_GPIO+0x1d4>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	08003191 	.word	0x08003191
 8003184:	080031a5 	.word	0x080031a5
 8003188:	080031b9 	.word	0x080031b9
 800318c:	080031d9 	.word	0x080031d9
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 8003190:	4b57      	ldr	r3, [pc, #348]	; (80032f0 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 8003196:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800319a:	4619      	mov	r1, r3
 800319c:	4849      	ldr	r0, [pc, #292]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 800319e:	f7ff fddb 	bl	8002d58 <MCAL_GPIO_init>
					break;
 80031a2:	e026      	b.n	80031f2 <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <MCAL_SET_GP_TIMx_GPIO+0x348>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOA, &pin);
 80031aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031ae:	4619      	mov	r1, r3
 80031b0:	4844      	ldr	r0, [pc, #272]	; (80032c4 <MCAL_SET_GP_TIMx_GPIO+0x318>)
 80031b2:	f7ff fdd1 	bl	8002d58 <MCAL_GPIO_init>
					break;
 80031b6:	e01c      	b.n	80031f2 <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_0,INPUT_FI,0};
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80031be:	2301      	movs	r3, #1
 80031c0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80031c4:	2300      	movs	r3, #0
 80031c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					MCAL_GPIO_init(GPIOB, &pin);
 80031ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031ce:	4619      	mov	r1, r3
 80031d0:	4846      	ldr	r0, [pc, #280]	; (80032ec <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80031d2:	f7ff fdc1 	bl	8002d58 <MCAL_GPIO_init>
					break;
 80031d6:	e00c      	b.n	80031f2 <MCAL_SET_GP_TIMx_GPIO+0x246>
					pin=(PIN_config){PIN_1,INPUT_FI,0};
 80031d8:	4b3e      	ldr	r3, [pc, #248]	; (80032d4 <MCAL_SET_GP_TIMx_GPIO+0x328>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 80031de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80031e2:	4619      	mov	r1, r3
 80031e4:	4841      	ldr	r0, [pc, #260]	; (80032ec <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80031e6:	f7ff fdb7 	bl	8002d58 <MCAL_GPIO_init>
					break;
 80031ea:	e002      	b.n	80031f2 <MCAL_SET_GP_TIMx_GPIO+0x246>
					GP_ERROR_HANDLER();
 80031ec:	f7ff feda 	bl	8002fa4 <GP_ERROR_HANDLER>
				break;
 80031f0:	e0b5      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 80031f2:	e0b4      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		}



	}else if(TIMx ==TIM4){
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <MCAL_SET_GP_TIMx_GPIO+0x34c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	f040 80b0 	bne.w	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
		switch (MODE) {
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d043      	beq.n	800328c <MCAL_SET_GP_TIMx_GPIO+0x2e0>
 8003204:	2b02      	cmp	r3, #2
 8003206:	f300 80a7 	bgt.w	8003358 <MCAL_SET_GP_TIMx_GPIO+0x3ac>
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80a6 	beq.w	800335c <MCAL_SET_GP_TIMx_GPIO+0x3b0>
 8003210:	2b01      	cmp	r3, #1
 8003212:	d000      	beq.n	8003216 <MCAL_SET_GP_TIMx_GPIO+0x26a>
				default:
					GP_ERROR_HANDLER();
				}
				break;
				default:
					break;
 8003214:	e0a0      	b.n	8003358 <MCAL_SET_GP_TIMx_GPIO+0x3ac>
			switch(CHx){
 8003216:	78bb      	ldrb	r3, [r7, #2]
 8003218:	3b01      	subs	r3, #1
 800321a:	2b03      	cmp	r3, #3
 800321c:	d832      	bhi.n	8003284 <MCAL_SET_GP_TIMx_GPIO+0x2d8>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <MCAL_SET_GP_TIMx_GPIO+0x278>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003235 	.word	0x08003235
 8003228:	08003249 	.word	0x08003249
 800322c:	0800325d 	.word	0x0800325d
 8003230:	08003271 	.word	0x08003271
				pin=(PIN_config){PIN_6,OUTPUT_AF_PP,SPEED_10};
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <MCAL_SET_GP_TIMx_GPIO+0x338>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 800323a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800323e:	4619      	mov	r1, r3
 8003240:	482a      	ldr	r0, [pc, #168]	; (80032ec <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8003242:	f7ff fd89 	bl	8002d58 <MCAL_GPIO_init>
				break;
 8003246:	e020      	b.n	800328a <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_7,OUTPUT_AF_PP,SPEED_10};
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <MCAL_SET_GP_TIMx_GPIO+0x33c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 800324e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003252:	4619      	mov	r1, r3
 8003254:	4825      	ldr	r0, [pc, #148]	; (80032ec <MCAL_SET_GP_TIMx_GPIO+0x340>)
 8003256:	f7ff fd7f 	bl	8002d58 <MCAL_GPIO_init>
				break;
 800325a:	e016      	b.n	800328a <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_8,OUTPUT_AF_PP,SPEED_10};
 800325c:	4b27      	ldr	r3, [pc, #156]	; (80032fc <MCAL_SET_GP_TIMx_GPIO+0x350>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8003262:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003266:	4619      	mov	r1, r3
 8003268:	4820      	ldr	r0, [pc, #128]	; (80032ec <MCAL_SET_GP_TIMx_GPIO+0x340>)
 800326a:	f7ff fd75 	bl	8002d58 <MCAL_GPIO_init>
				break;
 800326e:	e00c      	b.n	800328a <MCAL_SET_GP_TIMx_GPIO+0x2de>
				pin=(PIN_config){PIN_9,OUTPUT_AF_PP,SPEED_10};
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <MCAL_SET_GP_TIMx_GPIO+0x354>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	66fb      	str	r3, [r7, #108]	; 0x6c
				MCAL_GPIO_init(GPIOB, &pin);
 8003276:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800327a:	4619      	mov	r1, r3
 800327c:	481b      	ldr	r0, [pc, #108]	; (80032ec <MCAL_SET_GP_TIMx_GPIO+0x340>)
 800327e:	f7ff fd6b 	bl	8002d58 <MCAL_GPIO_init>
				break;
 8003282:	e002      	b.n	800328a <MCAL_SET_GP_TIMx_GPIO+0x2de>
				GP_ERROR_HANDLER();
 8003284:	f7ff fe8e 	bl	8002fa4 <GP_ERROR_HANDLER>
			break;
 8003288:	e069      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 800328a:	e068      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
				switch(CHx){
 800328c:	78bb      	ldrb	r3, [r7, #2]
 800328e:	3b01      	subs	r3, #1
 8003290:	2b03      	cmp	r3, #3
 8003292:	d855      	bhi.n	8003340 <MCAL_SET_GP_TIMx_GPIO+0x394>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <MCAL_SET_GP_TIMx_GPIO+0x2f0>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032ad 	.word	0x080032ad
 80032a0:	08003305 	.word	0x08003305
 80032a4:	08003319 	.word	0x08003319
 80032a8:	0800332d 	.word	0x0800332d
					pin=(PIN_config){PIN_6,INPUT_FI,0};
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <MCAL_SET_GP_TIMx_GPIO+0x344>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 80032b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032b6:	4619      	mov	r1, r3
 80032b8:	480c      	ldr	r0, [pc, #48]	; (80032ec <MCAL_SET_GP_TIMx_GPIO+0x340>)
 80032ba:	f7ff fd4d 	bl	8002d58 <MCAL_GPIO_init>
					break;
 80032be:	e042      	b.n	8003346 <MCAL_SET_GP_TIMx_GPIO+0x39a>
 80032c0:	08005528 	.word	0x08005528
 80032c4:	40010800 	.word	0x40010800
 80032c8:	0800552c 	.word	0x0800552c
 80032cc:	08005530 	.word	0x08005530
 80032d0:	08005534 	.word	0x08005534
 80032d4:	08005538 	.word	0x08005538
 80032d8:	0800553c 	.word	0x0800553c
 80032dc:	08005540 	.word	0x08005540
 80032e0:	40000400 	.word	0x40000400
 80032e4:	08005544 	.word	0x08005544
 80032e8:	08005548 	.word	0x08005548
 80032ec:	40010c00 	.word	0x40010c00
 80032f0:	0800554c 	.word	0x0800554c
 80032f4:	08005550 	.word	0x08005550
 80032f8:	40000800 	.word	0x40000800
 80032fc:	08005554 	.word	0x08005554
 8003300:	08005558 	.word	0x08005558
					pin=(PIN_config){PIN_7,INPUT_FI,0};
 8003304:	4b18      	ldr	r3, [pc, #96]	; (8003368 <MCAL_SET_GP_TIMx_GPIO+0x3bc>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 800330a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800330e:	4619      	mov	r1, r3
 8003310:	4816      	ldr	r0, [pc, #88]	; (800336c <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8003312:	f7ff fd21 	bl	8002d58 <MCAL_GPIO_init>
					break;
 8003316:	e016      	b.n	8003346 <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_8,INPUT_FI,0};
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <MCAL_SET_GP_TIMx_GPIO+0x3c4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 800331e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003322:	4619      	mov	r1, r3
 8003324:	4811      	ldr	r0, [pc, #68]	; (800336c <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 8003326:	f7ff fd17 	bl	8002d58 <MCAL_GPIO_init>
					break;
 800332a:	e00c      	b.n	8003346 <MCAL_SET_GP_TIMx_GPIO+0x39a>
					pin=(PIN_config){PIN_9,INPUT_FI,0};
 800332c:	4b11      	ldr	r3, [pc, #68]	; (8003374 <MCAL_SET_GP_TIMx_GPIO+0x3c8>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	66fb      	str	r3, [r7, #108]	; 0x6c
					MCAL_GPIO_init(GPIOB, &pin);
 8003332:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003336:	4619      	mov	r1, r3
 8003338:	480c      	ldr	r0, [pc, #48]	; (800336c <MCAL_SET_GP_TIMx_GPIO+0x3c0>)
 800333a:	f7ff fd0d 	bl	8002d58 <MCAL_GPIO_init>
					break;
 800333e:	e002      	b.n	8003346 <MCAL_SET_GP_TIMx_GPIO+0x39a>
					GP_ERROR_HANDLER();
 8003340:	f7ff fe30 	bl	8002fa4 <GP_ERROR_HANDLER>
				break;
 8003344:	e00b      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
 8003346:	e00a      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8003348:	bf00      	nop
 800334a:	e008      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 800334c:	bf00      	nop
 800334e:	e006      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8003350:	bf00      	nop
 8003352:	e004      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 8003354:	bf00      	nop
 8003356:	e002      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
					break;
 8003358:	bf00      	nop
 800335a:	e000      	b.n	800335e <MCAL_SET_GP_TIMx_GPIO+0x3b2>
			break;
 800335c:	bf00      	nop
		//////////



	}
}
 800335e:	bf00      	nop
 8003360:	3770      	adds	r7, #112	; 0x70
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	08005550 	.word	0x08005550
 800336c:	40010c00 	.word	0x40010c00
 8003370:	0800555c 	.word	0x0800555c
 8003374:	08005560 	.word	0x08005560

08003378 <GP_TIMx_start>:
 * @param [in] - TIM[1 OR 2 OR 3] and the sitting
 * @param [out] - Void
 * @retval -
 * Note-
 */
void GP_TIMx_start(GP_TIMx_REG* TIMx,GP_TIMERx_config* Sitting,GP_TIMERx_NORMAL_config* NORMAL_SITTING){
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]

	if(Sitting->mode==NORMAL){
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	7a5b      	ldrb	r3, [r3, #9]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f040 80c1 	bne.w	8003510 <GP_TIMx_start+0x198>
		GP_TIMx_Deint(TIMx);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f8d0 	bl	8003534 <GP_TIMx_Deint>

		g_GP_TIMX=TIMx;
 8003394:	4a61      	ldr	r2, [pc, #388]	; (800351c <GP_TIMx_start+0x1a4>)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6013      	str	r3, [r2, #0]
		if(TIMx== TIM2){RCC->APB1ENR|=(1<<0);			g_GP_Sitting[0]=(* Sitting);	}
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d10c      	bne.n	80033bc <GP_TIMx_start+0x44>
 80033a2:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <GP_TIMx_start+0x1a8>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4a5e      	ldr	r2, [pc, #376]	; (8003520 <GP_TIMx_start+0x1a8>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	61d3      	str	r3, [r2, #28]
 80033ae:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <GP_TIMx_start+0x1ac>)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4614      	mov	r4, r2
 80033b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033ba:	e024      	b.n	8003406 <GP_TIMx_start+0x8e>
		else if(TIMx== TIM3) {RCC->APB1ENR|=(1<<1);	g_GP_Sitting[1]=(* Sitting);	}
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a5a      	ldr	r2, [pc, #360]	; (8003528 <GP_TIMx_start+0x1b0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10e      	bne.n	80033e2 <GP_TIMx_start+0x6a>
 80033c4:	4b56      	ldr	r3, [pc, #344]	; (8003520 <GP_TIMx_start+0x1a8>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	4a55      	ldr	r2, [pc, #340]	; (8003520 <GP_TIMx_start+0x1a8>)
 80033ca:	f043 0302 	orr.w	r3, r3, #2
 80033ce:	61d3      	str	r3, [r2, #28]
 80033d0:	4b54      	ldr	r3, [pc, #336]	; (8003524 <GP_TIMx_start+0x1ac>)
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	f103 0410 	add.w	r4, r3, #16
 80033d8:	4613      	mov	r3, r2
 80033da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80033e0:	e011      	b.n	8003406 <GP_TIMx_start+0x8e>
		else if(TIMx== TIM4) {RCC->APB1ENR|=(1<<2);		g_GP_Sitting[2]=(* Sitting);}
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a51      	ldr	r2, [pc, #324]	; (800352c <GP_TIMx_start+0x1b4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10d      	bne.n	8003406 <GP_TIMx_start+0x8e>
 80033ea:	4b4d      	ldr	r3, [pc, #308]	; (8003520 <GP_TIMx_start+0x1a8>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	4a4c      	ldr	r2, [pc, #304]	; (8003520 <GP_TIMx_start+0x1a8>)
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	61d3      	str	r3, [r2, #28]
 80033f6:	4b4b      	ldr	r3, [pc, #300]	; (8003524 <GP_TIMx_start+0x1ac>)
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	f103 0420 	add.w	r4, r3, #32
 80033fe:	4613      	mov	r3, r2
 8003400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// 2.select the pre vale
		TIMx->PSC=Sitting->TIME_PSC -1;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	3b01      	subs	r3, #1
 800340c:	461a      	mov	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	629a      	str	r2, [r3, #40]	; 0x28

		TIMx->ARR=Sitting->TIME_ARR;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	885b      	ldrh	r3, [r3, #2]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	889b      	ldrh	r3, [r3, #4]
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	631a      	str	r2, [r3, #48]	; 0x30

		if(Sitting->TIME_RCR)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	889b      	ldrh	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <GP_TIMx_start+0xc0>
			TIMx->CR1.BIT_NAME.ARPE=1;
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	6813      	ldr	r3, [r2, #0]
 8003432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003436:	6013      	str	r3, [r2, #0]

		//1.Select the mode CMS[1:0]
		switch(NORMAL_SITTING->NORMAL_MODE){
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d01c      	beq.n	800347a <GP_TIMx_start+0x102>
 8003440:	2b02      	cmp	r3, #2
 8003442:	dc20      	bgt.n	8003486 <GP_TIMx_start+0x10e>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <GP_TIMx_start+0xd6>
 8003448:	2b01      	cmp	r3, #1
 800344a:	d00b      	beq.n	8003464 <GP_TIMx_start+0xec>
 800344c:	e01b      	b.n	8003486 <GP_TIMx_start+0x10e>
		case Up:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	6813      	ldr	r3, [r2, #0]
 8003452:	f36f 1346 	bfc	r3, #5, #2
 8003456:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	f36f 1304 	bfc	r3, #4, #1
 8003460:	6013      	str	r3, [r2, #0]
			break;
 8003462:	e013      	b.n	800348c <GP_TIMx_start+0x114>
		case DOWN:
			TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	f36f 1346 	bfc	r3, #5, #2
 800346c:	6013      	str	r3, [r2, #0]
			TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	6813      	ldr	r3, [r2, #0]
 8003472:	f043 0310 	orr.w	r3, r3, #16
 8003476:	6013      	str	r3, [r2, #0]
			break;
 8003478:	e008      	b.n	800348c <GP_TIMx_start+0x114>
		case Up_Down:
			TIMx->CR1.BIT_NAME.CMS=0b11;
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	6813      	ldr	r3, [r2, #0]
 800347e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003482:	6013      	str	r3, [r2, #0]
			/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
			break;
 8003484:	e002      	b.n	800348c <GP_TIMx_start+0x114>
		default:
			GP_ERROR_HANDLER();
 8003486:	f7ff fd8d 	bl	8002fa4 <GP_ERROR_HANDLER>
			break;
 800348a:	bf00      	nop
		}
		MCAL_SET_GP_TIMx_GPIO(TIMx,NORMAL,0);
 800348c:	2200      	movs	r2, #0
 800348e:	2100      	movs	r1, #0
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff fd8b 	bl	8002fac <MCAL_SET_GP_TIMx_GPIO>
		TIMx->CR1.BIT_NAME.CEN=1;
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	6813      	ldr	r3, [r2, #0]
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6013      	str	r3, [r2, #0]

		if(Sitting->INT_EN_DIS==INT_EN){
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	7a1b      	ldrb	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d125      	bne.n	80034f4 <GP_TIMx_start+0x17c>
			TIMx->DIER.BIT_NAME.UIE=1;
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	68d3      	ldr	r3, [r2, #12]
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	60d3      	str	r3, [r2, #12]
			if(TIMx== TIM2) 	NVIC_ISER0|=(1<<28);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b8:	d106      	bne.n	80034c8 <GP_TIMx_start+0x150>
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <GP_TIMx_start+0x1b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <GP_TIMx_start+0x1b8>)
 80034c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c4:	6013      	str	r3, [r2, #0]
			TIMx->SR.BIT_NAME.UIF=0;
		}
	}else{
		GP_ERROR_HANDLER();
	}
}
 80034c6:	e025      	b.n	8003514 <GP_TIMx_start+0x19c>
			else if(TIMx== TIM3) NVIC_ISER0|=(1<<29);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4a17      	ldr	r2, [pc, #92]	; (8003528 <GP_TIMx_start+0x1b0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d106      	bne.n	80034de <GP_TIMx_start+0x166>
 80034d0:	4b17      	ldr	r3, [pc, #92]	; (8003530 <GP_TIMx_start+0x1b8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <GP_TIMx_start+0x1b8>)
 80034d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	e01a      	b.n	8003514 <GP_TIMx_start+0x19c>
			else if(TIMx== TIM4) NVIC_ISER0|=(1<<30);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <GP_TIMx_start+0x1b4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d116      	bne.n	8003514 <GP_TIMx_start+0x19c>
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <GP_TIMx_start+0x1b8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a11      	ldr	r2, [pc, #68]	; (8003530 <GP_TIMx_start+0x1b8>)
 80034ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034f0:	6013      	str	r3, [r2, #0]
}
 80034f2:	e00f      	b.n	8003514 <GP_TIMx_start+0x19c>
			while(!TIMx->SR.BIT_NAME.UIF);
 80034f4:	bf00      	nop
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f8      	beq.n	80034f6 <GP_TIMx_start+0x17e>
			TIMx->SR.BIT_NAME.UIF=0;
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	6913      	ldr	r3, [r2, #16]
 8003508:	f36f 0300 	bfc	r3, #0, #1
 800350c:	6113      	str	r3, [r2, #16]
}
 800350e:	e001      	b.n	8003514 <GP_TIMx_start+0x19c>
		GP_ERROR_HANDLER();
 8003510:	f7ff fd48 	bl	8002fa4 <GP_ERROR_HANDLER>
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	bd90      	pop	{r4, r7, pc}
 800351c:	200041fc 	.word	0x200041fc
 8003520:	40021000 	.word	0x40021000
 8003524:	200041cc 	.word	0x200041cc
 8003528:	40000400 	.word	0x40000400
 800352c:	40000800 	.word	0x40000800
 8003530:	e000e100 	.word	0xe000e100

08003534 <GP_TIMx_Deint>:

void GP_TIMX_Clear(GP_TIMx_REG* TIMx){

	TIMx->CNT=0;
}
void GP_TIMx_Deint(GP_TIMx_REG* TIMx){
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	if(TIMx== TIM2)			{RCC->APB1ENR|=(1<<0);			}
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003542:	d106      	bne.n	8003552 <GP_TIMx_Deint+0x1e>
 8003544:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <GP_TIMx_Deint+0x100>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	4a3a      	ldr	r2, [pc, #232]	; (8003634 <GP_TIMx_Deint+0x100>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	61d3      	str	r3, [r2, #28]
 8003550:	e014      	b.n	800357c <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM3)	{RCC->APB1ENR|=(1<<1);			}
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a38      	ldr	r2, [pc, #224]	; (8003638 <GP_TIMx_Deint+0x104>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d106      	bne.n	8003568 <GP_TIMx_Deint+0x34>
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <GP_TIMx_Deint+0x100>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4a35      	ldr	r2, [pc, #212]	; (8003634 <GP_TIMx_Deint+0x100>)
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	61d3      	str	r3, [r2, #28]
 8003566:	e009      	b.n	800357c <GP_TIMx_Deint+0x48>
	else if(TIMx== TIM4)	{RCC->APB1ENR|=(1<<2);		}
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a34      	ldr	r2, [pc, #208]	; (800363c <GP_TIMx_Deint+0x108>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d105      	bne.n	800357c <GP_TIMx_Deint+0x48>
 8003570:	4b30      	ldr	r3, [pc, #192]	; (8003634 <GP_TIMx_Deint+0x100>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	4a2f      	ldr	r2, [pc, #188]	; (8003634 <GP_TIMx_Deint+0x100>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	61d3      	str	r3, [r2, #28]

	TIMx->CR1.ALL_BITS=0;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
	TIMx->ARR=0;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CCER.ALL_BITS=0;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	621a      	str	r2, [r3, #32]
	TIMx->CCMR1.ALL_BITS=0;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
	TIMx->CCMR2.ALL_BITS=0;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	61da      	str	r2, [r3, #28]
	TIMx->CCR1=0;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	635a      	str	r2, [r3, #52]	; 0x34
	TIMx->CCR2=0;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
	TIMx->CCR3=0;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c
	TIMx->CCR4=0;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	641a      	str	r2, [r3, #64]	; 0x40
	TIMx->CNT=0;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24
	TIMx->CR2.ALL_BITS=0;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	605a      	str	r2, [r3, #4]
	TIMx->PSC=0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ca:	d10c      	bne.n	80035e6 <GP_TIMx_Deint+0xb2>
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <GP_TIMx_Deint+0x100>)
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	4a18      	ldr	r2, [pc, #96]	; (8003634 <GP_TIMx_Deint+0x100>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6113      	str	r3, [r2, #16]
 80035d8:	4b16      	ldr	r3, [pc, #88]	; (8003634 <GP_TIMx_Deint+0x100>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	4a15      	ldr	r2, [pc, #84]	; (8003634 <GP_TIMx_Deint+0x100>)
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	6113      	str	r3, [r2, #16]
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}
 80035e4:	e020      	b.n	8003628 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a13      	ldr	r2, [pc, #76]	; (8003638 <GP_TIMx_Deint+0x104>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10c      	bne.n	8003608 <GP_TIMx_Deint+0xd4>
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <GP_TIMx_Deint+0x100>)
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <GP_TIMx_Deint+0x100>)
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	6113      	str	r3, [r2, #16]
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <GP_TIMx_Deint+0x100>)
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <GP_TIMx_Deint+0x100>)
 8003600:	f023 0302 	bic.w	r3, r3, #2
 8003604:	6113      	str	r3, [r2, #16]
}
 8003606:	e00f      	b.n	8003628 <GP_TIMx_Deint+0xf4>
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <GP_TIMx_Deint+0x108>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10b      	bne.n	8003628 <GP_TIMx_Deint+0xf4>
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <GP_TIMx_Deint+0x100>)
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	4a07      	ldr	r2, [pc, #28]	; (8003634 <GP_TIMx_Deint+0x100>)
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	6113      	str	r3, [r2, #16]
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <GP_TIMx_Deint+0x100>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	4a04      	ldr	r2, [pc, #16]	; (8003634 <GP_TIMx_Deint+0x100>)
 8003622:	f023 0304 	bic.w	r3, r3, #4
 8003626:	6113      	str	r3, [r2, #16]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800

08003640 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 8003646:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	7813      	ldrb	r3, [r2, #0]
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 8003660:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003664:	6913      	ldr	r3, [r2, #16]
 8003666:	f36f 0300 	bfc	r3, #0, #1
 800366a:	6113      	str	r3, [r2, #16]
 800366c:	e04e      	b.n	800370c <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 800366e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	7813      	ldrb	r3, [r2, #0]
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8003688:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800368c:	6913      	ldr	r3, [r2, #16]
 800368e:	f36f 0341 	bfc	r3, #1, #1
 8003692:	6113      	str	r3, [r2, #16]
 8003694:	e03a      	b.n	800370c <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 8003696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	7813      	ldrb	r3, [r2, #0]
 80036aa:	f043 0304 	orr.w	r3, r3, #4
 80036ae:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 80036b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036b4:	6913      	ldr	r3, [r2, #16]
 80036b6:	f36f 0382 	bfc	r3, #2, #1
 80036ba:	6113      	str	r3, [r2, #16]
 80036bc:	e026      	b.n	800370c <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 80036be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00b      	beq.n	80036e6 <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	7813      	ldrb	r3, [r2, #0]
 80036d2:	f043 0308 	orr.w	r3, r3, #8
 80036d6:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 80036d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036dc:	6913      	ldr	r3, [r2, #16]
 80036de:	f36f 03c3 	bfc	r3, #3, #1
 80036e2:	6113      	str	r3, [r2, #16]
 80036e4:	e012      	b.n	800370c <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 80036e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	7813      	ldrb	r3, [r2, #0]
 80036fa:	f043 0310 	orr.w	r3, r3, #16
 80036fe:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8003700:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003704:	6913      	ldr	r3, [r2, #16]
 8003706:	f36f 1304 	bfc	r3, #4, #1
 800370a:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <TIM2_IRQHandler+0xdc>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	4798      	blx	r3

}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	200041cc 	.word	0x200041cc

08003720 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 8003726:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	7813      	ldrb	r3, [r2, #0]
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 800373e:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 8003740:	6913      	ldr	r3, [r2, #16]
 8003742:	f36f 0300 	bfc	r3, #0, #1
 8003746:	6113      	str	r3, [r2, #16]
 8003748:	e046      	b.n	80037d8 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	7813      	ldrb	r3, [r2, #0]
 800375c:	f043 0302 	orr.w	r3, r3, #2
 8003760:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 8003762:	4a21      	ldr	r2, [pc, #132]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 8003764:	6913      	ldr	r3, [r2, #16]
 8003766:	f36f 0341 	bfc	r3, #1, #1
 800376a:	6113      	str	r3, [r2, #16]
 800376c:	e034      	b.n	80037d8 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	7813      	ldrb	r3, [r2, #0]
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 8003786:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 8003788:	6913      	ldr	r3, [r2, #16]
 800378a:	f36f 0382 	bfc	r3, #2, #1
 800378e:	6113      	str	r3, [r2, #16]
 8003790:	e022      	b.n	80037d8 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	7813      	ldrb	r3, [r2, #0]
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 80037aa:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 80037ac:	6913      	ldr	r3, [r2, #16]
 80037ae:	f36f 03c3 	bfc	r3, #3, #1
 80037b2:	6113      	str	r3, [r2, #16]
 80037b4:	e010      	b.n	80037d8 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	7813      	ldrb	r3, [r2, #0]
 80037c8:	f043 0310 	orr.w	r3, r3, #16
 80037cc:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 80037ce:	4a06      	ldr	r2, [pc, #24]	; (80037e8 <TIM3_IRQHandler+0xc8>)
 80037d0:	6913      	ldr	r3, [r2, #16]
 80037d2:	f36f 1304 	bfc	r3, #4, #1
 80037d6:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <TIM3_IRQHandler+0xcc>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	4798      	blx	r3


}void TIM4_IRQHandler(){
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40000400 	.word	0x40000400
 80037ec:	200041cc 	.word	0x200041cc

080037f0 <TIM4_IRQHandler>:
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 80037f6:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	7813      	ldrb	r3, [r2, #0]
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 800380e:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 8003810:	6913      	ldr	r3, [r2, #16]
 8003812:	f36f 0300 	bfc	r3, #0, #1
 8003816:	6113      	str	r3, [r2, #16]
 8003818:	e04b      	b.n	80038b2 <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 800381a:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	7813      	ldrb	r3, [r2, #0]
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 8003832:	4a24      	ldr	r2, [pc, #144]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 8003834:	6913      	ldr	r3, [r2, #16]
 8003836:	f36f 0341 	bfc	r3, #1, #1
 800383a:	6113      	str	r3, [r2, #16]
 800383c:	e039      	b.n	80038b2 <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00f      	beq.n	800386c <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	7813      	ldrb	r3, [r2, #0]
 8003850:	f043 0304 	orr.w	r3, r3, #4
 8003854:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 8003858:	6913      	ldr	r3, [r2, #16]
 800385a:	f36f 0382 	bfc	r3, #2, #1
 800385e:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	7813      	ldrb	r3, [r2, #0]
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	7013      	strb	r3, [r2, #0]
 800386a:	e022      	b.n	80038b2 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	7813      	ldrb	r3, [r2, #0]
 800387e:	f043 0308 	orr.w	r3, r3, #8
 8003882:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8003884:	4a0f      	ldr	r2, [pc, #60]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 8003886:	6913      	ldr	r3, [r2, #16]
 8003888:	f36f 03c3 	bfc	r3, #3, #1
 800388c:	6113      	str	r3, [r2, #16]
 800388e:	e010      	b.n	80038b2 <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	7813      	ldrb	r3, [r2, #0]
 80038a2:	f043 0310 	orr.w	r3, r3, #16
 80038a6:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 80038a8:	4a06      	ldr	r2, [pc, #24]	; (80038c4 <TIM4_IRQHandler+0xd4>)
 80038aa:	6913      	ldr	r3, [r2, #16]
 80038ac:	f36f 1304 	bfc	r3, #4, #1
 80038b0:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <TIM4_IRQHandler+0xd8>)
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3


}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40000800 	.word	0x40000800
 80038c8:	200041cc 	.word	0x200041cc

080038cc <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <MCAL_GET_SYS_CLCK+0x34>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d00a      	beq.n	80038f4 <MCAL_GET_SYS_CLCK+0x28>
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d80a      	bhi.n	80038f8 <MCAL_GET_SYS_CLCK+0x2c>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <MCAL_GET_SYS_CLCK+0x20>
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d002      	beq.n	80038f0 <MCAL_GET_SYS_CLCK+0x24>
 80038ea:	e005      	b.n	80038f8 <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <MCAL_GET_SYS_CLCK+0x38>)
 80038ee:	e003      	b.n	80038f8 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 80038f0:	4b05      	ldr	r3, [pc, #20]	; (8003908 <MCAL_GET_SYS_CLCK+0x3c>)
 80038f2:	e001      	b.n	80038f8 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <MCAL_GET_SYS_CLCK+0x40>)
 80038f6:	e7ff      	b.n	80038f8 <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	40021000 	.word	0x40021000
 8003904:	007a1200 	.word	0x007a1200
 8003908:	00f42400 	.word	0x00f42400
 800390c:	01ab3f00 	.word	0x01ab3f00

08003910 <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8003914:	f7ff ffda 	bl	80038cc <MCAL_GET_SYS_CLCK>
 8003918:	4602      	mov	r2, r0
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <MCAL_GET_H_CLCK+0x20>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	4903      	ldr	r1, [pc, #12]	; (8003934 <MCAL_GET_H_CLCK+0x24>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800392c:	4618      	mov	r0, r3
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	20000038 	.word	0x20000038

08003938 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 800393c:	f7ff ffe8 	bl	8003910 <MCAL_GET_H_CLCK>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <MCAL_GET_PCLCK1+0x20>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	; (800395c <MCAL_GET_PCLCK1+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3

}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	20000030 	.word	0x20000030

08003960 <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8003964:	f7ff ffd4 	bl	8003910 <MCAL_GET_H_CLCK>
 8003968:	4602      	mov	r2, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <MCAL_GET_PCLCK2+0x20>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	0adb      	lsrs	r3, r3, #11
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4903      	ldr	r1, [pc, #12]	; (8003984 <MCAL_GET_PCLCK2+0x24>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3

}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	20000030 	.word	0x20000030

08003988 <MCAL_SPI_init>:
 */

#include "SPI.h"
SPI_Config_t G_P_Config_t[2]={0}; // index 0 for SPI0 index 1 for SPI1

void MCAL_SPI_init(SPI_Reg * SPIx,SPI_Config_t *Config){
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	// make a global backup for the configuration of the SPI
	if(SPIx == SPI1){ G_P_Config_t[0]= *Config; 	RCC->APB2ENR |=(1<<12); }
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a57      	ldr	r2, [pc, #348]	; (8003af4 <MCAL_SPI_init+0x16c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d10c      	bne.n	80039b4 <MCAL_SPI_init+0x2c>
 800399a:	4a57      	ldr	r2, [pc, #348]	; (8003af8 <MCAL_SPI_init+0x170>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4614      	mov	r4, r2
 80039a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80039a6:	4b55      	ldr	r3, [pc, #340]	; (8003afc <MCAL_SPI_init+0x174>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	4a54      	ldr	r2, [pc, #336]	; (8003afc <MCAL_SPI_init+0x174>)
 80039ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039b0:	6193      	str	r3, [r2, #24]
 80039b2:	e011      	b.n	80039d8 <MCAL_SPI_init+0x50>
	else if(SPIx == SPI2){ G_P_Config_t[1]= *Config;RCC->APB1ENR |=(1<<14); }
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a52      	ldr	r2, [pc, #328]	; (8003b00 <MCAL_SPI_init+0x178>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d10d      	bne.n	80039d8 <MCAL_SPI_init+0x50>
 80039bc:	4b4e      	ldr	r3, [pc, #312]	; (8003af8 <MCAL_SPI_init+0x170>)
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	f103 0410 	add.w	r4, r3, #16
 80039c4:	4613      	mov	r3, r2
 80039c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80039cc:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <MCAL_SPI_init+0x174>)
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <MCAL_SPI_init+0x174>)
 80039d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d6:	61d3      	str	r3, [r2, #28]
	//1. Set the DFF bit to define 8- or 16-bit data frame format
	SPIx->SPI_CR1.Bit_Name.DFF = Config->DATA;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	789b      	ldrb	r3, [r3, #2]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	b2d9      	uxtb	r1, r3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	8813      	ldrh	r3, [r2, #0]
 80039e6:	f361 23cb 	bfi	r3, r1, #11, #1
 80039ea:	8013      	strh	r3, [r2, #0]
		/*2. Select the CPOL and CPHA bits to define one of the four relationships between the
		data transfer and the serial clock (see Figure 240). For correct data transfer, the CPOL
		and CPHA bits must be configured in the same way in the slave device and the master
		device*/
	SPIx->SPI_CR1.Bit_Name.CPOL = Config->POL;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	799b      	ldrb	r3, [r3, #6]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	b2d9      	uxtb	r1, r3
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	8813      	ldrh	r3, [r2, #0]
 80039fa:	f361 0341 	bfi	r3, r1, #1, #1
 80039fe:	8013      	strh	r3, [r2, #0]
	SPIx->SPI_CR1.Bit_Name.CPHA = Config->PHA;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	79db      	ldrb	r3, [r3, #7]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	b2d9      	uxtb	r1, r3
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	8813      	ldrh	r3, [r2, #0]
 8003a0e:	f361 0300 	bfi	r3, r1, #0, #1
 8003a12:	8013      	strh	r3, [r2, #0]
		/*3. The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
		the SPI_CR1 register) must be the same as the master device.*/
	SPIx->SPI_CR1.Bit_Name.LSBFIRST = Config->FRAME;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	78db      	ldrb	r3, [r3, #3]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	b2d9      	uxtb	r1, r3
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	8813      	ldrh	r3, [r2, #0]
 8003a22:	f361 13c7 	bfi	r3, r1, #7, #1
 8003a26:	8013      	strh	r3, [r2, #0]
	/*4. In Hardware mode (refer to Slave select (NSS) pin management), the NSS pin must be
		connected to a low level signal during the complete byte transmit sequence. In NSS
		software mode, set the SSM bit and clear the SSI bit in the SPI_CR1 register.*/
	if(Config->NSS_SELC ==SW) 	SPIx->SPI_CR1.Bit_Name.SSM = 1;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	791b      	ldrb	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <MCAL_SPI_init+0xb4>
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	8813      	ldrh	r3, [r2, #0]
 8003a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a38:	8013      	strh	r3, [r2, #0]
 8003a3a:	e01c      	b.n	8003a76 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_OUT ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =1;}
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	791b      	ldrb	r3, [r3, #4]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10a      	bne.n	8003a5a <MCAL_SPI_init+0xd2>
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	8813      	ldrh	r3, [r2, #0]
 8003a48:	f36f 2349 	bfc	r3, #9, #1
 8003a4c:	8013      	strh	r3, [r2, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	7913      	ldrb	r3, [r2, #4]
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	7113      	strb	r3, [r2, #4]
 8003a58:	e00d      	b.n	8003a76 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_IN ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =0;}
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	791b      	ldrb	r3, [r3, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d109      	bne.n	8003a76 <MCAL_SPI_init+0xee>
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	8813      	ldrh	r3, [r2, #0]
 8003a66:	f36f 2349 	bfc	r3, #9, #1
 8003a6a:	8013      	strh	r3, [r2, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	7913      	ldrb	r3, [r2, #4]
 8003a70:	f36f 0382 	bfc	r3, #2, #1
 8003a74:	7113      	strb	r3, [r2, #4]
	//5. Clear the MSTR bit and set the SPE bit (both in the SPI_CR1 register) to assign the pins to alternate functions.
	SPIx->SPI_CR1.Bit_Name.MSTR = Config->M_S;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	785b      	ldrb	r3, [r3, #1]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	b2d9      	uxtb	r1, r3
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	8813      	ldrh	r3, [r2, #0]
 8003a84:	f361 0382 	bfi	r3, r1, #2, #1
 8003a88:	8013      	strh	r3, [r2, #0]
	//6. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register)
	SPIx->SPI_CR1.Bit_Name.BR = Config->BAUD_R;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	795b      	ldrb	r3, [r3, #5]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	b2d9      	uxtb	r1, r3
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	8813      	ldrh	r3, [r2, #0]
 8003a98:	f361 03c5 	bfi	r3, r1, #3, #3
 8003a9c:	8013      	strh	r3, [r2, #0]

	// 7.check if the interrupt is enabled or not
	if(Config->IN_EN ==interrupt_EN){
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	7a1b      	ldrb	r3, [r3, #8]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d114      	bne.n	8003ad0 <MCAL_SPI_init+0x148>

		if(SPIx == SPI1)    	NVIC_ISER1 |=(1<< (SPI1_IRQ-32));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a12      	ldr	r2, [pc, #72]	; (8003af4 <MCAL_SPI_init+0x16c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d106      	bne.n	8003abc <MCAL_SPI_init+0x134>
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <MCAL_SPI_init+0x17c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <MCAL_SPI_init+0x17c>)
 8003ab4:	f043 0308 	orr.w	r3, r3, #8
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e009      	b.n	8003ad0 <MCAL_SPI_init+0x148>
		else if(SPIx == SPI2)   NVIC_ISER1 |=(1<< (SPI2_IRQ-32));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a10      	ldr	r2, [pc, #64]	; (8003b00 <MCAL_SPI_init+0x178>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d105      	bne.n	8003ad0 <MCAL_SPI_init+0x148>
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <MCAL_SPI_init+0x17c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <MCAL_SPI_init+0x17c>)
 8003aca:	f043 0310 	orr.w	r3, r3, #16
 8003ace:	6013      	str	r3, [r2, #0]
}
	// set the SPE bit
	 MCAL_SET_GPIO(SPIx);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f853 	bl	8003b7c <MCAL_SET_GPIO>
	 SPIx->SPI_CR1.Bit_Name.SPE =Config->SP_EN;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	b2d9      	uxtb	r1, r3
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	8813      	ldrh	r3, [r2, #0]
 8003ae4:	f361 1386 	bfi	r3, r1, #6, #1
 8003ae8:	8013      	strh	r3, [r2, #0]




}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40013000 	.word	0x40013000
 8003af8:	20004200 	.word	0x20004200
 8003afc:	40021000 	.word	0x40021000
 8003b00:	40003800 	.word	0x40003800
 8003b04:	e000e104 	.word	0xe000e104

08003b08 <MCAL_SPI_SendData>:
	if(SPIx == SPI1)   {	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));	RCC->APB2RSTR |=(1<<12); }
	else if(SPIx == SPI2) {NVIC_ICER1 |=(1<< (SPI2_IRQ-32));	RCC->APB1RSTR |=(1<<14); }
}


uint8_t MCAL_SPI_SendData(SPI_Reg *SPIx,uint8_t data){
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
	SPI_Config_t *L_P_config_t=NULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =&G_P_Config_t[0];
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <MCAL_SPI_SendData+0x64>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d102      	bne.n	8003b26 <MCAL_SPI_SendData+0x1e>
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <MCAL_SPI_SendData+0x68>)
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	e005      	b.n	8003b32 <MCAL_SPI_SendData+0x2a>
	else if(SPIx == SPI2) L_P_config_t =&G_P_Config_t[1];
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <MCAL_SPI_SendData+0x6c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <MCAL_SPI_SendData+0x2a>
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <MCAL_SPI_SendData+0x70>)
 8003b30:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	7a1b      	ldrb	r3, [r3, #8]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d105      	bne.n	8003b46 <MCAL_SPI_SendData+0x3e>
		SPIx->SPI_CR2.Bit_Name.TXEIE = 1;
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	7913      	ldrb	r3, [r2, #4]
 8003b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b42:	7113      	strb	r3, [r2, #4]
 8003b44:	e007      	b.n	8003b56 <MCAL_SPI_SendData+0x4e>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.TXE);
 8003b46:	bf00      	nop
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f8      	beq.n	8003b48 <MCAL_SPI_SendData+0x40>
	}
	SPIx->DR_reg.ALL_REG=(uint8_t)data;
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	60da      	str	r2, [r3, #12]

	return SPIx->DR_reg.ALL_REG;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	b2db      	uxtb	r3, r3

}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40013000 	.word	0x40013000
 8003b70:	20004200 	.word	0x20004200
 8003b74:	40003800 	.word	0x40003800
 8003b78:	20004210 	.word	0x20004210

08003b7c <MCAL_SET_GPIO>:
	(*data)=(SPIx->DR_reg.ALL_REG &0xFF);


}

void MCAL_SET_GPIO(SPI_Reg *SPIx){
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b096      	sub	sp, #88	; 0x58
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 8003b84:	2300      	movs	r3, #0
 8003b86:	657b      	str	r3, [r7, #84]	; 0x54
	PIN_config SPI_PIN_CONFIG;
	if(SPIx == SPI1) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a6c      	ldr	r2, [pc, #432]	; (8003d3c <MCAL_SET_GPIO+0x1c0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d169      	bne.n	8003c64 <MCAL_SET_GPIO+0xe8>
		L_P_config_t =&G_P_Config_t[0];
 8003b90:	4b6b      	ldr	r3, [pc, #428]	; (8003d40 <MCAL_SET_GPIO+0x1c4>)
 8003b92:	657b      	str	r3, [r7, #84]	; 0x54
		RCC->APB2ENR|=(1<<2); // ENABLE CLOCK FOR PROTA
 8003b94:	4b6b      	ldr	r3, [pc, #428]	; (8003d44 <MCAL_SET_GPIO+0x1c8>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4a6a      	ldr	r2, [pc, #424]	; (8003d44 <MCAL_SET_GPIO+0x1c8>)
 8003b9a:	f043 0304 	orr.w	r3, r3, #4
 8003b9e:	6193      	str	r3, [r2, #24]
		//PA4 SPI1_NSS
		if(L_P_config_t ->NSS_SELC ==SW){ SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_PP,SPEED_10};  		SPI1->SPI_CR1.Bit_Name.SSI=1;}//Not used. Can be used as a GPIO
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba2:	791b      	ldrb	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d108      	bne.n	8003bba <MCAL_SET_GPIO+0x3e>
 8003ba8:	4b67      	ldr	r3, [pc, #412]	; (8003d48 <MCAL_SET_GPIO+0x1cc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	653b      	str	r3, [r7, #80]	; 0x50
 8003bae:	4a63      	ldr	r2, [pc, #396]	; (8003d3c <MCAL_SET_GPIO+0x1c0>)
 8003bb0:	8813      	ldrh	r3, [r2, #0]
 8003bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb6:	8013      	strh	r3, [r2, #0]
 8003bb8:	e00e      	b.n	8003bd8 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8003bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbc:	791b      	ldrb	r3, [r3, #4]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d103      	bne.n	8003bca <MCAL_SET_GPIO+0x4e>
 8003bc2:	4b62      	ldr	r3, [pc, #392]	; (8003d4c <MCAL_SET_GPIO+0x1d0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	653b      	str	r3, [r7, #80]	; 0x50
 8003bc8:	e006      	b.n	8003bd8 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_4,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8003bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bcc:	791b      	ldrb	r3, [r3, #4]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d102      	bne.n	8003bd8 <MCAL_SET_GPIO+0x5c>
 8003bd2:	4b5f      	ldr	r3, [pc, #380]	; (8003d50 <MCAL_SET_GPIO+0x1d4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003bd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003bdc:	4619      	mov	r1, r3
 8003bde:	485d      	ldr	r0, [pc, #372]	; (8003d54 <MCAL_SET_GPIO+0x1d8>)
 8003be0:	f7ff f8ba 	bl	8002d58 <MCAL_GPIO_init>
		//PA5 SPI1_SCK
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_5,OUTPUT_AF_PP,SPEED_10};
 8003be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d103      	bne.n	8003bf4 <MCAL_SET_GPIO+0x78>
 8003bec:	4b5a      	ldr	r3, [pc, #360]	; (8003d58 <MCAL_SET_GPIO+0x1dc>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8003bf2:	e006      	b.n	8003c02 <MCAL_SET_GPIO+0x86>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_5,INPUT_FI,0};
 8003bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d102      	bne.n	8003c02 <MCAL_SET_GPIO+0x86>
 8003bfc:	4b57      	ldr	r3, [pc, #348]	; (8003d5c <MCAL_SET_GPIO+0x1e0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003c02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c06:	4619      	mov	r1, r3
 8003c08:	4852      	ldr	r0, [pc, #328]	; (8003d54 <MCAL_SET_GPIO+0x1d8>)
 8003c0a:	f7ff f8a5 	bl	8002d58 <MCAL_GPIO_init>
		//PA6 SPI1_MISO
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_6,INPUT_FI,0};
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d103      	bne.n	8003c1e <MCAL_SET_GPIO+0xa2>
 8003c16:	4b52      	ldr	r3, [pc, #328]	; (8003d60 <MCAL_SET_GPIO+0x1e4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c1c:	e006      	b.n	8003c2c <MCAL_SET_GPIO+0xb0>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_6,OUTPUT_AF_PP,SPEED_10};
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <MCAL_SET_GPIO+0xb0>
 8003c26:	4b4f      	ldr	r3, [pc, #316]	; (8003d64 <MCAL_SET_GPIO+0x1e8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003c2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c30:	4619      	mov	r1, r3
 8003c32:	4848      	ldr	r0, [pc, #288]	; (8003d54 <MCAL_SET_GPIO+0x1d8>)
 8003c34:	f7ff f890 	bl	8002d58 <MCAL_GPIO_init>
		//PA7 SPI1_MOSI
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_7,OUTPUT_AF_PP,SPEED_10};
 8003c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d103      	bne.n	8003c48 <MCAL_SET_GPIO+0xcc>
 8003c40:	4b49      	ldr	r3, [pc, #292]	; (8003d68 <MCAL_SET_GPIO+0x1ec>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	653b      	str	r3, [r7, #80]	; 0x50
 8003c46:	e006      	b.n	8003c56 <MCAL_SET_GPIO+0xda>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_7,INPUT_FI,0};
 8003c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4a:	785b      	ldrb	r3, [r3, #1]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <MCAL_SET_GPIO+0xda>
 8003c50:	4b46      	ldr	r3, [pc, #280]	; (8003d6c <MCAL_SET_GPIO+0x1f0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003c56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	483d      	ldr	r0, [pc, #244]	; (8003d54 <MCAL_SET_GPIO+0x1d8>)
 8003c5e:	f7ff f87b 	bl	8002d58 <MCAL_GPIO_init>
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
	}



}
 8003c62:	e067      	b.n	8003d34 <MCAL_SET_GPIO+0x1b8>
	else if(SPIx == SPI2){
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a42      	ldr	r2, [pc, #264]	; (8003d70 <MCAL_SET_GPIO+0x1f4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d163      	bne.n	8003d34 <MCAL_SET_GPIO+0x1b8>
		L_P_config_t =&G_P_Config_t[1];
 8003c6c:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <MCAL_SET_GPIO+0x1f8>)
 8003c6e:	657b      	str	r3, [r7, #84]	; 0x54
		RCC->APB2ENR|=(1<<3); // ENABLE CLOCK FOR PROTA
 8003c70:	4b34      	ldr	r3, [pc, #208]	; (8003d44 <MCAL_SET_GPIO+0x1c8>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4a33      	ldr	r2, [pc, #204]	; (8003d44 <MCAL_SET_GPIO+0x1c8>)
 8003c76:	f043 0308 	orr.w	r3, r3, #8
 8003c7a:	6193      	str	r3, [r2, #24]
		if(L_P_config_t ->NSS_SELC ==SW) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Not used. Can be used as a GPIO
 8003c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7e:	791b      	ldrb	r3, [r3, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <MCAL_SET_GPIO+0x110>
 8003c84:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <MCAL_SET_GPIO+0x1fc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	653b      	str	r3, [r7, #80]	; 0x50
 8003c8a:	e00e      	b.n	8003caa <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8003c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c8e:	791b      	ldrb	r3, [r3, #4]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d103      	bne.n	8003c9c <MCAL_SET_GPIO+0x120>
 8003c94:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <MCAL_SET_GPIO+0x1fc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	653b      	str	r3, [r7, #80]	; 0x50
 8003c9a:	e006      	b.n	8003caa <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_12,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9e:	791b      	ldrb	r3, [r3, #4]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d102      	bne.n	8003caa <MCAL_SET_GPIO+0x12e>
 8003ca4:	4b35      	ldr	r3, [pc, #212]	; (8003d7c <MCAL_SET_GPIO+0x200>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003caa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4828      	ldr	r0, [pc, #160]	; (8003d54 <MCAL_SET_GPIO+0x1d8>)
 8003cb2:	f7ff f851 	bl	8002d58 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_13,OUTPUT_AF_PP,SPEED_10};
 8003cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cb8:	785b      	ldrb	r3, [r3, #1]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d103      	bne.n	8003cc6 <MCAL_SET_GPIO+0x14a>
 8003cbe:	4b30      	ldr	r3, [pc, #192]	; (8003d80 <MCAL_SET_GPIO+0x204>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc4:	e006      	b.n	8003cd4 <MCAL_SET_GPIO+0x158>
				else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_13,INPUT_FI,0};
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <MCAL_SET_GPIO+0x158>
 8003cce:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <MCAL_SET_GPIO+0x208>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	653b      	str	r3, [r7, #80]	; 0x50
				MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003cd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cd8:	4619      	mov	r1, r3
 8003cda:	481e      	ldr	r0, [pc, #120]	; (8003d54 <MCAL_SET_GPIO+0x1d8>)
 8003cdc:	f7ff f83c 	bl	8002d58 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_14,INPUT_FI,0};
 8003ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce2:	785b      	ldrb	r3, [r3, #1]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d103      	bne.n	8003cf0 <MCAL_SET_GPIO+0x174>
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <MCAL_SET_GPIO+0x20c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	653b      	str	r3, [r7, #80]	; 0x50
 8003cee:	e006      	b.n	8003cfe <MCAL_SET_GPIO+0x182>
					else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_14,OUTPUT_AF_PP,SPEED_10};
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <MCAL_SET_GPIO+0x182>
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <MCAL_SET_GPIO+0x210>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	653b      	str	r3, [r7, #80]	; 0x50
					MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003cfe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d02:	4619      	mov	r1, r3
 8003d04:	4813      	ldr	r0, [pc, #76]	; (8003d54 <MCAL_SET_GPIO+0x1d8>)
 8003d06:	f7ff f827 	bl	8002d58 <MCAL_GPIO_init>
					if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_15,OUTPUT_AF_PP,SPEED_10};
 8003d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d103      	bne.n	8003d1a <MCAL_SET_GPIO+0x19e>
 8003d12:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <MCAL_SET_GPIO+0x214>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	653b      	str	r3, [r7, #80]	; 0x50
 8003d18:	e006      	b.n	8003d28 <MCAL_SET_GPIO+0x1ac>
							else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_15,INPUT_FI,0};
 8003d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1c:	785b      	ldrb	r3, [r3, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <MCAL_SET_GPIO+0x1ac>
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <MCAL_SET_GPIO+0x218>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	653b      	str	r3, [r7, #80]	; 0x50
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003d28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4809      	ldr	r0, [pc, #36]	; (8003d54 <MCAL_SET_GPIO+0x1d8>)
 8003d30:	f7ff f812 	bl	8002d58 <MCAL_GPIO_init>
}
 8003d34:	bf00      	nop
 8003d36:	3758      	adds	r7, #88	; 0x58
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40013000 	.word	0x40013000
 8003d40:	20004200 	.word	0x20004200
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08005564 	.word	0x08005564
 8003d4c:	08005568 	.word	0x08005568
 8003d50:	0800556c 	.word	0x0800556c
 8003d54:	40010800 	.word	0x40010800
 8003d58:	08005570 	.word	0x08005570
 8003d5c:	08005574 	.word	0x08005574
 8003d60:	08005578 	.word	0x08005578
 8003d64:	0800557c 	.word	0x0800557c
 8003d68:	08005580 	.word	0x08005580
 8003d6c:	08005584 	.word	0x08005584
 8003d70:	40003800 	.word	0x40003800
 8003d74:	20004210 	.word	0x20004210
 8003d78:	08005588 	.word	0x08005588
 8003d7c:	0800558c 	.word	0x0800558c
 8003d80:	08005590 	.word	0x08005590
 8003d84:	08005594 	.word	0x08005594
 8003d88:	08005598 	.word	0x08005598
 8003d8c:	0800559c 	.word	0x0800559c
 8003d90:	080055a0 	.word	0x080055a0
 8003d94:	080055a4 	.word	0x080055a4

08003d98 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	4905      	ldr	r1, [pc, #20]	; (8003db8 <SPI1_IRQHandler+0x20>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f80c 	bl	8003dc0 <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <SPI1_IRQHandler+0x24>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	7938      	ldrb	r0, [r7, #4]
 8003dae:	4798      	blx	r3
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40013000 	.word	0x40013000
 8003dbc:	20004200 	.word	0x20004200

08003dc0 <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00f      	beq.n	8003df8 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	7813      	ldrb	r3, [r2, #0]
 8003ddc:	f36f 0300 	bfc	r3, #0, #1
 8003de0:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	7813      	ldrb	r3, [r2, #0]
 8003de6:	f043 0302 	orr.w	r3, r3, #2
 8003dea:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	7913      	ldrb	r3, [r2, #4]
 8003df0:	f36f 1386 	bfc	r3, #6, #1
 8003df4:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 8003df6:	e015      	b.n	8003e24 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00e      	beq.n	8003e24 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	7813      	ldrb	r3, [r2, #0]
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	7813      	ldrb	r3, [r2, #0]
 8003e14:	f36f 0341 	bfc	r3, #1, #1
 8003e18:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	7913      	ldrb	r3, [r2, #4]
 8003e1e:	f36f 13c7 	bfc	r3, #7, #1
 8003e22:	7113      	strb	r3, [r2, #4]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr
	...

08003e30 <MCAL_SET_TIMx_GPIO>:
#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;


void MCAL_SET_TIMx_GPIO(TIM1_8_REG* TIMx){
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	PIN_config pin={PIN_8,OUTPUT_AF_PP,SPEED_10};
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <MCAL_SET_TIMx_GPIO+0x24>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(GPIOA, &pin);
 8003e3e:	f107 030c 	add.w	r3, r7, #12
 8003e42:	4619      	mov	r1, r3
 8003e44:	4804      	ldr	r0, [pc, #16]	; (8003e58 <MCAL_SET_TIMx_GPIO+0x28>)
 8003e46:	f7fe ff87 	bl	8002d58 <MCAL_GPIO_init>
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	080055a8 	.word	0x080055a8
 8003e58:	40010800 	.word	0x40010800

08003e5c <TIMER_1_8_start>:
void TIMER_1_8_start(TIM1_8_REG* TIMx,TIMERx_type* Sitting){
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
	g_Sitting=(* Sitting);
 8003e66:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <TIMER_1_8_start+0x100>)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	g_TIMX=TIMx;
 8003e72:	4a3b      	ldr	r2, [pc, #236]	; (8003f60 <TIMER_1_8_start+0x104>)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6013      	str	r3, [r2, #0]
	if(TIMx== TIM1) RCC->APB2ENR|=(1<<11);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a3a      	ldr	r2, [pc, #232]	; (8003f64 <TIMER_1_8_start+0x108>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d105      	bne.n	8003e8c <TIMER_1_8_start+0x30>
 8003e80:	4b39      	ldr	r3, [pc, #228]	; (8003f68 <TIMER_1_8_start+0x10c>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	4a38      	ldr	r2, [pc, #224]	; (8003f68 <TIMER_1_8_start+0x10c>)
 8003e86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e8a:	6193      	str	r3, [r2, #24]



	// 2.select the pre vale
	TIMx->PSC=Sitting->TIME_PSC;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->CR1.BIT_NAME.ARPE=1;
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6813      	ldr	r3, [r2, #0]
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9e:	6013      	str	r3, [r2, #0]

	TIMx->ARR=Sitting->TIME_ARR;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	885b      	ldrh	r3, [r3, #2]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	889b      	ldrh	r3, [r3, #4]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
	//1.Select the mode CMS[1:0]
	switch(Sitting->mode){
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	7a5b      	ldrb	r3, [r3, #9]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d01c      	beq.n	8003ef6 <TIMER_1_8_start+0x9a>
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	dc20      	bgt.n	8003f02 <TIMER_1_8_start+0xa6>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <TIMER_1_8_start+0x6e>
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d00b      	beq.n	8003ee0 <TIMER_1_8_start+0x84>
 8003ec8:	e01b      	b.n	8003f02 <TIMER_1_8_start+0xa6>
	case TIM1_Up:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6813      	ldr	r3, [r2, #0]
 8003ece:	f36f 1346 	bfc	r3, #5, #2
 8003ed2:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	f36f 1304 	bfc	r3, #4, #1
 8003edc:	6013      	str	r3, [r2, #0]
		break;
 8003ede:	e013      	b.n	8003f08 <TIMER_1_8_start+0xac>
	case TIM1_DOWN:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	f36f 1346 	bfc	r3, #5, #2
 8003ee8:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6813      	ldr	r3, [r2, #0]
 8003eee:	f043 0310 	orr.w	r3, r3, #16
 8003ef2:	6013      	str	r3, [r2, #0]
		break;
 8003ef4:	e008      	b.n	8003f08 <TIMER_1_8_start+0xac>
	case TIM1_Up_Down:
		TIMx->CR1.BIT_NAME.CMS=0b11;
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6813      	ldr	r3, [r2, #0]
 8003efa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003efe:	6013      	str	r3, [r2, #0]
		/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
		break;
 8003f00:	e002      	b.n	8003f08 <TIMER_1_8_start+0xac>
	default:
		ERROR_HANDLER();
 8003f02:	f7fe fa8d 	bl	8002420 <ERROR_HANDLER>
		break;
 8003f06:	bf00      	nop
	}
	MCAL_SET_TIMx_GPIO(TIMx);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff91 	bl	8003e30 <MCAL_SET_TIMx_GPIO>
	TIMx->CR1.BIT_NAME.CEN=1;
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6813      	ldr	r3, [r2, #0]
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6013      	str	r3, [r2, #0]

	if(Sitting->INT_EN_DIS==TIM1_INT_EN){
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	7a1b      	ldrb	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <TIMER_1_8_start+0xdc>

		TIMx->DIER.BIT_NAME.UIE=1;
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68d3      	ldr	r3, [r2, #12]
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	60d3      	str	r3, [r2, #12]
		NVIC_ISER0|=(1<<25);
 8003f2a:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <TIMER_1_8_start+0x110>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a0f      	ldr	r2, [pc, #60]	; (8003f6c <TIMER_1_8_start+0x110>)
 8003f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f34:	6013      	str	r3, [r2, #0]
	}else{
 		while(!TIMx->SR.BIT_NAME.UIF);
		TIMx->SR.BIT_NAME.UIF=0;
	}

}
 8003f36:	e00c      	b.n	8003f52 <TIMER_1_8_start+0xf6>
 		while(!TIMx->SR.BIT_NAME.UIF);
 8003f38:	bf00      	nop
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f8      	beq.n	8003f3a <TIMER_1_8_start+0xde>
		TIMx->SR.BIT_NAME.UIF=0;
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6913      	ldr	r3, [r2, #16]
 8003f4c:	f36f 0300 	bfc	r3, #0, #1
 8003f50:	6113      	str	r3, [r2, #16]
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd90      	pop	{r4, r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20004220 	.word	0x20004220
 8003f60:	20004230 	.word	0x20004230
 8003f64:	40012c00 	.word	0x40012c00
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	e000e100 	.word	0xe000e100

08003f70 <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <TIM1_UP_IRQHandler+0x1c>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8003f7a:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <TIM1_UP_IRQHandler+0x20>)
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	6913      	ldr	r3, [r2, #16]
 8003f80:	f36f 0300 	bfc	r3, #0, #1
 8003f84:	6113      	str	r3, [r2, #16]

}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20004220 	.word	0x20004220
 8003f90:	20004230 	.word	0x20004230

08003f94 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <TIM1_CC_IRQHandler+0x1c>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <TIM1_CC_IRQHandler+0x20>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	6913      	ldr	r3, [r2, #16]
 8003fa4:	f36f 0341 	bfc	r3, #1, #1
 8003fa8:	6113      	str	r3, [r2, #16]

}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20004220 	.word	0x20004220
 8003fb4:	20004230 	.word	0x20004230

08003fb8 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <TIM1_BRK_IRQHandler+0x1c>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <TIM1_BRK_IRQHandler+0x20>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	6913      	ldr	r3, [r2, #16]
 8003fc8:	f36f 0300 	bfc	r3, #0, #1
 8003fcc:	6113      	str	r3, [r2, #16]

}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20004220 	.word	0x20004220
 8003fd8:	20004230 	.word	0x20004230

08003fdc <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <TIM1_TRG_COM_IRQHandler+0x1c>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <TIM1_TRG_COM_IRQHandler+0x20>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	6913      	ldr	r3, [r2, #16]
 8003fec:	f36f 0300 	bfc	r3, #0, #1
 8003ff0:	6113      	str	r3, [r2, #16]

}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20004220 	.word	0x20004220
 8003ffc:	20004230 	.word	0x20004230

08004000 <_TIM1_delay_us>:

void _TIM1_delay_us(uint16_t delay){
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	4603      	mov	r3, r0
 8004008:	80fb      	strh	r3, [r7, #6]
	TIMERx_type l_t_delay={((MCAL_GET_PCLCK2()/1000000)-1),((delay)-1),0,0,TIM1_INT_DIS,TIM1_Up,NULL};
 800400a:	f7ff fca9 	bl	8003960 <MCAL_GET_PCLCK2>
 800400e:	4603      	mov	r3, r0
 8004010:	4a0f      	ldr	r2, [pc, #60]	; (8004050 <_TIM1_delay_us+0x50>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	0c9b      	lsrs	r3, r3, #18
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29b      	uxth	r3, r3
 800401e:	813b      	strh	r3, [r7, #8]
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	3b01      	subs	r3, #1
 8004024:	b29b      	uxth	r3, r3
 8004026:	817b      	strh	r3, [r7, #10]
 8004028:	2300      	movs	r3, #0
 800402a:	81bb      	strh	r3, [r7, #12]
 800402c:	2300      	movs	r3, #0
 800402e:	81fb      	strh	r3, [r7, #14]
 8004030:	2301      	movs	r3, #1
 8004032:	743b      	strb	r3, [r7, #16]
 8004034:	2300      	movs	r3, #0
 8004036:	747b      	strb	r3, [r7, #17]
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
	TIMER_1_8_start(TIM1,&l_t_delay);
 800403c:	f107 0308 	add.w	r3, r7, #8
 8004040:	4619      	mov	r1, r3
 8004042:	4804      	ldr	r0, [pc, #16]	; (8004054 <_TIM1_delay_us+0x54>)
 8004044:	f7ff ff0a 	bl	8003e5c <TIMER_1_8_start>

}
 8004048:	bf00      	nop
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	431bde83 	.word	0x431bde83
 8004054:	40012c00 	.word	0x40012c00

08004058 <_TIM1_delay_ms>:

void _TIM1_delay_ms(uint16_t delay){
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	80fb      	strh	r3, [r7, #6]


		for(uint32_t i=0;i<delay;i++)
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	e006      	b.n	8004076 <_TIM1_delay_ms+0x1e>
			_TIM1_delay_us(1000);
 8004068:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800406c:	f7ff ffc8 	bl	8004000 <_TIM1_delay_us>
		for(uint32_t i=0;i<delay;i++)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	429a      	cmp	r2, r3
 800407c:	d3f4      	bcc.n	8004068 <_TIM1_delay_ms+0x10>

}
 800407e:	bf00      	nop
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8004088:	b5b0      	push	{r4, r5, r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a8d      	ldr	r2, [pc, #564]	; (80042cc <MCAL_USART_init+0x244>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10c      	bne.n	80040b4 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 800409a:	4a8d      	ldr	r2, [pc, #564]	; (80042d0 <MCAL_USART_init+0x248>)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	4614      	mov	r4, r2
 80040a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 80040a6:	4b8b      	ldr	r3, [pc, #556]	; (80042d4 <MCAL_USART_init+0x24c>)
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	4a8a      	ldr	r2, [pc, #552]	; (80042d4 <MCAL_USART_init+0x24c>)
 80040ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040b0:	6193      	str	r3, [r2, #24]
 80040b2:	e024      	b.n	80040fe <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a88      	ldr	r2, [pc, #544]	; (80042d8 <MCAL_USART_init+0x250>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10e      	bne.n	80040da <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 80040bc:	4b84      	ldr	r3, [pc, #528]	; (80042d0 <MCAL_USART_init+0x248>)
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	f103 0410 	add.w	r4, r3, #16
 80040c4:	4613      	mov	r3, r2
 80040c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 80040cc:	4b81      	ldr	r3, [pc, #516]	; (80042d4 <MCAL_USART_init+0x24c>)
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	4a80      	ldr	r2, [pc, #512]	; (80042d4 <MCAL_USART_init+0x24c>)
 80040d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d6:	61d3      	str	r3, [r2, #28]
 80040d8:	e011      	b.n	80040fe <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a7f      	ldr	r2, [pc, #508]	; (80042dc <MCAL_USART_init+0x254>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10d      	bne.n	80040fe <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 80040e2:	4b7b      	ldr	r3, [pc, #492]	; (80042d0 <MCAL_USART_init+0x248>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	f103 0420 	add.w	r4, r3, #32
 80040ea:	4613      	mov	r3, r2
 80040ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 80040f2:	4b78      	ldr	r3, [pc, #480]	; (80042d4 <MCAL_USART_init+0x24c>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	4a77      	ldr	r2, [pc, #476]	; (80042d4 <MCAL_USART_init+0x24c>)
 80040f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040fc:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	7912      	ldrb	r2, [r2, #4]
 8004112:	0312      	lsls	r2, r2, #12
 8004114:	431a      	orrs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	79d2      	ldrb	r2, [r2, #7]
 8004122:	0312      	lsls	r2, r2, #12
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	7a5b      	ldrb	r3, [r3, #9]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f043 0208 	orr.w	r2, r3, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f043 0204 	orr.w	r2, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	7a1b      	ldrb	r3, [r3, #8]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d826      	bhi.n	80041a0 <MCAL_USART_init+0x118>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <MCAL_USART_init+0xd0>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	08004169 	.word	0x08004169
 800415c:	08004177 	.word	0x08004177
 8004160:	08004185 	.word	0x08004185
 8004164:	08004193 	.word	0x08004193
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	615a      	str	r2, [r3, #20]
		break;
 8004174:	e014      	b.n	80041a0 <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	615a      	str	r2, [r3, #20]
		break;
 8004182:	e00d      	b.n	80041a0 <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	615a      	str	r2, [r3, #20]
		break;
 8004190:	e006      	b.n	80041a0 <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	615a      	str	r2, [r3, #20]
		break;
 800419e:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	7952      	ldrb	r2, [r2, #5]
 80041a8:	0252      	lsls	r2, r2, #9
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	799b      	ldrb	r3, [r3, #6]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d125      	bne.n	8004204 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a44      	ldr	r2, [pc, #272]	; (80042cc <MCAL_USART_init+0x244>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d106      	bne.n	80041ce <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 80041c0:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <MCAL_USART_init+0x258>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a46      	ldr	r2, [pc, #280]	; (80042e0 <MCAL_USART_init+0x258>)
 80041c6:	f043 0320 	orr.w	r3, r3, #32
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e014      	b.n	80041f8 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a41      	ldr	r2, [pc, #260]	; (80042d8 <MCAL_USART_init+0x250>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d106      	bne.n	80041e4 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 80041d6:	4b42      	ldr	r3, [pc, #264]	; (80042e0 <MCAL_USART_init+0x258>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a41      	ldr	r2, [pc, #260]	; (80042e0 <MCAL_USART_init+0x258>)
 80041dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e009      	b.n	80041f8 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3d      	ldr	r2, [pc, #244]	; (80042dc <MCAL_USART_init+0x254>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d105      	bne.n	80041f8 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 80041ec:	4b3c      	ldr	r3, [pc, #240]	; (80042e0 <MCAL_USART_init+0x258>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a3b      	ldr	r2, [pc, #236]	; (80042e0 <MCAL_USART_init+0x258>)
 80041f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f6:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f043 0220 	orr.w	r2, r3, #32
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a31      	ldr	r2, [pc, #196]	; (80042cc <MCAL_USART_init+0x244>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d12d      	bne.n	8004268 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 800420c:	f7ff fba8 	bl	8003960 <MCAL_GET_PCLCK2>
 8004210:	4602      	mov	r2, r0
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	011c      	lsls	r4, r3, #4
 800421e:	f7ff fb9f 	bl	8003960 <MCAL_GET_PCLCK2>
 8004222:	4602      	mov	r2, r0
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	009a      	lsls	r2, r3, #2
 800422c:	441a      	add	r2, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	fbb2 f5f3 	udiv	r5, r2, r3
 8004238:	f7ff fb92 	bl	8003960 <MCAL_GET_PCLCK2>
 800423c:	4602      	mov	r2, r0
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	2264      	movs	r2, #100	; 0x64
 800424a:	fb02 f303 	mul.w	r3, r2, r3
 800424e:	1aeb      	subs	r3, r5, r3
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4a24      	ldr	r2, [pc, #144]	; (80042e4 <MCAL_USART_init+0x25c>)
 8004254:	fba2 2303 	umull	r2, r3, r2, r3
 8004258:	095b      	lsrs	r3, r3, #5
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	ea44 0203 	orr.w	r2, r4, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	609a      	str	r2, [r3, #8]
 8004266:	e070      	b.n	800434a <MCAL_USART_init+0x2c2>
			}else if(USARTx==USART2){
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <MCAL_USART_init+0x250>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d13b      	bne.n	80042e8 <MCAL_USART_init+0x260>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 8004270:	f7ff fb62 	bl	8003938 <MCAL_GET_PCLCK1>
 8004274:	4602      	mov	r2, r0
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	011c      	lsls	r4, r3, #4
 8004282:	f7ff fb59 	bl	8003938 <MCAL_GET_PCLCK1>
 8004286:	4602      	mov	r2, r0
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009a      	lsls	r2, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fbb2 f5f3 	udiv	r5, r2, r3
 800429c:	f7ff fb4c 	bl	8003938 <MCAL_GET_PCLCK1>
 80042a0:	4602      	mov	r2, r0
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ac:	2264      	movs	r2, #100	; 0x64
 80042ae:	fb02 f303 	mul.w	r3, r2, r3
 80042b2:	1aeb      	subs	r3, r5, r3
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	4a0b      	ldr	r2, [pc, #44]	; (80042e4 <MCAL_USART_init+0x25c>)
 80042b8:	fba2 2303 	umull	r2, r3, r2, r3
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	ea44 0203 	orr.w	r2, r4, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	609a      	str	r2, [r3, #8]
 80042ca:	e03e      	b.n	800434a <MCAL_USART_init+0x2c2>
 80042cc:	40013800 	.word	0x40013800
 80042d0:	20004234 	.word	0x20004234
 80042d4:	40021000 	.word	0x40021000
 80042d8:	40004400 	.word	0x40004400
 80042dc:	40004800 	.word	0x40004800
 80042e0:	e000e104 	.word	0xe000e104
 80042e4:	51eb851f 	.word	0x51eb851f

		}else if(USARTx==USART3){
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <MCAL_USART_init+0x2d0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d12c      	bne.n	800434a <MCAL_USART_init+0x2c2>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 80042f0:	f7ff fb22 	bl	8003938 <MCAL_GET_PCLCK1>
 80042f4:	4602      	mov	r2, r0
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004300:	011c      	lsls	r4, r3, #4
 8004302:	f7ff fb19 	bl	8003938 <MCAL_GET_PCLCK1>
 8004306:	4602      	mov	r2, r0
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009a      	lsls	r2, r3, #2
 8004310:	441a      	add	r2, r3
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	fbb2 f5f3 	udiv	r5, r2, r3
 800431c:	f7ff fb0c 	bl	8003938 <MCAL_GET_PCLCK1>
 8004320:	4602      	mov	r2, r0
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	2264      	movs	r2, #100	; 0x64
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	1aeb      	subs	r3, r5, r3
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <MCAL_USART_init+0x2d4>)
 8004338:	fba2 2303 	umull	r2, r3, r2, r3
 800433c:	095b      	lsrs	r3, r3, #5
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	ea44 0203 	orr.w	r2, r4, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f892 	bl	8004474 <SET_GPIO>
	}
 8004350:	bf00      	nop
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bdb0      	pop	{r4, r5, r7, pc}
 8004358:	40004800 	.word	0x40004800
 800435c:	51eb851f 	.word	0x51eb851f

08004360 <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
//	USARTx->DR=0;
	if(USARTx==USART1){
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a15      	ldr	r2, [pc, #84]	; (80043c8 <MCAL_USART_SendData+0x68>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d102      	bne.n	800437e <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 8004378:	4b14      	ldr	r3, [pc, #80]	; (80043cc <MCAL_USART_SendData+0x6c>)
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	e00c      	b.n	8004398 <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a13      	ldr	r2, [pc, #76]	; (80043d0 <MCAL_USART_SendData+0x70>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d102      	bne.n	800438c <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 8004386:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <MCAL_USART_SendData+0x74>)
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e005      	b.n	8004398 <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <MCAL_USART_SendData+0x78>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 8004394:	4b11      	ldr	r3, [pc, #68]	; (80043dc <MCAL_USART_SendData+0x7c>)
 8004396:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 8004398:	bf00      	nop
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f9      	beq.n	800439a <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	791b      	ldrb	r3, [r3, #4]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d103      	bne.n	80043b6 <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 80043b4:	e002      	b.n	80043bc <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	605a      	str	r2, [r3, #4]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	40013800 	.word	0x40013800
 80043cc:	20004234 	.word	0x20004234
 80043d0:	40004400 	.word	0x40004400
 80043d4:	20004244 	.word	0x20004244
 80043d8:	40004800 	.word	0x40004800
 80043dc:	20004254 	.word	0x20004254

080043e0 <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a1b      	ldr	r2, [pc, #108]	; (800445c <MCAL_USART_ReciveData+0x7c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d102      	bne.n	80043fa <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 80043f4:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <MCAL_USART_ReciveData+0x80>)
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e00c      	b.n	8004414 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a19      	ldr	r2, [pc, #100]	; (8004464 <MCAL_USART_ReciveData+0x84>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d102      	bne.n	8004408 <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 8004402:	4b19      	ldr	r3, [pc, #100]	; (8004468 <MCAL_USART_ReciveData+0x88>)
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e005      	b.n	8004414 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a18      	ldr	r2, [pc, #96]	; (800446c <MCAL_USART_ReciveData+0x8c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 8004410:	4b17      	ldr	r3, [pc, #92]	; (8004470 <MCAL_USART_ReciveData+0x90>)
 8004412:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	799b      	ldrb	r3, [r3, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d107      	bne.n	800442c <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 800441c:	bf00      	nop
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f9      	beq.n	800441e <MCAL_USART_ReciveData+0x3e>
 800442a:	e002      	b.n	8004432 <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	799b      	ldrb	r3, [r3, #6]
 8004430:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	795b      	ldrb	r3, [r3, #5]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d104      	bne.n	8004444 <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	b29b      	uxth	r3, r3
 8004442:	e006      	b.n	8004452 <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	b29b      	uxth	r3, r3
 800444c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004450:	b29b      	uxth	r3, r3

		}

}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40013800 	.word	0x40013800
 8004460:	20004234 	.word	0x20004234
 8004464:	40004400 	.word	0x40004400
 8004468:	20004244 	.word	0x20004244
 800446c:	40004800 	.word	0x40004800
 8004470:	20004254 	.word	0x20004254

08004474 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 800447c:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <SET_GPIO+0xbc>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	61fb      	str	r3, [r7, #28]
	if(USARTx==USART1){
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <SET_GPIO+0xc0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d115      	bne.n	80044b6 <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <SET_GPIO+0xc4>)
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <SET_GPIO+0xc4>)
 8004490:	f043 0304 	orr.w	r3, r3, #4
 8004494:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8004496:	f107 031c 	add.w	r3, r7, #28
 800449a:	4619      	mov	r1, r3
 800449c:	4827      	ldr	r0, [pc, #156]	; (800453c <SET_GPIO+0xc8>)
 800449e:	f7fe fc5b 	bl	8002d58 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80044a2:	4b27      	ldr	r3, [pc, #156]	; (8004540 <SET_GPIO+0xcc>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80044a8:	f107 031c 	add.w	r3, r7, #28
 80044ac:	4619      	mov	r1, r3
 80044ae:	4823      	ldr	r0, [pc, #140]	; (800453c <SET_GPIO+0xc8>)
 80044b0:	f7fe fc52 	bl	8002d58 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 80044b4:	e038      	b.n	8004528 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a22      	ldr	r2, [pc, #136]	; (8004544 <SET_GPIO+0xd0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d118      	bne.n	80044f0 <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 80044be:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <SET_GPIO+0xc4>)
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <SET_GPIO+0xc4>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 80044ca:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <SET_GPIO+0xd4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80044d0:	f107 031c 	add.w	r3, r7, #28
 80044d4:	4619      	mov	r1, r3
 80044d6:	4819      	ldr	r0, [pc, #100]	; (800453c <SET_GPIO+0xc8>)
 80044d8:	f7fe fc3e 	bl	8002d58 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 80044dc:	4b1b      	ldr	r3, [pc, #108]	; (800454c <SET_GPIO+0xd8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 80044e2:	f107 031c 	add.w	r3, r7, #28
 80044e6:	4619      	mov	r1, r3
 80044e8:	4814      	ldr	r0, [pc, #80]	; (800453c <SET_GPIO+0xc8>)
 80044ea:	f7fe fc35 	bl	8002d58 <MCAL_GPIO_init>
}
 80044ee:	e01b      	b.n	8004528 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a17      	ldr	r2, [pc, #92]	; (8004550 <SET_GPIO+0xdc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d117      	bne.n	8004528 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 80044f8:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <SET_GPIO+0xc4>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <SET_GPIO+0xc4>)
 80044fe:	f043 0308 	orr.w	r3, r3, #8
 8004502:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <SET_GPIO+0xe0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 800450a:	f107 031c 	add.w	r3, r7, #28
 800450e:	4619      	mov	r1, r3
 8004510:	4811      	ldr	r0, [pc, #68]	; (8004558 <SET_GPIO+0xe4>)
 8004512:	f7fe fc21 	bl	8002d58 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8004516:	4b11      	ldr	r3, [pc, #68]	; (800455c <SET_GPIO+0xe8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 800451c:	f107 031c 	add.w	r3, r7, #28
 8004520:	4619      	mov	r1, r3
 8004522:	480d      	ldr	r0, [pc, #52]	; (8004558 <SET_GPIO+0xe4>)
 8004524:	f7fe fc18 	bl	8002d58 <MCAL_GPIO_init>
}
 8004528:	bf00      	nop
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	080055ac 	.word	0x080055ac
 8004534:	40013800 	.word	0x40013800
 8004538:	40021000 	.word	0x40021000
 800453c:	40010800 	.word	0x40010800
 8004540:	080055b0 	.word	0x080055b0
 8004544:	40004400 	.word	0x40004400
 8004548:	080055b4 	.word	0x080055b4
 800454c:	080055b8 	.word	0x080055b8
 8004550:	40004800 	.word	0x40004800
 8004554:	080055bc 	.word	0x080055bc
 8004558:	40010c00 	.word	0x40010c00
 800455c:	080055c0 	.word	0x080055c0

08004560 <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
	if( UART_STATUS_CHECK(USART1)){
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <USART1_IRQHandler+0x1c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <USART1_IRQHandler+0x16>
		G_P_config[0].P_Call_Back();
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <USART1_IRQHandler+0x20>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4798      	blx	r3

	}
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40013800 	.word	0x40013800
 8004580:	20004234 	.word	0x20004234

08004584 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
	if( UART_STATUS_CHECK(USART2)){
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <USART2_IRQHandler+0x1c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <USART2_IRQHandler+0x16>
		G_P_config[1].P_Call_Back();
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <USART2_IRQHandler+0x20>)
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	4798      	blx	r3
	}
}void USART3_IRQHandler(void){
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40004400 	.word	0x40004400
 80045a4:	20004234 	.word	0x20004234

080045a8 <USART3_IRQHandler>:
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
	if( UART_STATUS_CHECK(USART3)){
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <USART3_IRQHandler+0x1c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <USART3_IRQHandler+0x16>
		G_P_config[2].P_Call_Back();
 80045b8:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <USART3_IRQHandler+0x20>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4798      	blx	r3
	}
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	40004800 	.word	0x40004800
 80045c8:	20004234 	.word	0x20004234

080045cc <Error_Handller>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Error_Handller(){
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
	while(1);
 80045d0:	e7fe      	b.n	80045d0 <Error_Handller+0x4>
	...

080045d4 <Sys_Clk_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Sys_Clk_init(){
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
	// system speed 36Mhz
	RCC->CFGR |=(0b0101 <<18); //1111: PLL input clock x 16
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <Sys_Clk_init+0x30>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a09      	ldr	r2, [pc, #36]	; (8004604 <Sys_Clk_init+0x30>)
 80045de:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 80045e2:	6053      	str	r3, [r2, #4]
	//	RCC->CFGR |=(0b100<<8); //100: HCLK divided by 2
	//	RCC->CFGR |=(1 <<16); //PLL entry clock source
	//	RCC->CR|=(1<<16); //HSE clock enable

	RCC->CR|=(1<<24); //PLL ON
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <Sys_Clk_init+0x30>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a06      	ldr	r2, [pc, #24]	; (8004604 <Sys_Clk_init+0x30>)
 80045ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ee:	6013      	str	r3, [r2, #0]
	RCC->CFGR |=(0b10 <<0); //10: PLL selected as system clock
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <Sys_Clk_init+0x30>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a03      	ldr	r2, [pc, #12]	; (8004604 <Sys_Clk_init+0x30>)
 80045f6:	f043 0302 	orr.w	r3, r3, #2
 80045fa:	6053      	str	r3, [r2, #4]


}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	40021000 	.word	0x40021000

08004608 <HALL_EFFECT_TIMER_ENABLE>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void HALL_EFFECT_TIMER_ENABLE(){
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
	HALL_TIMER_EN ^=1;
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HALL_EFFECT_TIMER_ENABLE+0x1c>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f083 0301 	eor.w	r3, r3, #1
 8004614:	b2da      	uxtb	r2, r3
 8004616:	4b03      	ldr	r3, [pc, #12]	; (8004624 <HALL_EFFECT_TIMER_ENABLE+0x1c>)
 8004618:	701a      	strb	r2, [r3, #0]

}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20004264 	.word	0x20004264

08004628 <HALL_EFFECT_HANDLLER>:
 * @param [out] - Void
 * @retval -
 * Note- this fun called every rissing edege from hall effect sensor
 * and update the HALL_EFFECT_KM_H every 1sec and caluclate it from HALL_EFFECT_N_PULSES
 */
void HALL_EFFECT_HANDLLER(){
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
	if(HALL_TIMER_EN){
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HALL_EFFECT_HANDLLER+0x74>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HALL_EFFECT_HANDLLER+0x18>
		HALL_EFFECT_COUNTER++;
 8004634:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <HALL_EFFECT_HANDLLER+0x78>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <HALL_EFFECT_HANDLLER+0x78>)
 800463c:	6013      	str	r3, [r2, #0]
			_TIM1_delay_ms(1);
			HALL_EFFECT_COUNTER=0;
		}
	}

}
 800463e:	e02a      	b.n	8004696 <HALL_EFFECT_HANDLLER+0x6e>
		if(HALL_EFFECT_COUNTER){
 8004640:	4b17      	ldr	r3, [pc, #92]	; (80046a0 <HALL_EFFECT_HANDLLER+0x78>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d026      	beq.n	8004696 <HALL_EFFECT_HANDLLER+0x6e>
			HALL_EFFECT_N_PULSES=HALL_EFFECT_COUNTER;
 8004648:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <HALL_EFFECT_HANDLLER+0x78>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <HALL_EFFECT_HANDLLER+0x7c>)
 800464e:	6013      	str	r3, [r2, #0]
			HALL_EFFECT_RPS=((HALL_EFFECT_N_PULSES*HALL_EFFECT_TIME_CONVERSION)/HALL_EFFECT_REV_PER_PULSES);
 8004650:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HALL_EFFECT_HANDLLER+0x7c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	089b      	lsrs	r3, r3, #2
 8004656:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <HALL_EFFECT_HANDLLER+0x80>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	461a      	mov	r2, r3
 800465e:	4b13      	ldr	r3, [pc, #76]	; (80046ac <HALL_EFFECT_HANDLLER+0x84>)
 8004660:	601a      	str	r2, [r3, #0]
			HALL_EFFECT_RPM=HALL_EFFECT_RPS *60;
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HALL_EFFECT_HANDLLER+0x84>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	461a      	mov	r2, r3
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <HALL_EFFECT_HANDLLER+0x88>)
 8004672:	601a      	str	r2, [r3, #0]
			HALL_EFFECT_KM_H=((HALL_EFFECT_RPM*PI*MOTOR_SHAFT_RADIUS)/(2500000));
 8004674:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <HALL_EFFECT_HANDLLER+0x88>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a0e      	ldr	r2, [pc, #56]	; (80046b4 <HALL_EFFECT_HANDLLER+0x8c>)
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	4a0e      	ldr	r2, [pc, #56]	; (80046b8 <HALL_EFFECT_HANDLLER+0x90>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	0d1b      	lsrs	r3, r3, #20
 8004686:	4a0d      	ldr	r2, [pc, #52]	; (80046bc <HALL_EFFECT_HANDLLER+0x94>)
 8004688:	6013      	str	r3, [r2, #0]
			_TIM1_delay_ms(1);
 800468a:	2001      	movs	r0, #1
 800468c:	f7ff fce4 	bl	8004058 <_TIM1_delay_ms>
			HALL_EFFECT_COUNTER=0;
 8004690:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <HALL_EFFECT_HANDLLER+0x78>)
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
}
 8004696:	bf00      	nop
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20004264 	.word	0x20004264
 80046a0:	20004268 	.word	0x20004268
 80046a4:	2000426c 	.word	0x2000426c
 80046a8:	24924925 	.word	0x24924925
 80046ac:	20004270 	.word	0x20004270
 80046b0:	20004274 	.word	0x20004274
 80046b4:	000113fa 	.word	0x000113fa
 80046b8:	6b5fca6b 	.word	0x6b5fca6b
 80046bc:	20004278 	.word	0x20004278

080046c0 <HALL_EFECT_Init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void HALL_EFECT_Init(){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af00      	add	r7, sp, #0
	{
		GP_TIMERx_config GP_sitting={(MCAL_GET_H_CLCK()/1000) // to get tick every 1ms
 80046c6:	f7ff f923 	bl	8003910 <MCAL_GET_H_CLCK>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4a1b      	ldr	r2, [pc, #108]	; (800473c <HALL_EFECT_Init+0x7c>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80046d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80046de:	2300      	movs	r3, #0
 80046e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046e2:	2300      	movs	r3, #0
 80046e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046e6:	2300      	movs	r3, #0
 80046e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80046f2:	4b13      	ldr	r3, [pc, #76]	; (8004740 <HALL_EFECT_Init+0x80>)
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
				,1000 //to get interrupt every 1SEC
				,0,0,INT_EN,NORMAL,HALL_EFFECT_TIMER_ENABLE};
		GP_TIMERx_NORMAL_config GP_sitting_NORMA={Up};
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		GP_TIMx_start(HALL_EFFECT_TIMx_instant,&GP_sitting,&GP_sitting_NORMA);
 80046fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004704:	4619      	mov	r1, r3
 8004706:	480f      	ldr	r0, [pc, #60]	; (8004744 <HALL_EFECT_Init+0x84>)
 8004708:	f7fe fe36 	bl	8003378 <GP_TIMx_start>
	}


	{
		EXTI_config_t HALL_EFFECT_SITTING={HALL_EFFECT_EXTI_LINE,RISEING,ENABLE,HALL_EFFECT_HANDLLER};
 800470c:	230c      	movs	r3, #12
 800470e:	823b      	strh	r3, [r7, #16]
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <HALL_EFECT_Init+0x88>)
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	230c      	movs	r3, #12
 8004716:	833b      	strh	r3, [r7, #24]
 8004718:	2328      	movs	r3, #40	; 0x28
 800471a:	837b      	strh	r3, [r7, #26]
 800471c:	2301      	movs	r3, #1
 800471e:	773b      	strb	r3, [r7, #28]
 8004720:	2301      	movs	r3, #1
 8004722:	777b      	strb	r3, [r7, #29]
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HALL_EFECT_Init+0x8c>)
 8004726:	623b      	str	r3, [r7, #32]
		MCAL_EXTI_init(&HALL_EFFECT_SITTING);
 8004728:	f107 0310 	add.w	r3, r7, #16
 800472c:	4618      	mov	r0, r3
 800472e:	f7fe f90b 	bl	8002948 <MCAL_EXTI_init>

	}
}
 8004732:	bf00      	nop
 8004734:	3738      	adds	r7, #56	; 0x38
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	10624dd3 	.word	0x10624dd3
 8004740:	08004609 	.word	0x08004609
 8004744:	40000400 	.word	0x40000400
 8004748:	40010c00 	.word	0x40010c00
 800474c:	08004629 	.word	0x08004629

08004750 <DMS_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void DMS_Handller_TASK(){
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0


	while(1){
		DMS_DATA=DMS_read();
 8004754:	f7fc fd9e 	bl	8001294 <DMS_read>
 8004758:	4603      	mov	r3, r0
 800475a:	461a      	mov	r2, r3
 800475c:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <DMS_Handller_TASK+0x80>)
 800475e:	701a      	strb	r2, [r3, #0]
		if(DMS_WAIT_COUNTER ==1){
 8004760:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <DMS_Handller_TASK+0x84>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d10a      	bne.n	800477e <DMS_Handller_TASK+0x2e>
			MCAL_USART_SendData(TSR_UART_INSTANT, DMS_WAIT);
 8004768:	2121      	movs	r1, #33	; 0x21
 800476a:	481b      	ldr	r0, [pc, #108]	; (80047d8 <DMS_Handller_TASK+0x88>)
 800476c:	f7ff fdf8 	bl	8004360 <MCAL_USART_SendData>
//			DMS_WAIT_COUNTER=0;
			DMS__one_COUNTER=0;
 8004770:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <DMS_Handller_TASK+0x8c>)
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
			DMS__zero_COUNTER=0;
 8004776:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <DMS_Handller_TASK+0x90>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	e7ea      	b.n	8004754 <DMS_Handller_TASK+0x4>

		}else if(DMS_DATA==0){
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <DMS_Handller_TASK+0x80>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d111      	bne.n	80047aa <DMS_Handller_TASK+0x5a>
//			DMS_WAIT_COUNTER=0;
			DMS__one_COUNTER=0;
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <DMS_Handller_TASK+0x8c>)
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
			if(  DMS__zero_COUNTER==0){
 800478c:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <DMS_Handller_TASK+0x90>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1df      	bne.n	8004754 <DMS_Handller_TASK+0x4>
				MCAL_USART_SendData(TSR_UART_INSTANT, DMS_TAKE_ACTION);
 8004794:	2166      	movs	r1, #102	; 0x66
 8004796:	4810      	ldr	r0, [pc, #64]	; (80047d8 <DMS_Handller_TASK+0x88>)
 8004798:	f7ff fde2 	bl	8004360 <MCAL_USART_SendData>
				DMS__zero_COUNTER++;
 800479c:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <DMS_Handller_TASK+0x90>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	3301      	adds	r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <DMS_Handller_TASK+0x90>)
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e7d4      	b.n	8004754 <DMS_Handller_TASK+0x4>
			}

		}else{
//			DMS_WAIT_COUNTER=0;
			DMS__zero_COUNTER=0;
 80047aa:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <DMS_Handller_TASK+0x90>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
			if(DMS__one_COUNTER==0){
 80047b0:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <DMS_Handller_TASK+0x8c>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1cd      	bne.n	8004754 <DMS_Handller_TASK+0x4>
				MCAL_USART_SendData(TSR_UART_INSTANT, DMS_Release_ACTION);
 80047b8:	2155      	movs	r1, #85	; 0x55
 80047ba:	4807      	ldr	r0, [pc, #28]	; (80047d8 <DMS_Handller_TASK+0x88>)
 80047bc:	f7ff fdd0 	bl	8004360 <MCAL_USART_SendData>
				DMS__one_COUNTER++;
 80047c0:	4b06      	ldr	r3, [pc, #24]	; (80047dc <DMS_Handller_TASK+0x8c>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <DMS_Handller_TASK+0x8c>)
 80047ca:	701a      	strb	r2, [r3, #0]
		DMS_DATA=DMS_read();
 80047cc:	e7c2      	b.n	8004754 <DMS_Handller_TASK+0x4>
 80047ce:	bf00      	nop
 80047d0:	20004294 	.word	0x20004294
 80047d4:	20004295 	.word	0x20004295
 80047d8:	40013800 	.word	0x40013800
 80047dc:	20004293 	.word	0x20004293
 80047e0:	20004292 	.word	0x20004292

080047e4 <ACC_CONVERT_ADC_TODICMAL>:
 * @retval -
 * Note-
 */


uint8_t ACC_CONVERT_ADC_TODICMAL(uint16_t ACC_THROTTEL_){
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	80fb      	strh	r3, [r7, #6]
	uint8_t ACC_DICIMAL_VAL=((((ACC_THROTTEL_-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL))/(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL))+ACC_DAC_MIN_DECIMAL);
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	f5a3 6296 	sub.w	r2, r3, #1200	; 0x4b0
 80047f4:	4613      	mov	r3, r2
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4413      	add	r3, r2
 80047fa:	019b      	lsls	r3, r3, #6
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	4a08      	ldr	r2, [pc, #32]	; (8004820 <ACC_CONVERT_ADC_TODICMAL+0x3c>)
 8004800:	fb82 1203 	smull	r1, r2, r2, r3
 8004804:	441a      	add	r2, r3
 8004806:	1292      	asrs	r2, r2, #10
 8004808:	17db      	asrs	r3, r3, #31
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	b2db      	uxtb	r3, r3
 800480e:	3340      	adds	r3, #64	; 0x40
 8004810:	73fb      	strb	r3, [r7, #15]

	return ACC_DICIMAL_VAL;
 8004812:	7bfb      	ldrb	r3, [r7, #15]

}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	ec2a6fa1 	.word	0xec2a6fa1

08004824 <ACC_ADC_CallBack>:
 * @param [in] - void
 * @param [out] - void
 * @retval -
 * Note- the ADC must work as interrupt otherwise this fun will not work
 */
void ACC_ADC_CallBack(){
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
	ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8004828:	4a03      	ldr	r2, [pc, #12]	; (8004838 <ACC_ADC_CallBack+0x14>)
 800482a:	2100      	movs	r1, #0
 800482c:	4803      	ldr	r0, [pc, #12]	; (800483c <ACC_ADC_CallBack+0x18>)
 800482e:	f7fd fd57 	bl	80022e0 <ADC_read>

}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	2000428a 	.word	0x2000428a
 800483c:	40012400 	.word	0x40012400

08004840 <ACC_throtel_init>:
 * @param [in] - void
 * @param [out] - void
 * @retval -
 * Note-
 */
void ACC_throtel_init(){
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
	ADC_Analog_WDG AWDG={0,0,0,0};
 8004846:	f107 0310 	add.w	r3, r7, #16
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	809a      	strh	r2, [r3, #4]
	ADC_CONFIG config={ACC_THROTTEL_CHx,ADC_Continuous_conversion,ADC_1_5_cycles,ADC_Polling,&AWDG,ACC_ADC_CallBack};
 8004850:	2300      	movs	r3, #0
 8004852:	713b      	strb	r3, [r7, #4]
 8004854:	2301      	movs	r3, #1
 8004856:	717b      	strb	r3, [r7, #5]
 8004858:	2300      	movs	r3, #0
 800485a:	71bb      	strb	r3, [r7, #6]
 800485c:	2300      	movs	r3, #0
 800485e:	71fb      	strb	r3, [r7, #7]
 8004860:	f107 0310 	add.w	r3, r7, #16
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <ACC_throtel_init+0x54>)
 8004868:	60fb      	str	r3, [r7, #12]
	ADC_init(ADC1,&config);
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	4619      	mov	r1, r3
 800486e:	480a      	ldr	r0, [pc, #40]	; (8004898 <ACC_throtel_init+0x58>)
 8004870:	f7fd fbaa 	bl	8001fc8 <ADC_init>
	//	ADC_interrupt_Enable(ADC1);
	PIN_config PINx={ACC_BOTTON_PIN,INPUT_PD,0};
 8004874:	2300      	movs	r3, #0
 8004876:	803b      	strh	r3, [r7, #0]
 8004878:	2303      	movs	r3, #3
 800487a:	70bb      	strb	r3, [r7, #2]
 800487c:	2300      	movs	r3, #0
 800487e:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_init(ACC_BOTTON_PORT, &PINx);
 8004880:	463b      	mov	r3, r7
 8004882:	4619      	mov	r1, r3
 8004884:	4805      	ldr	r0, [pc, #20]	; (800489c <ACC_throtel_init+0x5c>)
 8004886:	f7fe fa67 	bl	8002d58 <MCAL_GPIO_init>

}
 800488a:	bf00      	nop
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	08004825 	.word	0x08004825
 8004898:	40012400 	.word	0x40012400
 800489c:	40010c00 	.word	0x40010c00

080048a0 <ACC_DAC_init>:
 * @param [in] - void
 * @param [out] - void
 * @retval -
 * Note-
 */
void ACC_DAC_init(){
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
	PIN_config PINx={ACC_DAC_0,OUTPUT_PP,SPEED_10};
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <ACC_DAC_init+0xa0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOA, &PINx);
 80048ac:	f107 031c 	add.w	r3, r7, #28
 80048b0:	4619      	mov	r1, r3
 80048b2:	4824      	ldr	r0, [pc, #144]	; (8004944 <ACC_DAC_init+0xa4>)
 80048b4:	f7fe fa50 	bl	8002d58 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_1,OUTPUT_PP,SPEED_10};
 80048b8:	4b23      	ldr	r3, [pc, #140]	; (8004948 <ACC_DAC_init+0xa8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 80048be:	f107 031c 	add.w	r3, r7, #28
 80048c2:	4619      	mov	r1, r3
 80048c4:	4821      	ldr	r0, [pc, #132]	; (800494c <ACC_DAC_init+0xac>)
 80048c6:	f7fe fa47 	bl	8002d58 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_2,OUTPUT_PP,SPEED_10};
 80048ca:	4b21      	ldr	r3, [pc, #132]	; (8004950 <ACC_DAC_init+0xb0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 80048d0:	f107 031c 	add.w	r3, r7, #28
 80048d4:	4619      	mov	r1, r3
 80048d6:	481d      	ldr	r0, [pc, #116]	; (800494c <ACC_DAC_init+0xac>)
 80048d8:	f7fe fa3e 	bl	8002d58 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_3,OUTPUT_PP,SPEED_10};
 80048dc:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <ACC_DAC_init+0xb4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 80048e2:	f107 031c 	add.w	r3, r7, #28
 80048e6:	4619      	mov	r1, r3
 80048e8:	4818      	ldr	r0, [pc, #96]	; (800494c <ACC_DAC_init+0xac>)
 80048ea:	f7fe fa35 	bl	8002d58 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_4,OUTPUT_PP,SPEED_10};
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <ACC_DAC_init+0xb8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 80048f4:	f107 031c 	add.w	r3, r7, #28
 80048f8:	4619      	mov	r1, r3
 80048fa:	4814      	ldr	r0, [pc, #80]	; (800494c <ACC_DAC_init+0xac>)
 80048fc:	f7fe fa2c 	bl	8002d58 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_5,OUTPUT_PP,SPEED_10};
 8004900:	4b16      	ldr	r3, [pc, #88]	; (800495c <ACC_DAC_init+0xbc>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004906:	f107 031c 	add.w	r3, r7, #28
 800490a:	4619      	mov	r1, r3
 800490c:	480f      	ldr	r0, [pc, #60]	; (800494c <ACC_DAC_init+0xac>)
 800490e:	f7fe fa23 	bl	8002d58 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_6,OUTPUT_PP,SPEED_10};
 8004912:	4b13      	ldr	r3, [pc, #76]	; (8004960 <ACC_DAC_init+0xc0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8004918:	f107 031c 	add.w	r3, r7, #28
 800491c:	4619      	mov	r1, r3
 800491e:	480b      	ldr	r0, [pc, #44]	; (800494c <ACC_DAC_init+0xac>)
 8004920:	f7fe fa1a 	bl	8002d58 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_7,OUTPUT_PP,SPEED_10};
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <ACC_DAC_init+0xc4>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 800492a:	f107 031c 	add.w	r3, r7, #28
 800492e:	4619      	mov	r1, r3
 8004930:	4806      	ldr	r0, [pc, #24]	; (800494c <ACC_DAC_init+0xac>)
 8004932:	f7fe fa11 	bl	8002d58 <MCAL_GPIO_init>

}
 8004936:	bf00      	nop
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	080055c4 	.word	0x080055c4
 8004944:	40010800 	.word	0x40010800
 8004948:	080055c8 	.word	0x080055c8
 800494c:	40010c00 	.word	0x40010c00
 8004950:	080055cc 	.word	0x080055cc
 8004954:	080055d0 	.word	0x080055d0
 8004958:	080055d4 	.word	0x080055d4
 800495c:	080055d8 	.word	0x080055d8
 8004960:	080055dc 	.word	0x080055dc
 8004964:	080055e0 	.word	0x080055e0

08004968 <ACC_FROM_ADC_TO_DAC>:
 * @retval -
 * Note- the DAC designed is 8-bit dac so the value should be between 0-255
 * and we need the volt not be less 0.8 so decimal_val sould be between 64-255
 */

void ACC_FROM_ADC_TO_DAC(uint16_t decimal_val){
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	80fb      	strh	r3, [r7, #6]
	//	uint16_t PWM_V=(uint16_t)(((ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL)*100)/(ACC_TROTTEL_Max_ADC_VAL_shifted));
	/*MY CLOCK IS 28Mhz so i the prescaler will be 27
	 * and i need to proudce and it will make tick every 1us and i need 3KHZ PWM so the ARR= will be 333.33
	 * */
	//	PWM_V=((PWM_V*35)/100);
	MCAL_write_PIN(GPIOA, ACC_DAC_0, ((decimal_val >>0) &1));
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	210f      	movs	r1, #15
 8004980:	482d      	ldr	r0, [pc, #180]	; (8004a38 <ACC_FROM_ADC_TO_DAC+0xd0>)
 8004982:	f7fe fad3 	bl	8002f2c <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_1, ((decimal_val >>1) &1));
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	2103      	movs	r1, #3
 8004998:	4828      	ldr	r0, [pc, #160]	; (8004a3c <ACC_FROM_ADC_TO_DAC+0xd4>)
 800499a:	f7fe fac7 	bl	8002f2c <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_2, ((decimal_val >>2) &1));
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	089b      	lsrs	r3, r3, #2
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	461a      	mov	r2, r3
 80049ae:	2104      	movs	r1, #4
 80049b0:	4822      	ldr	r0, [pc, #136]	; (8004a3c <ACC_FROM_ADC_TO_DAC+0xd4>)
 80049b2:	f7fe fabb 	bl	8002f2c <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_3, ((decimal_val >>3) &1));
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	08db      	lsrs	r3, r3, #3
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	2105      	movs	r1, #5
 80049c8:	481c      	ldr	r0, [pc, #112]	; (8004a3c <ACC_FROM_ADC_TO_DAC+0xd4>)
 80049ca:	f7fe faaf 	bl	8002f2c <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_4, ((decimal_val >>4) &1));
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	2106      	movs	r1, #6
 80049e0:	4816      	ldr	r0, [pc, #88]	; (8004a3c <ACC_FROM_ADC_TO_DAC+0xd4>)
 80049e2:	f7fe faa3 	bl	8002f2c <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_5, ((decimal_val >>5) &1));
 80049e6:	88fb      	ldrh	r3, [r7, #6]
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	2107      	movs	r1, #7
 80049f8:	4810      	ldr	r0, [pc, #64]	; (8004a3c <ACC_FROM_ADC_TO_DAC+0xd4>)
 80049fa:	f7fe fa97 	bl	8002f2c <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_6, ((decimal_val >>6) &1));
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	099b      	lsrs	r3, r3, #6
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2108      	movs	r1, #8
 8004a10:	480a      	ldr	r0, [pc, #40]	; (8004a3c <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004a12:	f7fe fa8b 	bl	8002f2c <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_7, ((decimal_val >>7) &1));
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	09db      	lsrs	r3, r3, #7
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	2109      	movs	r1, #9
 8004a28:	4804      	ldr	r0, [pc, #16]	; (8004a3c <ACC_FROM_ADC_TO_DAC+0xd4>)
 8004a2a:	f7fe fa7f 	bl	8002f2c <MCAL_write_PIN>

}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40010800 	.word	0x40010800
 8004a3c:	40010c00 	.word	0x40010c00

08004a40 <ACC_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_Handller_TASK(){
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
	while(1){

		//      ACC_AMP=500;
		if((LUNA_AMP>=100) && (LUNA_AMP<=65535) ){
 8004a44:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <ACC_Handller_TASK+0x90>)
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	2b63      	cmp	r3, #99	; 0x63
 8004a4a:	d931      	bls.n	8004ab0 <ACC_Handller_TASK+0x70>
			if(LUNA_dis ==0x00){
 8004a4c:	4b21      	ldr	r3, [pc, #132]	; (8004ad4 <ACC_Handller_TASK+0x94>)
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <ACC_Handller_TASK+0x2c>
				if(GR_DMS_FLAG_send == DMS_EYES_CLOSED_FORCE_STOP)
 8004a54:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <ACC_Handller_TASK+0x98>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b07      	cmp	r3, #7
 8004a5a:	d103      	bne.n	8004a64 <ACC_Handller_TASK+0x24>
					ACC_ACTION=ACC_CAR_STOP;
 8004a5c:	4b1f      	ldr	r3, [pc, #124]	; (8004adc <ACC_Handller_TASK+0x9c>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e7ef      	b.n	8004a44 <ACC_Handller_TASK+0x4>
				else{
					ACC_ACTION=ACC_CAR_GO;
 8004a64:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <ACC_Handller_TASK+0x9c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e7eb      	b.n	8004a44 <ACC_Handller_TASK+0x4>
				}

			}else if(((GR_DMS_FLAG_send == DMS_EYES_CLOSED_FORCE_STOP) ||(LUNA_dis <= ACC_distance_stop) )){
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <ACC_Handller_TASK+0x98>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b07      	cmp	r3, #7
 8004a72:	d005      	beq.n	8004a80 <ACC_Handller_TASK+0x40>
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <ACC_Handller_TASK+0x94>)
 8004a76:	881a      	ldrh	r2, [r3, #0]
 8004a78:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <ACC_Handller_TASK+0xa0>)
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d803      	bhi.n	8004a88 <ACC_Handller_TASK+0x48>

				ACC_ACTION=ACC_CAR_STOP;
 8004a80:	4b16      	ldr	r3, [pc, #88]	; (8004adc <ACC_Handller_TASK+0x9c>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	e022      	b.n	8004ace <ACC_Handller_TASK+0x8e>

			}else if((LUNA_dis > ACC_distance_stop) &&(LUNA_dis <ACC_distance_slowdown)){
 8004a88:	4b12      	ldr	r3, [pc, #72]	; (8004ad4 <ACC_Handller_TASK+0x94>)
 8004a8a:	881a      	ldrh	r2, [r3, #0]
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <ACC_Handller_TASK+0xa0>)
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d909      	bls.n	8004aa8 <ACC_Handller_TASK+0x68>
 8004a94:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <ACC_Handller_TASK+0x94>)
 8004a96:	881a      	ldrh	r2, [r3, #0]
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <ACC_Handller_TASK+0xa4>)
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d203      	bcs.n	8004aa8 <ACC_Handller_TASK+0x68>
				ACC_ACTION=ACC_CAR_SLOW_DOWN;
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <ACC_Handller_TASK+0x9c>)
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e012      	b.n	8004ace <ACC_Handller_TASK+0x8e>


			}else{
				ACC_ACTION=ACC_CAR_GO;
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <ACC_Handller_TASK+0x9c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	e7c9      	b.n	8004a44 <ACC_Handller_TASK+0x4>


		}
		// if the Signal strength indicator not strong dequeue its disance value
		else{
			if(LUNA_dis ==0x00){
 8004ab0:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <ACC_Handller_TASK+0x94>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1c5      	bne.n	8004a44 <ACC_Handller_TASK+0x4>
				if(GR_DMS_FLAG_send == DMS_EYES_CLOSED_FORCE_STOP)
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <ACC_Handller_TASK+0x98>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	d103      	bne.n	8004ac8 <ACC_Handller_TASK+0x88>
					ACC_ACTION=ACC_CAR_STOP;
 8004ac0:	4b06      	ldr	r3, [pc, #24]	; (8004adc <ACC_Handller_TASK+0x9c>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	e7bd      	b.n	8004a44 <ACC_Handller_TASK+0x4>
				else
					ACC_ACTION=ACC_CAR_GO;
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <ACC_Handller_TASK+0x9c>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
		if((LUNA_AMP>=100) && (LUNA_AMP<=65535) ){
 8004ace:	e7b9      	b.n	8004a44 <ACC_Handller_TASK+0x4>
 8004ad0:	20003ffa 	.word	0x20003ffa
 8004ad4:	20003ff8 	.word	0x20003ff8
 8004ad8:	2000429a 	.word	0x2000429a
 8004adc:	20000049 	.word	0x20000049
 8004ae0:	2000004a 	.word	0x2000004a
 8004ae4:	2000004c 	.word	0x2000004c

08004ae8 <ACC_throttel_Handller_TASK>:
 * @param [out] - Void
 * @retval -
 * Note- ACC_DICIMAL_VAL is a global variable and update every 1ms from ACC_STATE_READ_TASK
 */

void ACC_throttel_Handller_TASK(){
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0

	while(1){

		if(ACC_ST==ACC_ON){
 8004aec:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <ACC_throttel_Handller_TASK+0xe0>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d13e      	bne.n	8004b72 <ACC_throttel_Handller_TASK+0x8a>
			if(ACC_counter ==0){
 8004af4:	4b35      	ldr	r3, [pc, #212]	; (8004bcc <ACC_throttel_Handller_TASK+0xe4>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10e      	bne.n	8004b1a <ACC_throttel_Handller_TASK+0x32>
				ADC_SAVED=ACC_CONVERT_ADC_TODICMAL(ACC_THROTTEL_DATA);
 8004afc:	4b34      	ldr	r3, [pc, #208]	; (8004bd0 <ACC_throttel_Handller_TASK+0xe8>)
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fe6f 	bl	80047e4 <ACC_CONVERT_ADC_TODICMAL>
 8004b06:	4603      	mov	r3, r0
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <ACC_throttel_Handller_TASK+0xec>)
 8004b0c:	801a      	strh	r2, [r3, #0]
				ACC_counter++;
 8004b0e:	4b2f      	ldr	r3, [pc, #188]	; (8004bcc <ACC_throttel_Handller_TASK+0xe4>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	4b2d      	ldr	r3, [pc, #180]	; (8004bcc <ACC_throttel_Handller_TASK+0xe4>)
 8004b18:	701a      	strb	r2, [r3, #0]
			}
			if(ADC_SAVED<=ACC_DICIMAL_VAL){
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <ACC_throttel_Handller_TASK+0xf0>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	4b2c      	ldr	r3, [pc, #176]	; (8004bd4 <ACC_throttel_Handller_TASK+0xec>)
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d306      	bcc.n	8004b36 <ACC_throttel_Handller_TASK+0x4e>
				ACC_FROM_ADC_TO_DAC(ACC_DICIMAL_VAL);
 8004b28:	4b2b      	ldr	r3, [pc, #172]	; (8004bd8 <ACC_throttel_Handller_TASK+0xf0>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ff1a 	bl	8004968 <ACC_FROM_ADC_TO_DAC>
 8004b34:	e7da      	b.n	8004aec <ACC_throttel_Handller_TASK+0x4>
			}else{

				if(ACC_ACTION ==ACC_CAR_STOP){
 8004b36:	4b29      	ldr	r3, [pc, #164]	; (8004bdc <ACC_throttel_Handller_TASK+0xf4>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d103      	bne.n	8004b46 <ACC_throttel_Handller_TASK+0x5e>
					ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8004b3e:	2040      	movs	r0, #64	; 0x40
 8004b40:	f7ff ff12 	bl	8004968 <ACC_FROM_ADC_TO_DAC>
 8004b44:	e7d2      	b.n	8004aec <ACC_throttel_Handller_TASK+0x4>
				}else if(ACC_ACTION ==ACC_CAR_SLOW_DOWN){
 8004b46:	4b25      	ldr	r3, [pc, #148]	; (8004bdc <ACC_throttel_Handller_TASK+0xf4>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d107      	bne.n	8004b5e <ACC_throttel_Handller_TASK+0x76>

					ACC_FROM_ADC_TO_DAC((ADC_SAVED/2));
 8004b4e:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <ACC_throttel_Handller_TASK+0xec>)
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff06 	bl	8004968 <ACC_FROM_ADC_TO_DAC>
 8004b5c:	e7c6      	b.n	8004aec <ACC_throttel_Handller_TASK+0x4>
				}else if(ACC_ACTION ==ACC_CAR_GO){
 8004b5e:	4b1f      	ldr	r3, [pc, #124]	; (8004bdc <ACC_throttel_Handller_TASK+0xf4>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1c2      	bne.n	8004aec <ACC_throttel_Handller_TASK+0x4>
					ACC_FROM_ADC_TO_DAC(ADC_SAVED);
 8004b66:	4b1b      	ldr	r3, [pc, #108]	; (8004bd4 <ACC_throttel_Handller_TASK+0xec>)
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fefc 	bl	8004968 <ACC_FROM_ADC_TO_DAC>
 8004b70:	e7bc      	b.n	8004aec <ACC_throttel_Handller_TASK+0x4>

				}
			}


		}else if(ACC_ST==ACC_OFF){
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <ACC_throttel_Handller_TASK+0xe0>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1b8      	bne.n	8004aec <ACC_throttel_Handller_TASK+0x4>
			ACC_counter=0;
 8004b7a:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <ACC_throttel_Handller_TASK+0xe4>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
			ADC_SAVED=0;
 8004b80:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <ACC_throttel_Handller_TASK+0xec>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	801a      	strh	r2, [r3, #0]
			if(ACC_ACTION ==ACC_CAR_STOP){
 8004b86:	4b15      	ldr	r3, [pc, #84]	; (8004bdc <ACC_throttel_Handller_TASK+0xf4>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d103      	bne.n	8004b96 <ACC_throttel_Handller_TASK+0xae>
				ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8004b8e:	2040      	movs	r0, #64	; 0x40
 8004b90:	f7ff feea 	bl	8004968 <ACC_FROM_ADC_TO_DAC>
 8004b94:	e7aa      	b.n	8004aec <ACC_throttel_Handller_TASK+0x4>
			}else if(ACC_ACTION ==ACC_CAR_SLOW_DOWN){
 8004b96:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <ACC_throttel_Handller_TASK+0xf4>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d108      	bne.n	8004bb0 <ACC_throttel_Handller_TASK+0xc8>
				ACC_FROM_ADC_TO_DAC((ACC_DICIMAL_VAL/2));
 8004b9e:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <ACC_throttel_Handller_TASK+0xf0>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fedd 	bl	8004968 <ACC_FROM_ADC_TO_DAC>
 8004bae:	e79d      	b.n	8004aec <ACC_throttel_Handller_TASK+0x4>
			}else if(ACC_ACTION ==ACC_CAR_GO){
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <ACC_throttel_Handller_TASK+0xf4>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d199      	bne.n	8004aec <ACC_throttel_Handller_TASK+0x4>
				ACC_FROM_ADC_TO_DAC(ACC_DICIMAL_VAL);
 8004bb8:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <ACC_throttel_Handller_TASK+0xf0>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fed2 	bl	8004968 <ACC_FROM_ADC_TO_DAC>
		if(ACC_ST==ACC_ON){
 8004bc4:	e792      	b.n	8004aec <ACC_throttel_Handller_TASK+0x4>
 8004bc6:	bf00      	nop
 8004bc8:	20004289 	.word	0x20004289
 8004bcc:	2000428d 	.word	0x2000428d
 8004bd0:	2000428a 	.word	0x2000428a
 8004bd4:	2000428e 	.word	0x2000428e
 8004bd8:	2000428c 	.word	0x2000428c
 8004bdc:	20000049 	.word	0x20000049

08004be0 <ACC_STATE_READ_TASK>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void ACC_STATE_READ_TASK(){
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
	while(1){

		//		LUNA_dist();
		if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004be4:	2100      	movs	r1, #0
 8004be6:	4846      	ldr	r0, [pc, #280]	; (8004d00 <ACC_STATE_READ_TASK+0x120>)
 8004be8:	f7fe f9c8 	bl	8002f7c <MCAL_Read_PIN>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <ACC_STATE_READ_TASK+0x2e>
			_TIM1_delay_ms(30);
 8004bf2:	201e      	movs	r0, #30
 8004bf4:	f7ff fa30 	bl	8004058 <_TIM1_delay_ms>
			if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	4841      	ldr	r0, [pc, #260]	; (8004d00 <ACC_STATE_READ_TASK+0x120>)
 8004bfc:	f7fe f9be 	bl	8002f7c <MCAL_Read_PIN>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <ACC_STATE_READ_TASK+0x34>
				ACC_ST=1;
 8004c06:	4b3f      	ldr	r3, [pc, #252]	; (8004d04 <ACC_STATE_READ_TASK+0x124>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e002      	b.n	8004c14 <ACC_STATE_READ_TASK+0x34>


			}
		}else{
			ACC_ST=0;
 8004c0e:	4b3d      	ldr	r3, [pc, #244]	; (8004d04 <ACC_STATE_READ_TASK+0x124>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]

		}
		ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8004c14:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <ACC_STATE_READ_TASK+0x128>)
 8004c16:	2100      	movs	r1, #0
 8004c18:	483c      	ldr	r0, [pc, #240]	; (8004d0c <ACC_STATE_READ_TASK+0x12c>)
 8004c1a:	f7fd fb61 	bl	80022e0 <ADC_read>
		if((ACC_THROTTEL_DATA<ACC_TROTTEL_MIN_ADC_VAL) || (GR_DMS_FLAG_send == DMS_EYES_CLOSED_FORCE_STOP)){
 8004c1e:	4b3a      	ldr	r3, [pc, #232]	; (8004d08 <ACC_STATE_READ_TASK+0x128>)
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004c26:	d303      	bcc.n	8004c30 <ACC_STATE_READ_TASK+0x50>
 8004c28:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <ACC_STATE_READ_TASK+0x130>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b07      	cmp	r3, #7
 8004c2e:	d116      	bne.n	8004c5e <ACC_STATE_READ_TASK+0x7e>
			ACC_DICIMAL_VAL=64;
 8004c30:	4b38      	ldr	r3, [pc, #224]	; (8004d14 <ACC_STATE_READ_TASK+0x134>)
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	701a      	strb	r2, [r3, #0]
			if(ADC_SAVED ==0){
 8004c36:	4b38      	ldr	r3, [pc, #224]	; (8004d18 <ACC_STATE_READ_TASK+0x138>)
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d134      	bne.n	8004ca8 <ACC_STATE_READ_TASK+0xc8>
			HALL_EFFECT_KM_H=0;
 8004c3e:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <ACC_STATE_READ_TASK+0x13c>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
			HALL_EFFECT_N_PULSES=0;
 8004c44:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <ACC_STATE_READ_TASK+0x140>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
			HALL_EFFECT_RPS=0;
 8004c4a:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <ACC_STATE_READ_TASK+0x144>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
			HALL_EFFECT_RPM=0;
 8004c50:	4b35      	ldr	r3, [pc, #212]	; (8004d28 <ACC_STATE_READ_TASK+0x148>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
			DMS_WAIT_COUNTER=1;
 8004c56:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <ACC_STATE_READ_TASK+0x14c>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]
			if(ADC_SAVED ==0){
 8004c5c:	e024      	b.n	8004ca8 <ACC_STATE_READ_TASK+0xc8>

			}
		}else if(ACC_THROTTEL_DATA>ACC_TROTTEL_Max_ADC_VAL){
 8004c5e:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <ACC_STATE_READ_TASK+0x128>)
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	f640 1206 	movw	r2, #2310	; 0x906
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d906      	bls.n	8004c78 <ACC_STATE_READ_TASK+0x98>
			DMS_WAIT_COUNTER=0;
 8004c6a:	4b30      	ldr	r3, [pc, #192]	; (8004d2c <ACC_STATE_READ_TASK+0x14c>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
			ACC_DICIMAL_VAL=255;
 8004c70:	4b28      	ldr	r3, [pc, #160]	; (8004d14 <ACC_STATE_READ_TASK+0x134>)
 8004c72:	22ff      	movs	r2, #255	; 0xff
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e017      	b.n	8004ca8 <ACC_STATE_READ_TASK+0xc8>
		else{
			//		uint32_t step1=((uint32_t)(ACC_THROTTEL_DATA-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL)); //884.3
			//		uint32_t step2=(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL);//1539
			//		uint32_t step3=(step1/step2);
			//		ACC_DICIMAL_VAL=step3+ACC_DAC_MIN_DECIMAL;
			ACC_DICIMAL_VAL=((((ACC_THROTTEL_DATA-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL))/(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL))+ACC_DAC_MIN_DECIMAL);
 8004c78:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <ACC_STATE_READ_TASK+0x128>)
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	f5a3 6296 	sub.w	r2, r3, #1200	; 0x4b0
 8004c80:	4613      	mov	r3, r2
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	4413      	add	r3, r2
 8004c86:	019b      	lsls	r3, r3, #6
 8004c88:	1a9b      	subs	r3, r3, r2
 8004c8a:	4a29      	ldr	r2, [pc, #164]	; (8004d30 <ACC_STATE_READ_TASK+0x150>)
 8004c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8004c90:	441a      	add	r2, r3
 8004c92:	1292      	asrs	r2, r2, #10
 8004c94:	17db      	asrs	r3, r3, #31
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	3340      	adds	r3, #64	; 0x40
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <ACC_STATE_READ_TASK+0x134>)
 8004ca0:	701a      	strb	r2, [r3, #0]
			DMS_WAIT_COUNTER=0;
 8004ca2:	4b22      	ldr	r3, [pc, #136]	; (8004d2c <ACC_STATE_READ_TASK+0x14c>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	701a      	strb	r2, [r3, #0]

		}


		if(HALL_EFFECT_KM_H <=10){
 8004ca8:	4b1c      	ldr	r3, [pc, #112]	; (8004d1c <ACC_STATE_READ_TASK+0x13c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b0a      	cmp	r3, #10
 8004cae:	d807      	bhi.n	8004cc0 <ACC_STATE_READ_TASK+0xe0>
			ACC_distance_stop=Distance_SET;
 8004cb0:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <ACC_STATE_READ_TASK+0x154>)
 8004cb2:	22c8      	movs	r2, #200	; 0xc8
 8004cb4:	801a      	strh	r2, [r3, #0]
			ACC_distance_slowdown=MAX_Distance_SET;
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <ACC_STATE_READ_TASK+0x158>)
 8004cb8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004cbc:	801a      	strh	r2, [r3, #0]
 8004cbe:	e791      	b.n	8004be4 <ACC_STATE_READ_TASK+0x4>
		}else if(HALL_EFFECT_KM_H >10 && HALL_EFFECT_KM_H<=40){
 8004cc0:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <ACC_STATE_READ_TASK+0x13c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b0a      	cmp	r3, #10
 8004cc6:	d90c      	bls.n	8004ce2 <ACC_STATE_READ_TASK+0x102>
 8004cc8:	4b14      	ldr	r3, [pc, #80]	; (8004d1c <ACC_STATE_READ_TASK+0x13c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b28      	cmp	r3, #40	; 0x28
 8004cce:	d808      	bhi.n	8004ce2 <ACC_STATE_READ_TASK+0x102>
			ACC_distance_stop=500;
 8004cd0:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <ACC_STATE_READ_TASK+0x154>)
 8004cd2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004cd6:	801a      	strh	r2, [r3, #0]
			ACC_distance_slowdown=700;
 8004cd8:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <ACC_STATE_READ_TASK+0x158>)
 8004cda:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	e00c      	b.n	8004cfc <ACC_STATE_READ_TASK+0x11c>
		}else if(HALL_EFFECT_KM_H > 60){
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <ACC_STATE_READ_TASK+0x13c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b3c      	cmp	r3, #60	; 0x3c
 8004ce8:	f67f af7c 	bls.w	8004be4 <ACC_STATE_READ_TASK+0x4>
			ACC_distance_stop=850;
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <ACC_STATE_READ_TASK+0x154>)
 8004cee:	f240 3252 	movw	r2, #850	; 0x352
 8004cf2:	801a      	strh	r2, [r3, #0]
			ACC_distance_slowdown=900;
 8004cf4:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <ACC_STATE_READ_TASK+0x158>)
 8004cf6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004cfa:	801a      	strh	r2, [r3, #0]
		if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004cfc:	e772      	b.n	8004be4 <ACC_STATE_READ_TASK+0x4>
 8004cfe:	bf00      	nop
 8004d00:	40010c00 	.word	0x40010c00
 8004d04:	20004289 	.word	0x20004289
 8004d08:	2000428a 	.word	0x2000428a
 8004d0c:	40012400 	.word	0x40012400
 8004d10:	2000429a 	.word	0x2000429a
 8004d14:	2000428c 	.word	0x2000428c
 8004d18:	2000428e 	.word	0x2000428e
 8004d1c:	20004278 	.word	0x20004278
 8004d20:	2000426c 	.word	0x2000426c
 8004d24:	20004270 	.word	0x20004270
 8004d28:	20004274 	.word	0x20004274
 8004d2c:	20004295 	.word	0x20004295
 8004d30:	ec2a6fa1 	.word	0xec2a6fa1
 8004d34:	2000004a 	.word	0x2000004a
 8004d38:	2000004c 	.word	0x2000004c

08004d3c <TFT_Handller_TASK>:
 * @param [out] - Void
 * @retval -
 * Note- it must to change the Priority of this task while sending the data to TFT screen to make sure
 * that there is no data corruption
 */
void TFT_Handller_TASK(){
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
	while(1){
		//	  if(GR_TSR_FLAG_OLED_send !=0x99){
		vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004d40:	4b25      	ldr	r3, [pc, #148]	; (8004dd8 <TFT_Handller_TASK+0x9c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2104      	movs	r1, #4
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fbca 	bl	80004e0 <vTaskPrioritySet>
		TFT_send_ACC_image(HALL_EFFECT_KM_H);
 8004d4c:	4b23      	ldr	r3, [pc, #140]	; (8004ddc <TFT_Handller_TASK+0xa0>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fc ff92 	bl	8001c7c <TFT_send_ACC_image>
		vTaskPrioritySet(TSR_Handller_TASK_Handle,2);
 8004d58:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <TFT_Handller_TASK+0x9c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fb fbbe 	bl	80004e0 <vTaskPrioritySet>

		vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004d64:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <TFT_Handller_TASK+0x9c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2104      	movs	r1, #4
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fb fbb8 	bl	80004e0 <vTaskPrioritySet>
		TFT_send_TSR_image(GR_TSR_FLAG_OLED_send);
 8004d70:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <TFT_Handller_TASK+0xa4>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fc fee9 	bl	8001b4c <TFT_send_TSR_image>
		vTaskPrioritySet(TSR_Handller_TASK_Handle,2);
 8004d7a:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <TFT_Handller_TASK+0x9c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2102      	movs	r1, #2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fb fbad 	bl	80004e0 <vTaskPrioritySet>

		vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <TFT_Handller_TASK+0x9c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2104      	movs	r1, #4
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fb fba7 	bl	80004e0 <vTaskPrioritySet>
		TFT_cruise_control_ICON_Print(ACC_ST);
 8004d92:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <TFT_Handller_TASK+0xa8>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fc fe90 	bl	8001abc <TFT_cruise_control_ICON_Print>
		vTaskPrioritySet(TSR_Handller_TASK_Handle,2);
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <TFT_Handller_TASK+0x9c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2102      	movs	r1, #2
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb fb9c 	bl	80004e0 <vTaskPrioritySet>

		vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <TFT_Handller_TASK+0x9c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2104      	movs	r1, #4
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fb fb96 	bl	80004e0 <vTaskPrioritySet>
		TFT_HOD_ICON_Print(!(DMS_DATA));
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <TFT_Handller_TASK+0xac>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bf0c      	ite	eq
 8004dbc:	2301      	moveq	r3, #1
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fc fe9e 	bl	8001b04 <TFT_HOD_ICON_Print>
		vTaskPrioritySet(TSR_Handller_TASK_Handle,2);
 8004dc8:	4b03      	ldr	r3, [pc, #12]	; (8004dd8 <TFT_Handller_TASK+0x9c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2102      	movs	r1, #2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fb fb86 	bl	80004e0 <vTaskPrioritySet>
		vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004dd4:	e7b4      	b.n	8004d40 <TFT_Handller_TASK+0x4>
 8004dd6:	bf00      	nop
 8004dd8:	200042a0 	.word	0x200042a0
 8004ddc:	20004278 	.word	0x20004278
 8004de0:	2000427e 	.word	0x2000427e
 8004de4:	20004289 	.word	0x20004289
 8004de8:	20004294 	.word	0x20004294

08004dec <TSR_call_Back>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_call_Back(void){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
	PC_Uart_Flag=  MCAL_USART_ReciveData(TSR_UART_INSTANT);
 8004df0:	48a6      	ldr	r0, [pc, #664]	; (800508c <TSR_call_Back+0x2a0>)
 8004df2:	f7ff faf5 	bl	80043e0 <MCAL_USART_ReciveData>
 8004df6:	4603      	mov	r3, r0
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	4ba5      	ldr	r3, [pc, #660]	; (8005090 <TSR_call_Back+0x2a4>)
 8004dfc:	701a      	strb	r2, [r3, #0]



	switch(PC_Uart_Flag){
 8004dfe:	4ba4      	ldr	r3, [pc, #656]	; (8005090 <TSR_call_Back+0x2a4>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	3b23      	subs	r3, #35	; 0x23
 8004e04:	2b1d      	cmp	r3, #29
 8004e06:	d860      	bhi.n	8004eca <TSR_call_Back+0xde>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <TSR_call_Back+0x24>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e89 	.word	0x08004e89
 8004e14:	08004ecb 	.word	0x08004ecb
 8004e18:	08004ecb 	.word	0x08004ecb
 8004e1c:	08004ec3 	.word	0x08004ec3
 8004e20:	08004ecb 	.word	0x08004ecb
 8004e24:	08004ecb 	.word	0x08004ecb
 8004e28:	08004ecb 	.word	0x08004ecb
 8004e2c:	08004e97 	.word	0x08004e97
 8004e30:	08004ead 	.word	0x08004ead
 8004e34:	08004ecb 	.word	0x08004ecb
 8004e38:	08004ecb 	.word	0x08004ecb
 8004e3c:	08004ecb 	.word	0x08004ecb
 8004e40:	08004e9f 	.word	0x08004e9f
 8004e44:	08004ecb 	.word	0x08004ecb
 8004e48:	08004ecb 	.word	0x08004ecb
 8004e4c:	08004ecb 	.word	0x08004ecb
 8004e50:	08004ecb 	.word	0x08004ecb
 8004e54:	08004ecb 	.word	0x08004ecb
 8004e58:	08004ecb 	.word	0x08004ecb
 8004e5c:	08004ecb 	.word	0x08004ecb
 8004e60:	08004ecb 	.word	0x08004ecb
 8004e64:	08004ecb 	.word	0x08004ecb
 8004e68:	08004ecb 	.word	0x08004ecb
 8004e6c:	08004ecb 	.word	0x08004ecb
 8004e70:	08004ecb 	.word	0x08004ecb
 8004e74:	08004ecb 	.word	0x08004ecb
 8004e78:	08004ecb 	.word	0x08004ecb
 8004e7c:	08004ecb 	.word	0x08004ecb
 8004e80:	08004ecb 	.word	0x08004ecb
 8004e84:	08004eb5 	.word	0x08004eb5
	case '#':
		TSR_START_Flag=1;
 8004e88:	4b82      	ldr	r3, [pc, #520]	; (8005094 <TSR_call_Back+0x2a8>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	701a      	strb	r2, [r3, #0]
		TSR_END_Flag=0;
 8004e8e:	4b82      	ldr	r3, [pc, #520]	; (8005098 <TSR_call_Back+0x2ac>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	701a      	strb	r2, [r3, #0]
		break;
 8004e94:	e019      	b.n	8004eca <TSR_call_Back+0xde>
	case '*':
		TSR_END_Flag=1;
 8004e96:	4b80      	ldr	r3, [pc, #512]	; (8005098 <TSR_call_Back+0x2ac>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	701a      	strb	r2, [r3, #0]
		break;
 8004e9c:	e015      	b.n	8004eca <TSR_call_Back+0xde>
	case 0x2F:
		FACE_START_Flag=1;
 8004e9e:	4b7f      	ldr	r3, [pc, #508]	; (800509c <TSR_call_Back+0x2b0>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	701a      	strb	r2, [r3, #0]
		FACE_END_Flag=0;
 8004ea4:	4b7e      	ldr	r3, [pc, #504]	; (80050a0 <TSR_call_Back+0x2b4>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
		break;
 8004eaa:	e00e      	b.n	8004eca <TSR_call_Back+0xde>
	case 0x2B:
		FACE_END_Flag=1;
 8004eac:	4b7c      	ldr	r3, [pc, #496]	; (80050a0 <TSR_call_Back+0x2b4>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
		break;
 8004eb2:	e00a      	b.n	8004eca <TSR_call_Back+0xde>

	case '@':
		DMS_START_OF_FRAME=1;
 8004eb4:	4b7b      	ldr	r3, [pc, #492]	; (80050a4 <TSR_call_Back+0x2b8>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	701a      	strb	r2, [r3, #0]
		DMS_END_OF_FRAME=0;
 8004eba:	4b7b      	ldr	r3, [pc, #492]	; (80050a8 <TSR_call_Back+0x2bc>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
		break;
 8004ec0:	e003      	b.n	8004eca <TSR_call_Back+0xde>
	case '&':
		DMS_END_OF_FRAME=1;
 8004ec2:	4b79      	ldr	r3, [pc, #484]	; (80050a8 <TSR_call_Back+0x2bc>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	701a      	strb	r2, [r3, #0]
		break;
 8004ec8:	bf00      	nop

	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////

	if (FACE_START_Flag){
 8004eca:	4b74      	ldr	r3, [pc, #464]	; (800509c <TSR_call_Back+0x2b0>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d043      	beq.n	8004f5a <TSR_call_Back+0x16e>
		if(PC_Counter ==0)
 8004ed2:	4b76      	ldr	r3, [pc, #472]	; (80050ac <TSR_call_Back+0x2c0>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <TSR_call_Back+0xf4>
			PC_Uart_Flag=0;
 8004eda:	4b6d      	ldr	r3, [pc, #436]	; (8005090 <TSR_call_Back+0x2a4>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]

		if(FACE_END_Flag ==0){
 8004ee0:	4b6f      	ldr	r3, [pc, #444]	; (80050a0 <TSR_call_Back+0x2b4>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d112      	bne.n	8004f0e <TSR_call_Back+0x122>
			GR_FACE_FLAG_ = (GR_FACE_FLAG_<<8)| PC_Uart_Flag;
 8004ee8:	4b71      	ldr	r3, [pc, #452]	; (80050b0 <TSR_call_Back+0x2c4>)
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	b21a      	sxth	r2, r3
 8004ef0:	4b67      	ldr	r3, [pc, #412]	; (8005090 <TSR_call_Back+0x2a4>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b21b      	sxth	r3, r3
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	b21b      	sxth	r3, r3
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	4b6c      	ldr	r3, [pc, #432]	; (80050b0 <TSR_call_Back+0x2c4>)
 8004efe:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 8004f00:	4b6a      	ldr	r3, [pc, #424]	; (80050ac <TSR_call_Back+0x2c0>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	3301      	adds	r3, #1
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	4b68      	ldr	r3, [pc, #416]	; (80050ac <TSR_call_Back+0x2c0>)
 8004f0a:	701a      	strb	r2, [r3, #0]
 8004f0c:	e025      	b.n	8004f5a <TSR_call_Back+0x16e>
			 * 0x0000 | 0x2F =0x
			 *
			 * */

		}else{
			GR_FACE_FLAG_ &=0x0F0F;
 8004f0e:	4b68      	ldr	r3, [pc, #416]	; (80050b0 <TSR_call_Back+0x2c4>)
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004f16:	4013      	ands	r3, r2
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <TSR_call_Back+0x2c4>)
 8004f1c:	801a      	strh	r2, [r3, #0]
			GR_FACE_FLAG_send = ((GR_FACE_FLAG_ &0x0F00)>>4) |((GR_FACE_FLAG_&0x000F));
 8004f1e:	4b64      	ldr	r3, [pc, #400]	; (80050b0 <TSR_call_Back+0x2c4>)
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	111b      	asrs	r3, r3, #4
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	f023 030f 	bic.w	r3, r3, #15
 8004f2a:	b25a      	sxtb	r2, r3
 8004f2c:	4b60      	ldr	r3, [pc, #384]	; (80050b0 <TSR_call_Back+0x2c4>)
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b25b      	sxtb	r3, r3
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	b25b      	sxtb	r3, r3
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	b25b      	sxtb	r3, r3
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	4b5d      	ldr	r3, [pc, #372]	; (80050b4 <TSR_call_Back+0x2c8>)
 8004f40:	701a      	strb	r2, [r3, #0]
			GR_FACE_FLAG_=0;
 8004f42:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <TSR_call_Back+0x2c4>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	801a      	strh	r2, [r3, #0]

			///////////////
			FACE_START_Flag=0;
 8004f48:	4b54      	ldr	r3, [pc, #336]	; (800509c <TSR_call_Back+0x2b0>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
			FACE_END_Flag=0;
 8004f4e:	4b54      	ldr	r3, [pc, #336]	; (80050a0 <TSR_call_Back+0x2b4>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 8004f54:	4b55      	ldr	r3, [pc, #340]	; (80050ac <TSR_call_Back+0x2c0>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	701a      	strb	r2, [r3, #0]
		}
	}
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	if(TSR_START_Flag){
 8004f5a:	4b4e      	ldr	r3, [pc, #312]	; (8005094 <TSR_call_Back+0x2a8>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d043      	beq.n	8004fea <TSR_call_Back+0x1fe>
		if(PC_Counter ==0)
 8004f62:	4b52      	ldr	r3, [pc, #328]	; (80050ac <TSR_call_Back+0x2c0>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <TSR_call_Back+0x184>
			PC_Uart_Flag=0;
 8004f6a:	4b49      	ldr	r3, [pc, #292]	; (8005090 <TSR_call_Back+0x2a4>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	701a      	strb	r2, [r3, #0]

		if(TSR_END_Flag ==0){
 8004f70:	4b49      	ldr	r3, [pc, #292]	; (8005098 <TSR_call_Back+0x2ac>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d112      	bne.n	8004f9e <TSR_call_Back+0x1b2>
			GR_TSR_FLAG_OLED = (GR_TSR_FLAG_OLED<<8)| PC_Uart_Flag;
 8004f78:	4b4f      	ldr	r3, [pc, #316]	; (80050b8 <TSR_call_Back+0x2cc>)
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	b21a      	sxth	r2, r3
 8004f80:	4b43      	ldr	r3, [pc, #268]	; (8005090 <TSR_call_Back+0x2a4>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	b21b      	sxth	r3, r3
 8004f86:	4313      	orrs	r3, r2
 8004f88:	b21b      	sxth	r3, r3
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	4b4a      	ldr	r3, [pc, #296]	; (80050b8 <TSR_call_Back+0x2cc>)
 8004f8e:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 8004f90:	4b46      	ldr	r3, [pc, #280]	; (80050ac <TSR_call_Back+0x2c0>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	3301      	adds	r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	4b44      	ldr	r3, [pc, #272]	; (80050ac <TSR_call_Back+0x2c0>)
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e025      	b.n	8004fea <TSR_call_Back+0x1fe>


		}else{
			GR_TSR_FLAG_OLED &=0x0F0F;
 8004f9e:	4b46      	ldr	r3, [pc, #280]	; (80050b8 <TSR_call_Back+0x2cc>)
 8004fa0:	881a      	ldrh	r2, [r3, #0]
 8004fa2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	4b43      	ldr	r3, [pc, #268]	; (80050b8 <TSR_call_Back+0x2cc>)
 8004fac:	801a      	strh	r2, [r3, #0]
			GR_TSR_FLAG_OLED_send = ((GR_TSR_FLAG_OLED &0x0F00)>>4) |((GR_TSR_FLAG_OLED&0x000F));
 8004fae:	4b42      	ldr	r3, [pc, #264]	; (80050b8 <TSR_call_Back+0x2cc>)
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	111b      	asrs	r3, r3, #4
 8004fb4:	b25b      	sxtb	r3, r3
 8004fb6:	f023 030f 	bic.w	r3, r3, #15
 8004fba:	b25a      	sxtb	r2, r3
 8004fbc:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <TSR_call_Back+0x2cc>)
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	b25b      	sxtb	r3, r3
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	b25b      	sxtb	r3, r3
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	b25b      	sxtb	r3, r3
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <TSR_call_Back+0x2d0>)
 8004fd0:	701a      	strb	r2, [r3, #0]
			GR_TSR_FLAG_OLED=0;
 8004fd2:	4b39      	ldr	r3, [pc, #228]	; (80050b8 <TSR_call_Back+0x2cc>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	801a      	strh	r2, [r3, #0]
			///////////////
			TSR_END_Flag=0;
 8004fd8:	4b2f      	ldr	r3, [pc, #188]	; (8005098 <TSR_call_Back+0x2ac>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
			TSR_START_Flag=0;
 8004fde:	4b2d      	ldr	r3, [pc, #180]	; (8005094 <TSR_call_Back+0x2a8>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 8004fe4:	4b31      	ldr	r3, [pc, #196]	; (80050ac <TSR_call_Back+0x2c0>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
		}
	}
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	if(DMS_START_OF_FRAME){
 8004fea:	4b2e      	ldr	r3, [pc, #184]	; (80050a4 <TSR_call_Back+0x2b8>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d049      	beq.n	8005086 <TSR_call_Back+0x29a>
		if(PC_Counter ==0)
 8004ff2:	4b2e      	ldr	r3, [pc, #184]	; (80050ac <TSR_call_Back+0x2c0>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <TSR_call_Back+0x214>
			PC_Uart_Flag=0;
 8004ffa:	4b25      	ldr	r3, [pc, #148]	; (8005090 <TSR_call_Back+0x2a4>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	701a      	strb	r2, [r3, #0]

		if(DMS_END_OF_FRAME ==0){
 8005000:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <TSR_call_Back+0x2bc>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d112      	bne.n	800502e <TSR_call_Back+0x242>
			GR_DMS_FLAG_ = (GR_DMS_FLAG_<<8)| PC_Uart_Flag;
 8005008:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <TSR_call_Back+0x2d4>)
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	b21a      	sxth	r2, r3
 8005010:	4b1f      	ldr	r3, [pc, #124]	; (8005090 <TSR_call_Back+0x2a4>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b21b      	sxth	r3, r3
 8005016:	4313      	orrs	r3, r2
 8005018:	b21b      	sxth	r3, r3
 800501a:	b29a      	uxth	r2, r3
 800501c:	4b28      	ldr	r3, [pc, #160]	; (80050c0 <TSR_call_Back+0x2d4>)
 800501e:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 8005020:	4b22      	ldr	r3, [pc, #136]	; (80050ac <TSR_call_Back+0x2c0>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	b2da      	uxtb	r2, r3
 8005028:	4b20      	ldr	r3, [pc, #128]	; (80050ac <TSR_call_Back+0x2c0>)
 800502a:	701a      	strb	r2, [r3, #0]





}
 800502c:	e02b      	b.n	8005086 <TSR_call_Back+0x29a>
			GR_DMS_FLAG_ &=0x0F0F;
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <TSR_call_Back+0x2d4>)
 8005030:	881a      	ldrh	r2, [r3, #0]
 8005032:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005036:	4013      	ands	r3, r2
 8005038:	b29a      	uxth	r2, r3
 800503a:	4b21      	ldr	r3, [pc, #132]	; (80050c0 <TSR_call_Back+0x2d4>)
 800503c:	801a      	strh	r2, [r3, #0]
			GR_DMS_FLAG_send = ((GR_DMS_FLAG_ &0x0F00)>>4) |((GR_DMS_FLAG_&0x000F));
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <TSR_call_Back+0x2d4>)
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	111b      	asrs	r3, r3, #4
 8005044:	b25b      	sxtb	r3, r3
 8005046:	f023 030f 	bic.w	r3, r3, #15
 800504a:	b25a      	sxtb	r2, r3
 800504c:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <TSR_call_Back+0x2d4>)
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b25b      	sxtb	r3, r3
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	b25b      	sxtb	r3, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	b25b      	sxtb	r3, r3
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4b19      	ldr	r3, [pc, #100]	; (80050c4 <TSR_call_Back+0x2d8>)
 8005060:	701a      	strb	r2, [r3, #0]
			GR_DMS_FLAG_=0;
 8005062:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <TSR_call_Back+0x2d4>)
 8005064:	2200      	movs	r2, #0
 8005066:	801a      	strh	r2, [r3, #0]
			MCAL_USART_SendData(TSR_UART_INSTANT, GR_DMS_FLAG_send);
 8005068:	4b16      	ldr	r3, [pc, #88]	; (80050c4 <TSR_call_Back+0x2d8>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	4619      	mov	r1, r3
 800506e:	4807      	ldr	r0, [pc, #28]	; (800508c <TSR_call_Back+0x2a0>)
 8005070:	f7ff f976 	bl	8004360 <MCAL_USART_SendData>
			DMS_START_OF_FRAME=0;
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <TSR_call_Back+0x2b8>)
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
			DMS_END_OF_FRAME=0;
 800507a:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <TSR_call_Back+0x2bc>)
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <TSR_call_Back+0x2c0>)
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40013800 	.word	0x40013800
 8005090:	20004280 	.word	0x20004280
 8005094:	20004281 	.word	0x20004281
 8005098:	20004282 	.word	0x20004282
 800509c:	20004283 	.word	0x20004283
 80050a0:	20004284 	.word	0x20004284
 80050a4:	20004296 	.word	0x20004296
 80050a8:	20004297 	.word	0x20004297
 80050ac:	2000427f 	.word	0x2000427f
 80050b0:	20004286 	.word	0x20004286
 80050b4:	20004288 	.word	0x20004288
 80050b8:	2000427c 	.word	0x2000427c
 80050bc:	2000427e 	.word	0x2000427e
 80050c0:	20004298 	.word	0x20004298
 80050c4:	2000429a 	.word	0x2000429a

080050c8 <TSR_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_init(void){
 80050c8:	b590      	push	{r4, r7, lr}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,TSR_call_Back};
 80050ce:	4b07      	ldr	r3, [pc, #28]	; (80050ec <TSR_init+0x24>)
 80050d0:	463c      	mov	r4, r7
 80050d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(TSR_UART_INSTANT, &UART1_CON);
 80050d8:	463b      	mov	r3, r7
 80050da:	4619      	mov	r1, r3
 80050dc:	4804      	ldr	r0, [pc, #16]	; (80050f0 <TSR_init+0x28>)
 80050de:	f7fe ffd3 	bl	8004088 <MCAL_USART_init>
}
 80050e2:	bf00      	nop
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd90      	pop	{r4, r7, pc}
 80050ea:	bf00      	nop
 80050ec:	080055e4 	.word	0x080055e4
 80050f0:	40013800 	.word	0x40013800

080050f4 <CAR_ON_Handler>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void CAR_ON_Handler(){
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af04      	add	r7, sp, #16
	CAR_login_counter=0;
 80050fa:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <CAR_ON_Handler+0xac>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
	if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==0) ){
 8005100:	2101      	movs	r1, #1
 8005102:	4828      	ldr	r0, [pc, #160]	; (80051a4 <CAR_ON_Handler+0xb0>)
 8005104:	f7fd ff3a 	bl	8002f7c <MCAL_Read_PIN>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d145      	bne.n	800519a <CAR_ON_Handler+0xa6>
		_TIM1_delay_ms(30); //depouncing delay
 800510e:	201e      	movs	r0, #30
 8005110:	f7fe ffa2 	bl	8004058 <_TIM1_delay_ms>
		if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==0) ){
 8005114:	2101      	movs	r1, #1
 8005116:	4823      	ldr	r0, [pc, #140]	; (80051a4 <CAR_ON_Handler+0xb0>)
 8005118:	f7fd ff30 	bl	8002f7c <MCAL_Read_PIN>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d13b      	bne.n	800519a <CAR_ON_Handler+0xa6>

			if(CAR_ON_counter ==1 &&GR_FACE_FLAG_send !=0x99&&GR_FACE_FLAG_send !=0x00){
 8005122:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <CAR_ON_Handler+0xb4>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d137      	bne.n	800519a <CAR_ON_Handler+0xa6>
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <CAR_ON_Handler+0xb8>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b99      	cmp	r3, #153	; 0x99
 8005130:	d033      	beq.n	800519a <CAR_ON_Handler+0xa6>
 8005132:	4b1e      	ldr	r3, [pc, #120]	; (80051ac <CAR_ON_Handler+0xb8>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d02f      	beq.n	800519a <CAR_ON_Handler+0xa6>

				CAR_ON_counter=0;
 800513a:	4b1b      	ldr	r3, [pc, #108]	; (80051a8 <CAR_ON_Handler+0xb4>)
 800513c:	2200      	movs	r2, #0
 800513e:	701a      	strb	r2, [r3, #0]
				GR_FACE_FLAG_send=0;
 8005140:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <CAR_ON_Handler+0xb8>)
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
				CAR_login_counter=0;
 8005146:	4b16      	ldr	r3, [pc, #88]	; (80051a0 <CAR_ON_Handler+0xac>)
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]
				DMS__zero_COUNTER=0;
 800514c:	4b18      	ldr	r3, [pc, #96]	; (80051b0 <CAR_ON_Handler+0xbc>)
 800514e:	2200      	movs	r2, #0
 8005150:	701a      	strb	r2, [r3, #0]
				DMS__one_COUNTER=0;
 8005152:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <CAR_ON_Handler+0xc0>)
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
				DMS_WAIT_COUNTER=0;
 8005158:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <CAR_ON_Handler+0xc4>)
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
				//UART SEND
				//
				_TIM1_delay_ms(1);
 800515e:	2001      	movs	r0, #1
 8005160:	f7fe ff7a 	bl	8004058 <_TIM1_delay_ms>

				ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8005164:	2040      	movs	r0, #64	; 0x40
 8005166:	f7ff fbff 	bl	8004968 <ACC_FROM_ADC_TO_DAC>
				MCAL_USART_SendData(TSR_UART_INSTANT,CAR_OFF_FLAG);
 800516a:	2133      	movs	r1, #51	; 0x33
 800516c:	4813      	ldr	r0, [pc, #76]	; (80051bc <CAR_ON_Handler+0xc8>)
 800516e:	f7ff f8f7 	bl	8004360 <MCAL_USART_SendData>
				_TIM1_delay_ms(30);
 8005172:	201e      	movs	r0, #30
 8005174:	f7fe ff70 	bl	8004058 <_TIM1_delay_ms>
				TFT_SET_BACKGROUND(0,159,0,127,0xff,0xff,0xff);
 8005178:	23ff      	movs	r3, #255	; 0xff
 800517a:	9302      	str	r3, [sp, #8]
 800517c:	23ff      	movs	r3, #255	; 0xff
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	23ff      	movs	r3, #255	; 0xff
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	237f      	movs	r3, #127	; 0x7f
 8005186:	2200      	movs	r2, #0
 8005188:	219f      	movs	r1, #159	; 0x9f
 800518a:	2000      	movs	r0, #0
 800518c:	f7fc fbb7 	bl	80018fe <TFT_SET_BACKGROUND>
				vTaskResume(FACE_ID_TASK_Handle);
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <CAR_ON_Handler+0xcc>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7fb fb17 	bl	80007c8 <vTaskResume>
		}

	}


}
 800519a:	bf00      	nop
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20004291 	.word	0x20004291
 80051a4:	40010c00 	.word	0x40010c00
 80051a8:	20004290 	.word	0x20004290
 80051ac:	20004288 	.word	0x20004288
 80051b0:	20004292 	.word	0x20004292
 80051b4:	20004293 	.word	0x20004293
 80051b8:	20004295 	.word	0x20004295
 80051bc:	40013800 	.word	0x40013800
 80051c0:	2000429c 	.word	0x2000429c

080051c4 <CAR_ON_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void CAR_ON_init(){
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	; 0x28
 80051c8:	af00      	add	r7, sp, #0
	EXTI_config_t CAR_BOTTON_SITTING={EXT1PB1,FALLING,ENABLE,CAR_ON_Handler};
 80051ca:	2301      	movs	r3, #1
 80051cc:	82bb      	strh	r3, [r7, #20]
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <CAR_ON_init+0x50>)
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	2301      	movs	r3, #1
 80051d4:	83bb      	strh	r3, [r7, #28]
 80051d6:	2307      	movs	r3, #7
 80051d8:	83fb      	strh	r3, [r7, #30]
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 3020 	strb.w	r3, [r7, #32]
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <CAR_ON_init+0x54>)
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
	MCAL_EXTI_init(&CAR_BOTTON_SITTING);
 80051ea:	f107 0314 	add.w	r3, r7, #20
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd fbaa 	bl	8002948 <MCAL_EXTI_init>
	PIN_config pin={CONTACT_BOTTON_PIN,INPUT_PD};
 80051f4:	2300      	movs	r3, #0
 80051f6:	607b      	str	r3, [r7, #4]
 80051f8:	2301      	movs	r3, #1
 80051fa:	80bb      	strh	r3, [r7, #4]
 80051fc:	2303      	movs	r3, #3
 80051fe:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init(CONTACT_BOTTON_PORT, &pin);
 8005200:	1d3b      	adds	r3, r7, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4803      	ldr	r0, [pc, #12]	; (8005214 <CAR_ON_init+0x50>)
 8005206:	f7fd fda7 	bl	8002d58 <MCAL_GPIO_init>
}
 800520a:	bf00      	nop
 800520c:	3728      	adds	r7, #40	; 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40010c00 	.word	0x40010c00
 8005218:	080050f5 	.word	0x080050f5

0800521c <FACE_ID_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void FACE_ID_TASK(){
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
	while(1){
		//		_TIM1_delay_ms(500);
		if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==1) ){
 8005220:	2101      	movs	r1, #1
 8005222:	4820      	ldr	r0, [pc, #128]	; (80052a4 <FACE_ID_TASK+0x88>)
 8005224:	f7fd feaa 	bl	8002f7c <MCAL_Read_PIN>
 8005228:	4603      	mov	r3, r0
 800522a:	2b01      	cmp	r3, #1
 800522c:	d1f8      	bne.n	8005220 <FACE_ID_TASK+0x4>
			_TIM1_delay_ms(30); //depouncing delay
 800522e:	201e      	movs	r0, #30
 8005230:	f7fe ff12 	bl	8004058 <_TIM1_delay_ms>
			if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==1) ){
 8005234:	2101      	movs	r1, #1
 8005236:	481b      	ldr	r0, [pc, #108]	; (80052a4 <FACE_ID_TASK+0x88>)
 8005238:	f7fd fea0 	bl	8002f7c <MCAL_Read_PIN>
 800523c:	4603      	mov	r3, r0
 800523e:	2b01      	cmp	r3, #1
 8005240:	d1ee      	bne.n	8005220 <FACE_ID_TASK+0x4>
				//UART SEND

				if(CAR_login_counter==0){
 8005242:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <FACE_ID_TASK+0x8c>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d109      	bne.n	800525e <FACE_ID_TASK+0x42>
					MCAL_USART_SendData(TSR_UART_INSTANT,CAR_ON_FLAG);
 800524a:	2122      	movs	r1, #34	; 0x22
 800524c:	4817      	ldr	r0, [pc, #92]	; (80052ac <FACE_ID_TASK+0x90>)
 800524e:	f7ff f887 	bl	8004360 <MCAL_USART_SendData>
					CAR_login_counter++;
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <FACE_ID_TASK+0x8c>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <FACE_ID_TASK+0x8c>)
 800525c:	701a      	strb	r2, [r3, #0]
				}

//				GR_FACE_FLAG_send =0x98;
				if(GR_FACE_FLAG_send !=0x99 && GR_FACE_FLAG_send !=0x00){
 800525e:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <FACE_ID_TASK+0x94>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b99      	cmp	r3, #153	; 0x99
 8005264:	d0dc      	beq.n	8005220 <FACE_ID_TASK+0x4>
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <FACE_ID_TASK+0x94>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0d8      	beq.n	8005220 <FACE_ID_TASK+0x4>
					CAR_ON_counter=1;
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <FACE_ID_TASK+0x98>)
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
					CAR_login_counter=0;
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <FACE_ID_TASK+0x8c>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]

					TFT_Welcome_ICON_Print();
 800527a:	f7fc fbe3 	bl	8001a44 <TFT_Welcome_ICON_Print>
					_TIM1_delay_ms(1);
 800527e:	2001      	movs	r0, #1
 8005280:	f7fe feea 	bl	8004058 <_TIM1_delay_ms>

					TFT_SPEED_ICON_Print();
 8005284:	f7fc fbc2 	bl	8001a0c <TFT_SPEED_ICON_Print>
					_TIM1_delay_ms(1);
 8005288:	2001      	movs	r0, #1
 800528a:	f7fe fee5 	bl	8004058 <_TIM1_delay_ms>

					TFT_KM_H_ICON_Print();
 800528e:	f7fc fc05 	bl	8001a9c <TFT_KM_H_ICON_Print>
					_TIM1_delay_ms(1);
 8005292:	2001      	movs	r0, #1
 8005294:	f7fe fee0 	bl	8004058 <_TIM1_delay_ms>

					vTaskSuspend(FACE_ID_TASK_Handle);
 8005298:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <FACE_ID_TASK+0x9c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f7fb f9e3 	bl	8000668 <vTaskSuspend>
		if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==1) ){
 80052a2:	e7bd      	b.n	8005220 <FACE_ID_TASK+0x4>
 80052a4:	40010c00 	.word	0x40010c00
 80052a8:	20004291 	.word	0x20004291
 80052ac:	40013800 	.word	0x40013800
 80052b0:	20004288 	.word	0x20004288
 80052b4:	20004290 	.word	0x20004290
 80052b8:	2000429c 	.word	0x2000429c

080052bc <HW_init>:
 * @retval -
 * Note-
 */


void HW_init(){
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
	Sys_Clk_init();
 80052c0:	f7ff f988 	bl	80045d4 <Sys_Clk_init>
	_TIM1_delay_ms(100);
 80052c4:	2064      	movs	r0, #100	; 0x64
 80052c6:	f7fe fec7 	bl	8004058 <_TIM1_delay_ms>
	////////////*********TFT_init***************//////////////////
	TFT_init(RGB_5_6_5);
 80052ca:	2055      	movs	r0, #85	; 0x55
 80052cc:	f7fc f9fe 	bl	80016cc <TFT_init>
	_TIM1_delay_ms(100);
 80052d0:	2064      	movs	r0, #100	; 0x64
 80052d2:	f7fe fec1 	bl	8004058 <_TIM1_delay_ms>

	////////////*********TSR init***************//////////////////
	TSR_init();
 80052d6:	f7ff fef7 	bl	80050c8 <TSR_init>
	_TIM1_delay_ms(100);
 80052da:	2064      	movs	r0, #100	; 0x64
 80052dc:	f7fe febc 	bl	8004058 <_TIM1_delay_ms>

	////////////*********ACC_throtel_init*********//////////////////
	ACC_throtel_init();
 80052e0:	f7ff faae 	bl	8004840 <ACC_throtel_init>
	_TIM1_delay_ms(100);
 80052e4:	2064      	movs	r0, #100	; 0x64
 80052e6:	f7fe feb7 	bl	8004058 <_TIM1_delay_ms>

	////////////*********DAC init***************//////////////////
	ACC_DAC_init();
 80052ea:	f7ff fad9 	bl	80048a0 <ACC_DAC_init>
	_TIM1_delay_ms(100);
 80052ee:	2064      	movs	r0, #100	; 0x64
 80052f0:	f7fe feb2 	bl	8004058 <_TIM1_delay_ms>

	////////////*********DMS_init***************//////////////////
	DMS_init();
 80052f4:	f7fb ff98 	bl	8001228 <DMS_init>
	_TIM1_delay_ms(100);
 80052f8:	2064      	movs	r0, #100	; 0x64
 80052fa:	f7fe fead 	bl	8004058 <_TIM1_delay_ms>

	////////////*********CAR_ON_init***************//////////////////
	CAR_ON_init();
 80052fe:	f7ff ff61 	bl	80051c4 <CAR_ON_init>
	_TIM1_delay_ms(100);
 8005302:	2064      	movs	r0, #100	; 0x64
 8005304:	f7fe fea8 	bl	8004058 <_TIM1_delay_ms>
	////////////*********HALL_EFECT_Init***************//////////////////

	HALL_EFECT_Init();
 8005308:	f7ff f9da 	bl	80046c0 <HALL_EFECT_Init>
	_TIM1_delay_ms(100);
 800530c:	2064      	movs	r0, #100	; 0x64
 800530e:	f7fe fea3 	bl	8004058 <_TIM1_delay_ms>
	////////////*********LUNA_INIT***************//////////////////
	LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
 8005312:	2100      	movs	r1, #0
 8005314:	2000      	movs	r0, #0
 8005316:	f7fc f8af 	bl	8001478 <LUNA_INIT>
	_TIM1_delay_ms(100);
 800531a:	2064      	movs	r0, #100	; 0x64
 800531c:	f7fe fe9c 	bl	8004058 <_TIM1_delay_ms>

}
 8005320:	bf00      	nop
 8005322:	bd80      	pop	{r7, pc}

08005324 <main>:
int main(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af02      	add	r7, sp, #8
	//	_TIM1_delay_s(2);
	HW_init();
 800532a:	f7ff ffc7 	bl	80052bc <HW_init>

	///////////////////////////
	if(xTaskCreate(ACC_throttel_Handller_TASK,"ACC_throttel_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 800532e:	2300      	movs	r3, #0
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	2302      	movs	r3, #2
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	2300      	movs	r3, #0
 8005338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800533c:	492d      	ldr	r1, [pc, #180]	; (80053f4 <main+0xd0>)
 800533e:	482e      	ldr	r0, [pc, #184]	; (80053f8 <main+0xd4>)
 8005340:	f7fa ff8d 	bl	800025e <xTaskCreate>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d001      	beq.n	800534e <main+0x2a>
		Error_Handller();
 800534a:	f7ff f93f 	bl	80045cc <Error_Handller>
	}

	if(xTaskCreate(ACC_Handller_TASK,"ACC_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 800534e:	2300      	movs	r3, #0
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	2302      	movs	r3, #2
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	2300      	movs	r3, #0
 8005358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800535c:	4927      	ldr	r1, [pc, #156]	; (80053fc <main+0xd8>)
 800535e:	4828      	ldr	r0, [pc, #160]	; (8005400 <main+0xdc>)
 8005360:	f7fa ff7d 	bl	800025e <xTaskCreate>
 8005364:	4603      	mov	r3, r0
 8005366:	2b01      	cmp	r3, #1
 8005368:	d001      	beq.n	800536e <main+0x4a>
		Error_Handller();
 800536a:	f7ff f92f 	bl	80045cc <Error_Handller>
	}


	if(xTaskCreate(ACC_STATE_READ_TASK,"BOTTON_READ",256,NULL,2,&ACC_STATE_READ_TASK_Handle)!=pdPASS ){
 800536e:	4b25      	ldr	r3, [pc, #148]	; (8005404 <main+0xe0>)
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	2302      	movs	r3, #2
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	2300      	movs	r3, #0
 8005378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800537c:	4922      	ldr	r1, [pc, #136]	; (8005408 <main+0xe4>)
 800537e:	4823      	ldr	r0, [pc, #140]	; (800540c <main+0xe8>)
 8005380:	f7fa ff6d 	bl	800025e <xTaskCreate>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d001      	beq.n	800538e <main+0x6a>
		Error_Handller();
 800538a:	f7ff f91f 	bl	80045cc <Error_Handller>
	}
	///////////////////////

	if(xTaskCreate(TFT_Handller_TASK,"TFT_Handller_TASK",256,NULL,2,&TSR_Handller_TASK_Handle)!=pdPASS ){
 800538e:	4b20      	ldr	r3, [pc, #128]	; (8005410 <main+0xec>)
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	2302      	movs	r3, #2
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	2300      	movs	r3, #0
 8005398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800539c:	491d      	ldr	r1, [pc, #116]	; (8005414 <main+0xf0>)
 800539e:	481e      	ldr	r0, [pc, #120]	; (8005418 <main+0xf4>)
 80053a0:	f7fa ff5d 	bl	800025e <xTaskCreate>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d001      	beq.n	80053ae <main+0x8a>
		Error_Handller();
 80053aa:	f7ff f90f 	bl	80045cc <Error_Handller>
	}

	///////////////////////

	if(xTaskCreate(DMS_Handller_TASK,"DMS_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 80053ae:	2300      	movs	r3, #0
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	2302      	movs	r3, #2
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2300      	movs	r3, #0
 80053b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053bc:	4917      	ldr	r1, [pc, #92]	; (800541c <main+0xf8>)
 80053be:	4818      	ldr	r0, [pc, #96]	; (8005420 <main+0xfc>)
 80053c0:	f7fa ff4d 	bl	800025e <xTaskCreate>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d001      	beq.n	80053ce <main+0xaa>
		Error_Handller();
 80053ca:	f7ff f8ff 	bl	80045cc <Error_Handller>
	}


	///////////////////////
	if(xTaskCreate(FACE_ID_TASK,"FACE_ID_TASK",256,NULL,5,&FACE_ID_TASK_Handle)!=pdPASS ){
 80053ce:	4b15      	ldr	r3, [pc, #84]	; (8005424 <main+0x100>)
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	2305      	movs	r3, #5
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	2300      	movs	r3, #0
 80053d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053dc:	4912      	ldr	r1, [pc, #72]	; (8005428 <main+0x104>)
 80053de:	4813      	ldr	r0, [pc, #76]	; (800542c <main+0x108>)
 80053e0:	f7fa ff3d 	bl	800025e <xTaskCreate>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d001      	beq.n	80053ee <main+0xca>
		Error_Handller();
 80053ea:	f7ff f8ef 	bl	80045cc <Error_Handller>
	}


	//    MCAL_USART_SendData(TSR_UART_INSTANT, 'D');

	vTaskStartScheduler();
 80053ee:	f7fb fa63 	bl	80008b8 <vTaskStartScheduler>

	for(;;);
 80053f2:	e7fe      	b.n	80053f2 <main+0xce>
 80053f4:	080055f4 	.word	0x080055f4
 80053f8:	08004ae9 	.word	0x08004ae9
 80053fc:	08005610 	.word	0x08005610
 8005400:	08004a41 	.word	0x08004a41
 8005404:	200042a4 	.word	0x200042a4
 8005408:	08005624 	.word	0x08005624
 800540c:	08004be1 	.word	0x08004be1
 8005410:	200042a0 	.word	0x200042a0
 8005414:	08005630 	.word	0x08005630
 8005418:	08004d3d 	.word	0x08004d3d
 800541c:	08005644 	.word	0x08005644
 8005420:	08004751 	.word	0x08004751
 8005424:	2000429c 	.word	0x2000429c
 8005428:	08005658 	.word	0x08005658
 800542c:	0800521d 	.word	0x0800521d

08005430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005430:	480d      	ldr	r0, [pc, #52]	; (8005468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005434:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005438:	480c      	ldr	r0, [pc, #48]	; (800546c <LoopForever+0x6>)
  ldr r1, =_edata
 800543a:	490d      	ldr	r1, [pc, #52]	; (8005470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800543c:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <LoopForever+0xe>)
  movs r3, #0
 800543e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005440:	e002      	b.n	8005448 <LoopCopyDataInit>

08005442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005446:	3304      	adds	r3, #4

08005448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800544a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800544c:	d3f9      	bcc.n	8005442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800544e:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005450:	4c0a      	ldr	r4, [pc, #40]	; (800547c <LoopForever+0x16>)
  movs r3, #0
 8005452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005454:	e001      	b.n	800545a <LoopFillZerobss>

08005456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005458:	3204      	adds	r2, #4

0800545a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800545a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800545c:	d3fb      	bcc.n	8005456 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800545e:	f000 f819 	bl	8005494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005462:	f7ff ff5f 	bl	8005324 <main>

08005466 <LoopForever>:

LoopForever:
  b LoopForever
 8005466:	e7fe      	b.n	8005466 <LoopForever>
  ldr   r0, =_estack
 8005468:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800546c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005470:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8005474:	0801f0e8 	.word	0x0801f0e8
  ldr r2, =_sbss
 8005478:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800547c:	200042a8 	.word	0x200042a8

08005480 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005480:	e7fe      	b.n	8005480 <ADC3_IRQHandler>

08005482 <memset>:
 8005482:	4603      	mov	r3, r0
 8005484:	4402      	add	r2, r0
 8005486:	4293      	cmp	r3, r2
 8005488:	d100      	bne.n	800548c <memset+0xa>
 800548a:	4770      	bx	lr
 800548c:	f803 1b01 	strb.w	r1, [r3], #1
 8005490:	e7f9      	b.n	8005486 <memset+0x4>
	...

08005494 <__libc_init_array>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	2600      	movs	r6, #0
 8005498:	4d0c      	ldr	r5, [pc, #48]	; (80054cc <__libc_init_array+0x38>)
 800549a:	4c0d      	ldr	r4, [pc, #52]	; (80054d0 <__libc_init_array+0x3c>)
 800549c:	1b64      	subs	r4, r4, r5
 800549e:	10a4      	asrs	r4, r4, #2
 80054a0:	42a6      	cmp	r6, r4
 80054a2:	d109      	bne.n	80054b8 <__libc_init_array+0x24>
 80054a4:	f000 f81a 	bl	80054dc <_init>
 80054a8:	2600      	movs	r6, #0
 80054aa:	4d0a      	ldr	r5, [pc, #40]	; (80054d4 <__libc_init_array+0x40>)
 80054ac:	4c0a      	ldr	r4, [pc, #40]	; (80054d8 <__libc_init_array+0x44>)
 80054ae:	1b64      	subs	r4, r4, r5
 80054b0:	10a4      	asrs	r4, r4, #2
 80054b2:	42a6      	cmp	r6, r4
 80054b4:	d105      	bne.n	80054c2 <__libc_init_array+0x2e>
 80054b6:	bd70      	pop	{r4, r5, r6, pc}
 80054b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054bc:	4798      	blx	r3
 80054be:	3601      	adds	r6, #1
 80054c0:	e7ee      	b.n	80054a0 <__libc_init_array+0xc>
 80054c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c6:	4798      	blx	r3
 80054c8:	3601      	adds	r6, #1
 80054ca:	e7f2      	b.n	80054b2 <__libc_init_array+0x1e>
 80054cc:	0801f0e0 	.word	0x0801f0e0
 80054d0:	0801f0e0 	.word	0x0801f0e0
 80054d4:	0801f0e0 	.word	0x0801f0e0
 80054d8:	0801f0e4 	.word	0x0801f0e4

080054dc <_init>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr

080054e8 <_fini>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr
