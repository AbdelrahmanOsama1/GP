
Graduation_Project_Finall.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000471c  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000187d8  0800484c  0800484c  0001484c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d024  0801d024  00030024  2**0
                  CONTENTS
  4 .ARM          00000000  0801d024  0801d024  00030024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801d024  0801d024  00030024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d024  0801d024  0002d024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d028  0801d028  0002d028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0801d02c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004234  20000024  0801d050  00030024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004258  0801d050  00034258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7fb  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002323  00000000  00000000  0003e88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000036fe  00000000  00000000  00040bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007b8  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000006a0  00000000  00000000  00044a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000186d  00000000  00000000  00045108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009f15  00000000  00000000  00046975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00013c52  00000000  00000000  0005088a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ba0  00000000  00000000  000644dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08004834 	.word	0x08004834

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08004834 	.word	0x08004834

08000170 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	691b      	ldr	r3, [r3, #16]
 8000218:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	6892      	ldr	r2, [r2, #8]
 8000222:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	6852      	ldr	r2, [r2, #4]
 800022c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	429a      	cmp	r2, r3
 8000236:	d103      	bne.n	8000240 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689a      	ldr	r2, [r3, #8]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	1e5a      	subs	r2, r3, #1
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	681b      	ldr	r3, [r3, #0]
}
 8000254:	4618      	mov	r0, r3
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800025e:	b580      	push	{r7, lr}
 8000260:	b08c      	sub	sp, #48	; 0x30
 8000262:	af04      	add	r7, sp, #16
 8000264:	60f8      	str	r0, [r7, #12]
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	603b      	str	r3, [r7, #0]
 800026a:	4613      	mov	r3, r2
 800026c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f000 ff7c 	bl	8001170 <pvPortMalloc>
 8000278:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d013      	beq.n	80002a8 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000280:	2054      	movs	r0, #84	; 0x54
 8000282:	f000 ff75 	bl	8001170 <pvPortMalloc>
 8000286:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800028e:	2254      	movs	r2, #84	; 0x54
 8000290:	2100      	movs	r1, #0
 8000292:	69f8      	ldr	r0, [r7, #28]
 8000294:	f004 faa1 	bl	80047da <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000298:	69fb      	ldr	r3, [r7, #28]
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	631a      	str	r2, [r3, #48]	; 0x30
 800029e:	e005      	b.n	80002ac <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80002a0:	6978      	ldr	r0, [r7, #20]
 80002a2:	f000 ffb7 	bl	8001214 <vPortFree>
 80002a6:	e001      	b.n	80002ac <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80002ac:	69fb      	ldr	r3, [r7, #28]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d013      	beq.n	80002da <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80002b2:	88fa      	ldrh	r2, [r7, #6]
 80002b4:	2300      	movs	r3, #0
 80002b6:	9303      	str	r3, [sp, #12]
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	9302      	str	r3, [sp, #8]
 80002bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002be:	9301      	str	r3, [sp, #4]
 80002c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c2:	9300      	str	r3, [sp, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	68b9      	ldr	r1, [r7, #8]
 80002c8:	68f8      	ldr	r0, [r7, #12]
 80002ca:	f000 f80e 	bl	80002ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80002ce:	69f8      	ldr	r0, [r7, #28]
 80002d0:	f000 f874 	bl	80003bc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80002d4:	2301      	movs	r3, #1
 80002d6:	61bb      	str	r3, [r7, #24]
 80002d8:	e002      	b.n	80002e0 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80002da:	f04f 33ff 	mov.w	r3, #4294967295
 80002de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80002e0:	69bb      	ldr	r3, [r7, #24]
    }
 80002e2:	4618      	mov	r0, r3
 80002e4:	3720      	adds	r7, #32
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80002ea:	b580      	push	{r7, lr}
 80002ec:	b086      	sub	sp, #24
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	60f8      	str	r0, [r7, #12]
 80002f2:	60b9      	str	r1, [r7, #8]
 80002f4:	607a      	str	r2, [r7, #4]
 80002f6:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80002f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000302:	3b01      	subs	r3, #1
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	4413      	add	r3, r2
 8000308:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	f023 0307 	bic.w	r3, r3, #7
 8000310:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d01e      	beq.n	8000356 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	e012      	b.n	8000344 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4413      	add	r3, r2
 8000324:	7819      	ldrb	r1, [r3, #0]
 8000326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	4413      	add	r3, r2
 800032c:	3334      	adds	r3, #52	; 0x34
 800032e:	460a      	mov	r2, r1
 8000330:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000332:	68ba      	ldr	r2, [r7, #8]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	4413      	add	r3, r2
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d006      	beq.n	800034c <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	2b0f      	cmp	r3, #15
 8000348:	d9e9      	bls.n	800031e <prvInitialiseNewTask+0x34>
 800034a:	e000      	b.n	800034e <prvInitialiseNewTask+0x64>
            {
                break;
 800034c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800034e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000356:	6a3b      	ldr	r3, [r7, #32]
 8000358:	2b04      	cmp	r3, #4
 800035a:	d901      	bls.n	8000360 <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800035c:	2304      	movs	r3, #4
 800035e:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000362:	6a3a      	ldr	r2, [r7, #32]
 8000364:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000368:	6a3a      	ldr	r2, [r7, #32]
 800036a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036e:	3304      	adds	r3, #4
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff1c 	bl	80001ae <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000378:	3318      	adds	r3, #24
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff17 	bl	80001ae <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000384:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000386:	6a3b      	ldr	r3, [r7, #32]
 8000388:	f1c3 0205 	rsb	r2, r3, #5
 800038c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000394:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	68f9      	ldr	r1, [r7, #12]
 800039a:	6938      	ldr	r0, [r7, #16]
 800039c:	f000 fdbe 	bl	8000f1c <pxPortInitialiseStack>
 80003a0:	4602      	mov	r2, r0
 80003a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a4:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80003a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d002      	beq.n	80003b2 <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80003ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80003b2:	bf00      	nop
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80003c4:	f000 fe3a 	bl	800103c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80003c8:	4b3e      	ldr	r3, [pc, #248]	; (80004c4 <prvAddNewTaskToReadyList+0x108>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	4a3d      	ldr	r2, [pc, #244]	; (80004c4 <prvAddNewTaskToReadyList+0x108>)
 80003d0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80003d2:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d109      	bne.n	80003ee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80003da:	4a3b      	ldr	r2, [pc, #236]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80003e0:	4b38      	ldr	r3, [pc, #224]	; (80004c4 <prvAddNewTaskToReadyList+0x108>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d110      	bne.n	800040a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80003e8:	f000 fd00 	bl	8000dec <prvInitialiseTaskLists>
 80003ec:	e00d      	b.n	800040a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80003ee:	4b37      	ldr	r3, [pc, #220]	; (80004cc <prvAddNewTaskToReadyList+0x110>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d109      	bne.n	800040a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80003f6:	4b34      	ldr	r3, [pc, #208]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000400:	429a      	cmp	r2, r3
 8000402:	d802      	bhi.n	800040a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000404:	4a30      	ldr	r2, [pc, #192]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <prvAddNewTaskToReadyList+0x114>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	3301      	adds	r3, #1
 8000410:	4a2f      	ldr	r2, [pc, #188]	; (80004d0 <prvAddNewTaskToReadyList+0x114>)
 8000412:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000418:	2201      	movs	r2, #1
 800041a:	409a      	lsls	r2, r3
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <prvAddNewTaskToReadyList+0x118>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	4a2c      	ldr	r2, [pc, #176]	; (80004d4 <prvAddNewTaskToReadyList+0x118>)
 8000424:	6013      	str	r3, [r2, #0]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800042a:	492b      	ldr	r1, [pc, #172]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 800042c:	4613      	mov	r3, r2
 800042e:	009b      	lsls	r3, r3, #2
 8000430:	4413      	add	r3, r2
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	440b      	add	r3, r1
 8000436:	3304      	adds	r3, #4
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	689a      	ldr	r2, [r3, #8]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	60da      	str	r2, [r3, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	3204      	adds	r2, #4
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	1d1a      	adds	r2, r3, #4
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 800046a:	441a      	add	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000474:	4918      	ldr	r1, [pc, #96]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 8000476:	4613      	mov	r3, r2
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	4413      	add	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	440b      	add	r3, r1
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	1c59      	adds	r1, r3, #1
 8000484:	4814      	ldr	r0, [pc, #80]	; (80004d8 <prvAddNewTaskToReadyList+0x11c>)
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4403      	add	r3, r0
 8000490:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000492:	f000 fded 	bl	8001070 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <prvAddNewTaskToReadyList+0x110>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d00e      	beq.n	80004bc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <prvAddNewTaskToReadyList+0x10c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d207      	bcs.n	80004bc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <prvAddNewTaskToReadyList+0x120>)
 80004ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	f3bf 8f4f 	dsb	sy
 80004b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000118 	.word	0x20000118
 80004c8:	20000040 	.word	0x20000040
 80004cc:	20000124 	.word	0x20000124
 80004d0:	20000134 	.word	0x20000134
 80004d4:	20000120 	.word	0x20000120
 80004d8:	20000044 	.word	0x20000044
 80004dc:	e000ed04 	.word	0xe000ed04

080004e0 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	2b04      	cmp	r3, #4
 80004f2:	d901      	bls.n	80004f8 <vTaskPrioritySet+0x18>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80004f4:	2304      	movs	r3, #4
 80004f6:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80004f8:	f000 fda0 	bl	800103c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d102      	bne.n	8000508 <vTaskPrioritySet+0x28>
 8000502:	4b55      	ldr	r3, [pc, #340]	; (8000658 <vTaskPrioritySet+0x178>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	e000      	b.n	800050a <vTaskPrioritySet+0x2a>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 800050c:	69bb      	ldr	r3, [r7, #24]
 800050e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000510:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8000512:	697a      	ldr	r2, [r7, #20]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	429a      	cmp	r2, r3
 8000518:	f000 8098 	beq.w	800064c <vTaskPrioritySet+0x16c>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 800051c:	683a      	ldr	r2, [r7, #0]
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	429a      	cmp	r2, r3
 8000522:	d90d      	bls.n	8000540 <vTaskPrioritySet+0x60>
                {
                    if( pxTCB != pxCurrentTCB )
 8000524:	4b4c      	ldr	r3, [pc, #304]	; (8000658 <vTaskPrioritySet+0x178>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	69ba      	ldr	r2, [r7, #24]
 800052a:	429a      	cmp	r2, r3
 800052c:	d00f      	beq.n	800054e <vTaskPrioritySet+0x6e>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800052e:	4b4a      	ldr	r3, [pc, #296]	; (8000658 <vTaskPrioritySet+0x178>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d309      	bcc.n	800054e <vTaskPrioritySet+0x6e>
                        {
                            xYieldRequired = pdTRUE;
 800053a:	2301      	movs	r3, #1
 800053c:	61fb      	str	r3, [r7, #28]
 800053e:	e006      	b.n	800054e <vTaskPrioritySet+0x6e>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8000540:	4b45      	ldr	r3, [pc, #276]	; (8000658 <vTaskPrioritySet+0x178>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	429a      	cmp	r2, r3
 8000548:	d101      	bne.n	800054e <vTaskPrioritySet+0x6e>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800054a:	2301      	movs	r3, #1
 800054c:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800054e:	69bb      	ldr	r3, [r7, #24]
 8000550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000552:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority. */
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8000554:	69bb      	ldr	r3, [r7, #24]
 8000556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000558:	69bb      	ldr	r3, [r7, #24]
 800055a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800055c:	429a      	cmp	r2, r3
 800055e:	d102      	bne.n	8000566 <vTaskPrioritySet+0x86>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	683a      	ldr	r2, [r7, #0]
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 8000566:	69bb      	ldr	r3, [r7, #24]
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	645a      	str	r2, [r3, #68]	; 0x44
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	2b00      	cmp	r3, #0
 8000572:	db04      	blt.n	800057e <vTaskPrioritySet+0x9e>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	f1c3 0205 	rsb	r2, r3, #5
 800057a:	69bb      	ldr	r3, [r7, #24]
 800057c:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	6959      	ldr	r1, [r3, #20]
 8000582:	693a      	ldr	r2, [r7, #16]
 8000584:	4613      	mov	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4a33      	ldr	r2, [pc, #204]	; (800065c <vTaskPrioritySet+0x17c>)
 800058e:	4413      	add	r3, r2
 8000590:	4299      	cmp	r1, r3
 8000592:	d150      	bne.n	8000636 <vTaskPrioritySet+0x156>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	3304      	adds	r3, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fe37 	bl	800020c <uxListRemove>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d109      	bne.n	80005b8 <vTaskPrioritySet+0xd8>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80005a4:	2201      	movs	r2, #1
 80005a6:	693b      	ldr	r3, [r7, #16]
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	43da      	mvns	r2, r3
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <vTaskPrioritySet+0x180>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4013      	ands	r3, r2
 80005b4:	4a2a      	ldr	r2, [pc, #168]	; (8000660 <vTaskPrioritySet+0x180>)
 80005b6:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005bc:	2201      	movs	r2, #1
 80005be:	409a      	lsls	r2, r3
 80005c0:	4b27      	ldr	r3, [pc, #156]	; (8000660 <vTaskPrioritySet+0x180>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	4a26      	ldr	r2, [pc, #152]	; (8000660 <vTaskPrioritySet+0x180>)
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ce:	4923      	ldr	r1, [pc, #140]	; (800065c <vTaskPrioritySet+0x17c>)
 80005d0:	4613      	mov	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	440b      	add	r3, r1
 80005da:	3304      	adds	r3, #4
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	3204      	adds	r2, #4
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	1d1a      	adds	r2, r3, #4
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <vTaskPrioritySet+0x17c>)
 800060e:	441a      	add	r2, r3
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	615a      	str	r2, [r3, #20]
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000618:	4910      	ldr	r1, [pc, #64]	; (800065c <vTaskPrioritySet+0x17c>)
 800061a:	4613      	mov	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	440b      	add	r3, r1
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	1c59      	adds	r1, r3, #1
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <vTaskPrioritySet+0x17c>)
 800062a:	4613      	mov	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4403      	add	r3, r0
 8000634:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d007      	beq.n	800064c <vTaskPrioritySet+0x16c>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <vTaskPrioritySet+0x184>)
 800063e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	f3bf 8f4f 	dsb	sy
 8000648:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 800064c:	f000 fd10 	bl	8001070 <vPortExitCritical>
    }
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000040 	.word	0x20000040
 800065c:	20000044 	.word	0x20000044
 8000660:	20000120 	.word	0x20000120
 8000664:	e000ed04 	.word	0xe000ed04

08000668 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8000670:	f000 fce4 	bl	800103c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d102      	bne.n	8000680 <vTaskSuspend+0x18>
 800067a:	4b3b      	ldr	r3, [pc, #236]	; (8000768 <vTaskSuspend+0x100>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	e000      	b.n	8000682 <vTaskSuspend+0x1a>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	60bb      	str	r3, [r7, #8]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3304      	adds	r3, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fdbf 	bl	800020c <uxListRemove>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d115      	bne.n	80006c0 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000698:	4934      	ldr	r1, [pc, #208]	; (800076c <vTaskSuspend+0x104>)
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	440b      	add	r3, r1
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10a      	bne.n	80006c0 <vTaskSuspend+0x58>
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ae:	2201      	movs	r2, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	43da      	mvns	r2, r3
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <vTaskSuspend+0x108>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4013      	ands	r3, r2
 80006bc:	4a2c      	ldr	r2, [pc, #176]	; (8000770 <vTaskSuspend+0x108>)
 80006be:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d004      	beq.n	80006d2 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	3318      	adds	r3, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fd9d 	bl	800020c <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	3304      	adds	r3, #4
 80006d6:	4619      	mov	r1, r3
 80006d8:	4826      	ldr	r0, [pc, #152]	; (8000774 <vTaskSuspend+0x10c>)
 80006da:	f7ff fd74 	bl	80001c6 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e010      	b.n	8000706 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	4413      	add	r3, r2
 80006ea:	3350      	adds	r3, #80	; 0x50
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d105      	bne.n	8000700 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80006f4:	68ba      	ldr	r2, [r7, #8]
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	3350      	adds	r3, #80	; 0x50
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3301      	adds	r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	ddeb      	ble.n	80006e4 <vTaskSuspend+0x7c>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800070c:	f000 fcb0 	bl	8001070 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <vTaskSuspend+0x110>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d005      	beq.n	8000724 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8000718:	f000 fc90 	bl	800103c <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 800071c:	f000 fbe4 	bl	8000ee8 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8000720:	f000 fca6 	bl	8001070 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8000724:	4b10      	ldr	r3, [pc, #64]	; (8000768 <vTaskSuspend+0x100>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	429a      	cmp	r2, r3
 800072c:	d118      	bne.n	8000760 <vTaskSuspend+0xf8>
        {
            if( xSchedulerRunning != pdFALSE )
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <vTaskSuspend+0x110>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d008      	beq.n	8000748 <vTaskSuspend+0xe0>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
                portYIELD_WITHIN_API();
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <vTaskSuspend+0x114>)
 8000738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	f3bf 8f4f 	dsb	sy
 8000742:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000746:	e00b      	b.n	8000760 <vTaskSuspend+0xf8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <vTaskSuspend+0x10c>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <vTaskSuspend+0x118>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d103      	bne.n	800075c <vTaskSuspend+0xf4>
                    pxCurrentTCB = NULL;
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <vTaskSuspend+0x100>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
    }
 800075a:	e001      	b.n	8000760 <vTaskSuspend+0xf8>
                    vTaskSwitchContext();
 800075c:	f000 fae8 	bl	8000d30 <vTaskSwitchContext>
    }
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000040 	.word	0x20000040
 800076c:	20000044 	.word	0x20000044
 8000770:	20000120 	.word	0x20000120
 8000774:	20000104 	.word	0x20000104
 8000778:	20000124 	.word	0x20000124
 800077c:	e000ed04 	.word	0xe000ed04
 8000780:	20000118 	.word	0x20000118

08000784 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	60bb      	str	r3, [r7, #8]

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <prvTaskIsTaskSuspended+0x3c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d10a      	bne.n	80007b4 <prvTaskIsTaskSuspended+0x30>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <prvTaskIsTaskSuspended+0x40>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d005      	beq.n	80007b4 <prvTaskIsTaskSuspended+0x30>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d101      	bne.n	80007b4 <prvTaskIsTaskSuspended+0x30>
                {
                    xReturn = pdTRUE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80007b4:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000104 	.word	0x20000104
 80007c4:	200000d8 	.word	0x200000d8

080007c8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80007d4:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <vTaskResume+0xe0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d05f      	beq.n	800089e <vTaskResume+0xd6>
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d05c      	beq.n	800089e <vTaskResume+0xd6>
        {
            taskENTER_CRITICAL();
 80007e4:	f000 fc2a 	bl	800103c <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff ffcb 	bl	8000784 <prvTaskIsTaskSuspended>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d052      	beq.n	800089a <vTaskResume+0xd2>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3304      	adds	r3, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fd07 	bl	800020c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	2201      	movs	r2, #1
 8000804:	409a      	lsls	r2, r3
 8000806:	4b29      	ldr	r3, [pc, #164]	; (80008ac <vTaskResume+0xe4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4313      	orrs	r3, r2
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <vTaskResume+0xe4>)
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000814:	4926      	ldr	r1, [pc, #152]	; (80008b0 <vTaskResume+0xe8>)
 8000816:	4613      	mov	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	3304      	adds	r3, #4
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	3204      	adds	r2, #4
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	1d1a      	adds	r2, r3, #4
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084a:	4613      	mov	r3, r2
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	4413      	add	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <vTaskResume+0xe8>)
 8000854:	441a      	add	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800085e:	4914      	ldr	r1, [pc, #80]	; (80008b0 <vTaskResume+0xe8>)
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	4413      	add	r3, r2
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	440b      	add	r3, r1
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1c59      	adds	r1, r3, #1
 800086e:	4810      	ldr	r0, [pc, #64]	; (80008b0 <vTaskResume+0xe8>)
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	4413      	add	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4403      	add	r3, r0
 800087a:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <vTaskResume+0xe0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000886:	429a      	cmp	r2, r3
 8000888:	d307      	bcc.n	800089a <vTaskResume+0xd2>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <vTaskResume+0xec>)
 800088c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	f3bf 8f4f 	dsb	sy
 8000896:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800089a:	f000 fbe9 	bl	8001070 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000040 	.word	0x20000040
 80008ac:	20000120 	.word	0x20000120
 80008b0:	20000044 	.word	0x20000044
 80008b4:	e000ed04 	.word	0xe000ed04

080008b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <vTaskStartScheduler+0x5c>)
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2300      	movs	r3, #0
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008cc:	4912      	ldr	r1, [pc, #72]	; (8000918 <vTaskStartScheduler+0x60>)
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <vTaskStartScheduler+0x64>)
 80008d0:	f7ff fcc5 	bl	800025e <xTaskCreate>
 80008d4:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d115      	bne.n	8000908 <vTaskStartScheduler+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008dc:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80008e0:	f383 8811 	msr	BASEPRI, r3
 80008e4:	f3bf 8f6f 	isb	sy
 80008e8:	f3bf 8f4f 	dsb	sy
 80008ec:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008ee:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <vTaskStartScheduler+0x68>)
 80008f2:	f04f 32ff 	mov.w	r2, #4294967295
 80008f6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <vTaskStartScheduler+0x6c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <vTaskStartScheduler+0x70>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000904:	f000 fb7a 	bl	8000ffc <xPortStartScheduler>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <vTaskStartScheduler+0x74>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000013c 	.word	0x2000013c
 8000918:	0800484c 	.word	0x0800484c
 800091c:	08000dbd 	.word	0x08000dbd
 8000920:	20000138 	.word	0x20000138
 8000924:	20000124 	.word	0x20000124
 8000928:	2000011c 	.word	0x2000011c
 800092c:	20000000 	.word	0x20000000

08000930 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <vTaskSuspendAll+0x18>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	4a03      	ldr	r2, [pc, #12]	; (8000948 <vTaskSuspendAll+0x18>)
 800093c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000140 	.word	0x20000140

0800094c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800095a:	f000 fb6f 	bl	800103c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800095e:	4b68      	ldr	r3, [pc, #416]	; (8000b00 <xTaskResumeAll+0x1b4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	3b01      	subs	r3, #1
 8000964:	4a66      	ldr	r2, [pc, #408]	; (8000b00 <xTaskResumeAll+0x1b4>)
 8000966:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000968:	4b65      	ldr	r3, [pc, #404]	; (8000b00 <xTaskResumeAll+0x1b4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	f040 80c0 	bne.w	8000af2 <xTaskResumeAll+0x1a6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000972:	4b64      	ldr	r3, [pc, #400]	; (8000b04 <xTaskResumeAll+0x1b8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	f000 80bb 	beq.w	8000af2 <xTaskResumeAll+0x1a6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800097c:	e08a      	b.n	8000a94 <xTaskResumeAll+0x148>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800097e:	4b62      	ldr	r3, [pc, #392]	; (8000b08 <xTaskResumeAll+0x1bc>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	6a12      	ldr	r2, [r2, #32]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	69d2      	ldr	r2, [r2, #28]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3318      	adds	r3, #24
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d103      	bne.n	80009b4 <xTaskResumeAll+0x68>
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	6a1a      	ldr	r2, [r3, #32]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	68d2      	ldr	r2, [r2, #12]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	6892      	ldr	r2, [r2, #8]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3304      	adds	r3, #4
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d103      	bne.n	80009f2 <xTaskResumeAll+0xa6>
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	68da      	ldr	r2, [r3, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	1e5a      	subs	r2, r3, #1
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	2201      	movs	r2, #1
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <xTaskResumeAll+0x1c0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4a3e      	ldr	r2, [pc, #248]	; (8000b0c <xTaskResumeAll+0x1c0>)
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a18:	493d      	ldr	r1, [pc, #244]	; (8000b10 <xTaskResumeAll+0x1c4>)
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	440b      	add	r3, r1
 8000a24:	3304      	adds	r3, #4
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	3204      	adds	r2, #4
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	1d1a      	adds	r2, r3, #4
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4a2e      	ldr	r2, [pc, #184]	; (8000b10 <xTaskResumeAll+0x1c4>)
 8000a58:	441a      	add	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	615a      	str	r2, [r3, #20]
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a62:	492b      	ldr	r1, [pc, #172]	; (8000b10 <xTaskResumeAll+0x1c4>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	1c59      	adds	r1, r3, #1
 8000a72:	4827      	ldr	r0, [pc, #156]	; (8000b10 <xTaskResumeAll+0x1c4>)
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4403      	add	r3, r0
 8000a7e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <xTaskResumeAll+0x1c8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d302      	bcc.n	8000a94 <xTaskResumeAll+0x148>
                    {
                        xYieldPending = pdTRUE;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <xTaskResumeAll+0x1cc>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <xTaskResumeAll+0x1bc>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f47f af70 	bne.w	800097e <xTaskResumeAll+0x32>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <xTaskResumeAll+0x15c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000aa4:	f000 fa20 	bl	8000ee8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <xTaskResumeAll+0x1d0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d010      	beq.n	8000ad6 <xTaskResumeAll+0x18a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000ab4:	f000 f836 	bl	8000b24 <xTaskIncrementTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <xTaskResumeAll+0x178>
                            {
                                xYieldPending = pdTRUE;
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <xTaskResumeAll+0x1cc>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1f1      	bne.n	8000ab4 <xTaskResumeAll+0x168>

                        xPendedTicks = 0;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <xTaskResumeAll+0x1d0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <xTaskResumeAll+0x1cc>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d009      	beq.n	8000af2 <xTaskResumeAll+0x1a6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <xTaskResumeAll+0x1d4>)
 8000ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	f3bf 8f4f 	dsb	sy
 8000aee:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000af2:	f000 fabd 	bl	8001070 <vPortExitCritical>

    return xAlreadyYielded;
 8000af6:	693b      	ldr	r3, [r7, #16]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000140 	.word	0x20000140
 8000b04:	20000118 	.word	0x20000118
 8000b08:	200000d8 	.word	0x200000d8
 8000b0c:	20000120 	.word	0x20000120
 8000b10:	20000044 	.word	0x20000044
 8000b14:	20000040 	.word	0x20000040
 8000b18:	2000012c 	.word	0x2000012c
 8000b1c:	20000128 	.word	0x20000128
 8000b20:	e000ed04 	.word	0xe000ed04

08000b24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000b2e:	4b75      	ldr	r3, [pc, #468]	; (8000d04 <xTaskIncrementTick+0x1e0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f040 80dc 	bne.w	8000cf0 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000b38:	4b73      	ldr	r3, [pc, #460]	; (8000d08 <xTaskIncrementTick+0x1e4>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000b40:	4a71      	ldr	r2, [pc, #452]	; (8000d08 <xTaskIncrementTick+0x1e4>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d110      	bne.n	8000b6e <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000b4c:	4b6f      	ldr	r3, [pc, #444]	; (8000d0c <xTaskIncrementTick+0x1e8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	4b6f      	ldr	r3, [pc, #444]	; (8000d10 <xTaskIncrementTick+0x1ec>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a6d      	ldr	r2, [pc, #436]	; (8000d0c <xTaskIncrementTick+0x1e8>)
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4a6d      	ldr	r2, [pc, #436]	; (8000d10 <xTaskIncrementTick+0x1ec>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	6013      	str	r3, [r2, #0]
 8000b60:	4b6c      	ldr	r3, [pc, #432]	; (8000d14 <xTaskIncrementTick+0x1f0>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a6b      	ldr	r2, [pc, #428]	; (8000d14 <xTaskIncrementTick+0x1f0>)
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	f000 f9bd 	bl	8000ee8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000b6e:	4b6a      	ldr	r3, [pc, #424]	; (8000d18 <xTaskIncrementTick+0x1f4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	f0c0 80a6 	bcc.w	8000cc6 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000b7a:	4b64      	ldr	r3, [pc, #400]	; (8000d0c <xTaskIncrementTick+0x1e8>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d104      	bne.n	8000b8e <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b84:	4b64      	ldr	r3, [pc, #400]	; (8000d18 <xTaskIncrementTick+0x1f4>)
 8000b86:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8a:	601a      	str	r2, [r3, #0]
                    break;
 8000b8c:	e09b      	b.n	8000cc6 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000b8e:	4b5f      	ldr	r3, [pc, #380]	; (8000d0c <xTaskIncrementTick+0x1e8>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d203      	bcs.n	8000bae <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000ba6:	4a5c      	ldr	r2, [pc, #368]	; (8000d18 <xTaskIncrementTick+0x1f4>)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000bac:	e08b      	b.n	8000cc6 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68d2      	ldr	r2, [r2, #12]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	6892      	ldr	r2, [r2, #8]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	3304      	adds	r3, #4
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d103      	bne.n	8000bdc <xTaskIncrementTick+0xb8>
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1e5a      	subs	r2, r3, #1
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d01e      	beq.n	8000c32 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	6a12      	ldr	r2, [r2, #32]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	6a1b      	ldr	r3, [r3, #32]
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	69d2      	ldr	r2, [r2, #28]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	3318      	adds	r3, #24
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d103      	bne.n	8000c22 <xTaskIncrementTick+0xfe>
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	6a1a      	ldr	r2, [r3, #32]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	2200      	movs	r2, #0
 8000c26:	629a      	str	r2, [r3, #40]	; 0x28
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c36:	2201      	movs	r2, #1
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <xTaskIncrementTick+0x1f8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	4a36      	ldr	r2, [pc, #216]	; (8000d1c <xTaskIncrementTick+0x1f8>)
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c48:	4935      	ldr	r1, [pc, #212]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	440b      	add	r3, r1
 8000c54:	3304      	adds	r3, #4
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	3204      	adds	r2, #4
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1d1a      	adds	r2, r3, #4
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	4413      	add	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000c88:	441a      	add	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	615a      	str	r2, [r3, #20]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c92:	4923      	ldr	r1, [pc, #140]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	1c59      	adds	r1, r3, #1
 8000ca2:	481f      	ldr	r0, [pc, #124]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4403      	add	r3, r0
 8000cae:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <xTaskIncrementTick+0x200>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	f67f af5d 	bls.w	8000b7a <xTaskIncrementTick+0x56>
                        {
                            xSwitchRequired = pdTRUE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000cc4:	e759      	b.n	8000b7a <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <xTaskIncrementTick+0x200>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ccc:	4914      	ldr	r1, [pc, #80]	; (8000d20 <xTaskIncrementTick+0x1fc>)
 8000cce:	4613      	mov	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d901      	bls.n	8000ce2 <xTaskIncrementTick+0x1be>
            {
                xSwitchRequired = pdTRUE;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <xTaskIncrementTick+0x204>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <xTaskIncrementTick+0x1d6>
            {
                xSwitchRequired = pdTRUE;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	e004      	b.n	8000cfa <xTaskIncrementTick+0x1d6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <xTaskIncrementTick+0x208>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <xTaskIncrementTick+0x208>)
 8000cf8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000140 	.word	0x20000140
 8000d08:	2000011c 	.word	0x2000011c
 8000d0c:	200000d0 	.word	0x200000d0
 8000d10:	200000d4 	.word	0x200000d4
 8000d14:	20000130 	.word	0x20000130
 8000d18:	20000138 	.word	0x20000138
 8000d1c:	20000120 	.word	0x20000120
 8000d20:	20000044 	.word	0x20000044
 8000d24:	20000040 	.word	0x20000040
 8000d28:	2000012c 	.word	0x2000012c
 8000d2c:	20000128 	.word	0x20000128

08000d30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <vTaskSwitchContext+0x78>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <vTaskSwitchContext+0x7c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8000d44:	e02a      	b.n	8000d9c <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <vTaskSwitchContext+0x7c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <vTaskSwitchContext+0x80>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	fab3 f383 	clz	r3, r3
 8000d58:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8000d5a:	78fb      	ldrb	r3, [r7, #3]
 8000d5c:	f1c3 031f 	rsb	r3, r3, #31
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	4613      	mov	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <vTaskSwitchContext+0x84>)
 8000d6e:	4413      	add	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	3308      	adds	r3, #8
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d104      	bne.n	8000d92 <vTaskSwitchContext+0x62>
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <vTaskSwitchContext+0x88>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000140 	.word	0x20000140
 8000dac:	2000012c 	.word	0x2000012c
 8000db0:	20000120 	.word	0x20000120
 8000db4:	20000044 	.word	0x20000044
 8000db8:	20000040 	.word	0x20000040

08000dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000dc4:	f000 f852 	bl	8000e6c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <prvIdleTask+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d9f9      	bls.n	8000dc4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <prvIdleTask+0x2c>)
 8000dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	f3bf 8f4f 	dsb	sy
 8000ddc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000de0:	e7f0      	b.n	8000dc4 <prvIdleTask+0x8>
 8000de2:	bf00      	nop
 8000de4:	20000044 	.word	0x20000044
 8000de8:	e000ed04 	.word	0xe000ed04

08000dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	e00c      	b.n	8000e12 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <prvInitialiseTaskLists+0x60>)
 8000e04:	4413      	add	r3, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff f9b2 	bl	8000170 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d9ef      	bls.n	8000df8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <prvInitialiseTaskLists+0x64>)
 8000e1a:	f7ff f9a9 	bl	8000170 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <prvInitialiseTaskLists+0x68>)
 8000e20:	f7ff f9a6 	bl	8000170 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <prvInitialiseTaskLists+0x6c>)
 8000e26:	f7ff f9a3 	bl	8000170 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <prvInitialiseTaskLists+0x70>)
 8000e2c:	f7ff f9a0 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <prvInitialiseTaskLists+0x74>)
 8000e32:	f7ff f99d 	bl	8000170 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <prvInitialiseTaskLists+0x78>)
 8000e38:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <prvInitialiseTaskLists+0x64>)
 8000e3a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <prvInitialiseTaskLists+0x7c>)
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <prvInitialiseTaskLists+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000044 	.word	0x20000044
 8000e50:	200000a8 	.word	0x200000a8
 8000e54:	200000bc 	.word	0x200000bc
 8000e58:	200000d8 	.word	0x200000d8
 8000e5c:	200000ec 	.word	0x200000ec
 8000e60:	20000104 	.word	0x20000104
 8000e64:	200000d0 	.word	0x200000d0
 8000e68:	200000d4 	.word	0x200000d4

08000e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e72:	e019      	b.n	8000ea8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8000e74:	f000 f8e2 	bl	800103c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <prvCheckTasksWaitingTermination+0x50>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3304      	adds	r3, #4
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9c1 	bl	800020c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <prvCheckTasksWaitingTermination+0x54>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <prvCheckTasksWaitingTermination+0x54>)
 8000e92:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <prvCheckTasksWaitingTermination+0x58>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <prvCheckTasksWaitingTermination+0x58>)
 8000e9c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8000e9e:	f000 f8e7 	bl	8001070 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f810 	bl	8000ec8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <prvCheckTasksWaitingTermination+0x58>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e1      	bne.n	8000e74 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000ec 	.word	0x200000ec
 8000ec0:	20000118 	.word	0x20000118
 8000ec4:	20000100 	.word	0x20000100

08000ec8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f99d 	bl	8001214 <vPortFree>
            vPortFree( pxTCB );
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f99a 	bl	8001214 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <prvResetNextTaskUnblockTime+0x2c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d104      	bne.n	8000f00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <prvResetNextTaskUnblockTime+0x30>)
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000efe:	e005      	b.n	8000f0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <prvResetNextTaskUnblockTime+0x2c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a03      	ldr	r2, [pc, #12]	; (8000f18 <prvResetNextTaskUnblockTime+0x30>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	200000d0 	.word	0x200000d0
 8000f18:	20000138 	.word	0x20000138

08000f1c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	3b04      	subs	r3, #4
 8000f3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	f023 0201 	bic.w	r2, r3, #1
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3b04      	subs	r3, #4
 8000f4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8000f4c:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <pxPortInitialiseStack+0x54>)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3b14      	subs	r3, #20
 8000f56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3b20      	subs	r3, #32
 8000f62:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8000f64:	68fb      	ldr	r3, [r7, #12]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	08000f75 	.word	0x08000f75

08000f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000f7e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000f82:	f383 8811 	msr	BASEPRI, r3
 8000f86:	f3bf 8f6f 	isb	sy
 8000f8a:	f3bf 8f4f 	dsb	sy
 8000f8e:	607b      	str	r3, [r7, #4]
    }
 8000f90:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000f92:	bf00      	nop
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0fc      	beq.n	8000f94 <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
	...

08000fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <pxCurrentTCBConst2>)
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	6808      	ldr	r0, [r1, #0]
 8000fb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000fba:	f380 8809 	msr	PSP, r0
 8000fbe:	f3bf 8f6f 	isb	sy
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	f380 8811 	msr	BASEPRI, r0
 8000fca:	f04e 0e0d 	orr.w	lr, lr, #13
 8000fce:	4770      	bx	lr

08000fd0 <pxCurrentTCBConst2>:
 8000fd0:	20000040 	.word	0x20000040
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop

08000fd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <prvPortStartFirstTask+0x1c>)
 8000fda:	6800      	ldr	r0, [r0, #0]
 8000fdc:	6800      	ldr	r0, [r0, #0]
 8000fde:	f380 8808 	msr	MSP, r0
 8000fe2:	b662      	cpsie	i
 8000fe4:	b661      	cpsie	f
 8000fe6:	f3bf 8f4f 	dsb	sy
 8000fea:	f3bf 8f6f 	isb	sy
 8000fee:	df00      	svc	0
 8000ff0:	bf00      	nop
 8000ff2:	0000      	.short	0x0000
 8000ff4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop

08000ffc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
        *pucFirstUserPriorityRegister = ulOriginalPriority;
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <xPortStartScheduler+0x38>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0b      	ldr	r2, [pc, #44]	; (8001034 <xPortStartScheduler+0x38>)
 8001006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800100a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <xPortStartScheduler+0x38>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a08      	ldr	r2, [pc, #32]	; (8001034 <xPortStartScheduler+0x38>)
 8001012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001016:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001018:	f000 f890 	bl	800113c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <xPortStartScheduler+0x3c>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001022:	f7ff ffd9 	bl	8000fd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001026:	f7ff fe83 	bl	8000d30 <vTaskSwitchContext>
    prvTaskExitError();
 800102a:	f7ff ffa3 	bl	8000f74 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	bd80      	pop	{r7, pc}
 8001034:	e000ed20 	.word	0xe000ed20
 8001038:	20000004 	.word	0x20000004

0800103c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
        __asm volatile
 8001042:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001046:	f383 8811 	msr	BASEPRI, r3
 800104a:	f3bf 8f6f 	isb	sy
 800104e:	f3bf 8f4f 	dsb	sy
 8001052:	607b      	str	r3, [r7, #4]
    }
 8001054:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <vPortEnterCritical+0x30>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3301      	adds	r3, #1
 800105c:	4a03      	ldr	r2, [pc, #12]	; (800106c <vPortEnterCritical+0x30>)
 800105e:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000004 	.word	0x20000004

08001070 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <vPortExitCritical+0x30>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3b01      	subs	r3, #1
 800107c:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <vPortExitCritical+0x30>)
 800107e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <vPortExitCritical+0x30>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d105      	bne.n	8001094 <vPortExitCritical+0x24>
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001092:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000004 	.word	0x20000004
	...

080010b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80010b0:	f3ef 8009 	mrs	r0, PSP
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <pxCurrentTCBConst>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010c0:	6010      	str	r0, [r2, #0]
 80010c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80010c6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80010ca:	f380 8811 	msr	BASEPRI, r0
 80010ce:	f7ff fe2f 	bl	8000d30 <vTaskSwitchContext>
 80010d2:	f04f 0000 	mov.w	r0, #0
 80010d6:	f380 8811 	msr	BASEPRI, r0
 80010da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	6808      	ldr	r0, [r1, #0]
 80010e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010e6:	f380 8809 	msr	PSP, r0
 80010ea:	f3bf 8f6f 	isb	sy
 80010ee:	4770      	bx	lr

080010f0 <pxCurrentTCBConst>:
 80010f0:	20000040 	.word	0x20000040
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop

080010f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
        __asm volatile
 80010fe:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	607b      	str	r3, [r7, #4]
    }
 8001110:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001112:	f7ff fd07 	bl	8000b24 <xTaskIncrementTick>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SysTick_Handler+0x40>)
 800111e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f383 8811 	msr	BASEPRI, r3
    }
 800112e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	e000ed04 	.word	0xe000ed04

0800113c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <vPortSetupTimerInterrupt+0x28>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <vPortSetupTimerInterrupt+0x2c>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <vPortSetupTimerInterrupt+0x30>)
 800114e:	f646 525f 	movw	r2, #27999	; 0x6d5f
 8001152:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <vPortSetupTimerInterrupt+0x28>)
 8001156:	2207      	movs	r2, #7
 8001158:	601a      	str	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010
 8001168:	e000e018 	.word	0xe000e018
 800116c:	e000e014 	.word	0xe000e014

08001170 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00e      	beq.n	80011a4 <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f023 0307 	bic.w	r3, r3, #7
 800118c:	3308      	adds	r3, #8
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	429a      	cmp	r2, r3
 8001192:	d205      	bcs.n	80011a0 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f023 0307 	bic.w	r3, r3, #7
 800119a:	3308      	adds	r3, #8
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	e001      	b.n	80011a4 <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 80011a4:	f7ff fbc4 	bl	8000930 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <pvPortMalloc+0x98>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <pvPortMalloc+0x9c>)
 80011b2:	f023 0307 	bic.w	r3, r3, #7
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <pvPortMalloc+0x98>)
 80011ba:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d01b      	beq.n	80011fa <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <pvPortMalloc+0xa0>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 80011ca:	f643 6277 	movw	r2, #15991	; 0x3e77
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d813      	bhi.n	80011fa <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <pvPortMalloc+0xa0>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	441a      	add	r2, r3
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <pvPortMalloc+0xa0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80011de:	429a      	cmp	r2, r3
 80011e0:	d90b      	bls.n	80011fa <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <pvPortMalloc+0x98>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <pvPortMalloc+0xa0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <pvPortMalloc+0xa0>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <pvPortMalloc+0xa0>)
 80011f8:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80011fa:	f7ff fba7 	bl	800094c <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20003fc8 	.word	0x20003fc8
 800120c:	2000014b 	.word	0x2000014b
 8001210:	20003fc4 	.word	0x20003fc4

08001214 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <DMS_init>:
 */

#include "DMS.h"


void DMS_init(){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
	PIN_config PINx={TOUCH1,INPUT_FI,0};
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <DMS_init+0x58>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4619      	mov	r1, r3
 800123a:	4812      	ldr	r0, [pc, #72]	; (8001284 <DMS_init+0x5c>)
 800123c:	f001 fc30 	bl	8002aa0 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH2,INPUT_FI,0};
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <DMS_init+0x60>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4619      	mov	r1, r3
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <DMS_init+0x5c>)
 800124e:	f001 fc27 	bl	8002aa0 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH3,INPUT_FI,0};
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <DMS_init+0x64>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <DMS_init+0x5c>)
 8001260:	f001 fc1e 	bl	8002aa0 <MCAL_GPIO_init>
	 PINx=(PIN_config){TOUCH4,INPUT_FI,0};
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <DMS_init+0x68>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(DMS_PORT, &PINx);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4619      	mov	r1, r3
 8001270:	4804      	ldr	r0, [pc, #16]	; (8001284 <DMS_init+0x5c>)
 8001272:	f001 fc15 	bl	8002aa0 <MCAL_GPIO_init>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	08004854 	.word	0x08004854
 8001284:	40010800 	.word	0x40010800
 8001288:	08004858 	.word	0x08004858
 800128c:	0800485c 	.word	0x0800485c
 8001290:	08004860 	.word	0x08004860

08001294 <DMS_read>:


uint8_t DMS_read(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	if((MCAL_Read_PIN(DMS_PORT, TOUCH1)) || (MCAL_Read_PIN(DMS_PORT, TOUCH2)) ||(MCAL_Read_PIN(DMS_PORT, TOUCH3)) || (MCAL_Read_PIN(DMS_PORT, TOUCH4))){
 8001298:	2101      	movs	r1, #1
 800129a:	481f      	ldr	r0, [pc, #124]	; (8001318 <DMS_read+0x84>)
 800129c:	f001 fd12 	bl	8002cc4 <MCAL_Read_PIN>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d114      	bne.n	80012d0 <DMS_read+0x3c>
 80012a6:	210c      	movs	r1, #12
 80012a8:	481b      	ldr	r0, [pc, #108]	; (8001318 <DMS_read+0x84>)
 80012aa:	f001 fd0b 	bl	8002cc4 <MCAL_Read_PIN>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10d      	bne.n	80012d0 <DMS_read+0x3c>
 80012b4:	210b      	movs	r1, #11
 80012b6:	4818      	ldr	r0, [pc, #96]	; (8001318 <DMS_read+0x84>)
 80012b8:	f001 fd04 	bl	8002cc4 <MCAL_Read_PIN>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d106      	bne.n	80012d0 <DMS_read+0x3c>
 80012c2:	2108      	movs	r1, #8
 80012c4:	4814      	ldr	r0, [pc, #80]	; (8001318 <DMS_read+0x84>)
 80012c6:	f001 fcfd 	bl	8002cc4 <MCAL_Read_PIN>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <DMS_read+0x7e>
		_TIM1_delay_ms(30);
 80012d0:	201e      	movs	r0, #30
 80012d2:	f002 fa17 	bl	8003704 <_TIM1_delay_ms>
		if((MCAL_Read_PIN(DMS_PORT, TOUCH1)) || (MCAL_Read_PIN(DMS_PORT, TOUCH2)) ||(MCAL_Read_PIN(DMS_PORT, TOUCH3)) || (MCAL_Read_PIN(DMS_PORT, TOUCH4))){
 80012d6:	2101      	movs	r1, #1
 80012d8:	480f      	ldr	r0, [pc, #60]	; (8001318 <DMS_read+0x84>)
 80012da:	f001 fcf3 	bl	8002cc4 <MCAL_Read_PIN>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d114      	bne.n	800130e <DMS_read+0x7a>
 80012e4:	210c      	movs	r1, #12
 80012e6:	480c      	ldr	r0, [pc, #48]	; (8001318 <DMS_read+0x84>)
 80012e8:	f001 fcec 	bl	8002cc4 <MCAL_Read_PIN>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10d      	bne.n	800130e <DMS_read+0x7a>
 80012f2:	210b      	movs	r1, #11
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <DMS_read+0x84>)
 80012f6:	f001 fce5 	bl	8002cc4 <MCAL_Read_PIN>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d106      	bne.n	800130e <DMS_read+0x7a>
 8001300:	2108      	movs	r1, #8
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <DMS_read+0x84>)
 8001304:	f001 fcde 	bl	8002cc4 <MCAL_Read_PIN>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <DMS_read+0x7e>
		return 1;
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <DMS_read+0x80>
		}
	}
	return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40010800 	.word	0x40010800

0800131c <LUNA_CallBack>:
#include "USART_Driver.h"
uint16_t LUNA_dis=0;
uint16_t LUNA_AMP=0;
uint16_t LUNA_TEMP=0;
uint8_t LUNA_CheckSum=0;
void LUNA_CallBack(){
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	static uint8_t x=0;

	if(  LUNA_UART_INSTANT->SR &(1<<5)){
 8001320:	4b62      	ldr	r3, [pc, #392]	; (80014ac <LUNA_CallBack+0x190>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0320 	and.w	r3, r3, #32
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80bc 	beq.w	80014a6 <LUNA_CallBack+0x18a>
		if(x==0){
 800132e:	4b60      	ldr	r3, [pc, #384]	; (80014b0 <LUNA_CallBack+0x194>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10d      	bne.n	8001352 <LUNA_CallBack+0x36>
			if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59){
 8001336:	485d      	ldr	r0, [pc, #372]	; (80014ac <LUNA_CallBack+0x190>)
 8001338:	f002 fba8 	bl	8003a8c <MCAL_USART_ReciveData>
 800133c:	4603      	mov	r3, r0
 800133e:	2b59      	cmp	r3, #89	; 0x59
 8001340:	f040 80b1 	bne.w	80014a6 <LUNA_CallBack+0x18a>
				x++;
 8001344:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <LUNA_CallBack+0x194>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b58      	ldr	r3, [pc, #352]	; (80014b0 <LUNA_CallBack+0x194>)
 800134e:	701a      	strb	r2, [r3, #0]
		}

		}


}
 8001350:	e0a9      	b.n	80014a6 <LUNA_CallBack+0x18a>
		}else if(x==1){
 8001352:	4b57      	ldr	r3, [pc, #348]	; (80014b0 <LUNA_CallBack+0x194>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10d      	bne.n	8001376 <LUNA_CallBack+0x5a>
			if(MCAL_USART_ReciveData(LUNA_UART_INSTANT)==0x59)
 800135a:	4854      	ldr	r0, [pc, #336]	; (80014ac <LUNA_CallBack+0x190>)
 800135c:	f002 fb96 	bl	8003a8c <MCAL_USART_ReciveData>
 8001360:	4603      	mov	r3, r0
 8001362:	2b59      	cmp	r3, #89	; 0x59
 8001364:	f040 809f 	bne.w	80014a6 <LUNA_CallBack+0x18a>
				x++;
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <LUNA_CallBack+0x194>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <LUNA_CallBack+0x194>)
 8001372:	701a      	strb	r2, [r3, #0]
}
 8001374:	e097      	b.n	80014a6 <LUNA_CallBack+0x18a>
		}else if(x==2){
 8001376:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <LUNA_CallBack+0x194>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d110      	bne.n	80013a0 <LUNA_CallBack+0x84>
			x++;
 800137e:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <LUNA_CallBack+0x194>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b4a      	ldr	r3, [pc, #296]	; (80014b0 <LUNA_CallBack+0x194>)
 8001388:	701a      	strb	r2, [r3, #0]
			LUNA_dis=0;
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <LUNA_CallBack+0x198>)
 800138c:	2200      	movs	r2, #0
 800138e:	801a      	strh	r2, [r3, #0]
			LUNA_dis=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001390:	4846      	ldr	r0, [pc, #280]	; (80014ac <LUNA_CallBack+0x190>)
 8001392:	f002 fb7b 	bl	8003a8c <MCAL_USART_ReciveData>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	4b46      	ldr	r3, [pc, #280]	; (80014b4 <LUNA_CallBack+0x198>)
 800139c:	801a      	strh	r2, [r3, #0]
}
 800139e:	e082      	b.n	80014a6 <LUNA_CallBack+0x18a>
		}else if(x==3){
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <LUNA_CallBack+0x194>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d114      	bne.n	80013d2 <LUNA_CallBack+0xb6>
			x++;
 80013a8:	4b41      	ldr	r3, [pc, #260]	; (80014b0 <LUNA_CallBack+0x194>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <LUNA_CallBack+0x194>)
 80013b2:	701a      	strb	r2, [r3, #0]
			LUNA_dis=((LUNA_dis) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 80013b4:	483d      	ldr	r0, [pc, #244]	; (80014ac <LUNA_CallBack+0x190>)
 80013b6:	f002 fb69 	bl	8003a8c <MCAL_USART_ReciveData>
 80013ba:	4603      	mov	r3, r0
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	4b3c      	ldr	r3, [pc, #240]	; (80014b4 <LUNA_CallBack+0x198>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <LUNA_CallBack+0x198>)
 80013ce:	801a      	strh	r2, [r3, #0]
}
 80013d0:	e069      	b.n	80014a6 <LUNA_CallBack+0x18a>
		}else if(x==4){
 80013d2:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <LUNA_CallBack+0x194>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	d110      	bne.n	80013fc <LUNA_CallBack+0xe0>
			x++;
 80013da:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <LUNA_CallBack+0x194>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <LUNA_CallBack+0x194>)
 80013e4:	701a      	strb	r2, [r3, #0]
			LUNA_AMP=0;
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <LUNA_CallBack+0x19c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	801a      	strh	r2, [r3, #0]
			LUNA_AMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 80013ec:	482f      	ldr	r0, [pc, #188]	; (80014ac <LUNA_CallBack+0x190>)
 80013ee:	f002 fb4d 	bl	8003a8c <MCAL_USART_ReciveData>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <LUNA_CallBack+0x19c>)
 80013f8:	801a      	strh	r2, [r3, #0]
}
 80013fa:	e054      	b.n	80014a6 <LUNA_CallBack+0x18a>
		}else if(x==5){
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <LUNA_CallBack+0x194>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d114      	bne.n	800142e <LUNA_CallBack+0x112>
			x++;
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <LUNA_CallBack+0x194>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	b2da      	uxtb	r2, r3
 800140c:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <LUNA_CallBack+0x194>)
 800140e:	701a      	strb	r2, [r3, #0]
			LUNA_AMP=((LUNA_AMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 8001410:	4826      	ldr	r0, [pc, #152]	; (80014ac <LUNA_CallBack+0x190>)
 8001412:	f002 fb3b 	bl	8003a8c <MCAL_USART_ReciveData>
 8001416:	4603      	mov	r3, r0
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	b21a      	sxth	r2, r3
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <LUNA_CallBack+0x19c>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	b21b      	sxth	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b21b      	sxth	r3, r3
 8001426:	b29a      	uxth	r2, r3
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <LUNA_CallBack+0x19c>)
 800142a:	801a      	strh	r2, [r3, #0]
}
 800142c:	e03b      	b.n	80014a6 <LUNA_CallBack+0x18a>
		}else if(x==6){
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <LUNA_CallBack+0x194>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b06      	cmp	r3, #6
 8001434:	d110      	bne.n	8001458 <LUNA_CallBack+0x13c>
			x++;
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <LUNA_CallBack+0x194>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <LUNA_CallBack+0x194>)
 8001440:	701a      	strb	r2, [r3, #0]
			LUNA_TEMP=0;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <LUNA_CallBack+0x1a0>)
 8001444:	2200      	movs	r2, #0
 8001446:	801a      	strh	r2, [r3, #0]
			LUNA_TEMP=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001448:	4818      	ldr	r0, [pc, #96]	; (80014ac <LUNA_CallBack+0x190>)
 800144a:	f002 fb1f 	bl	8003a8c <MCAL_USART_ReciveData>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <LUNA_CallBack+0x1a0>)
 8001454:	801a      	strh	r2, [r3, #0]
}
 8001456:	e026      	b.n	80014a6 <LUNA_CallBack+0x18a>
		}else if(x==7){
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <LUNA_CallBack+0x194>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b07      	cmp	r3, #7
 800145e:	d114      	bne.n	800148a <LUNA_CallBack+0x16e>
			x++;
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <LUNA_CallBack+0x194>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <LUNA_CallBack+0x194>)
 800146a:	701a      	strb	r2, [r3, #0]
			LUNA_TEMP=((LUNA_TEMP) |(MCAL_USART_ReciveData(LUNA_UART_INSTANT)<<8));
 800146c:	480f      	ldr	r0, [pc, #60]	; (80014ac <LUNA_CallBack+0x190>)
 800146e:	f002 fb0d 	bl	8003a8c <MCAL_USART_ReciveData>
 8001472:	4603      	mov	r3, r0
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <LUNA_CallBack+0x1a0>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	b21b      	sxth	r3, r3
 800147e:	4313      	orrs	r3, r2
 8001480:	b21b      	sxth	r3, r3
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <LUNA_CallBack+0x1a0>)
 8001486:	801a      	strh	r2, [r3, #0]
}
 8001488:	e00d      	b.n	80014a6 <LUNA_CallBack+0x18a>
		}else if(x==8){
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <LUNA_CallBack+0x194>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b08      	cmp	r3, #8
 8001490:	d109      	bne.n	80014a6 <LUNA_CallBack+0x18a>
			LUNA_CheckSum=MCAL_USART_ReciveData(LUNA_UART_INSTANT);
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <LUNA_CallBack+0x190>)
 8001494:	f002 fafa 	bl	8003a8c <MCAL_USART_ReciveData>
 8001498:	4603      	mov	r3, r0
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <LUNA_CallBack+0x1a4>)
 800149e:	701a      	strb	r2, [r3, #0]
			x=0;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <LUNA_CallBack+0x194>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40004800 	.word	0x40004800
 80014b0:	20003fd3 	.word	0x20003fd3
 80014b4:	20003fcc 	.word	0x20003fcc
 80014b8:	20003fce 	.word	0x20003fce
 80014bc:	20003fd0 	.word	0x20003fd0
 80014c0:	20003fd2 	.word	0x20003fd2

080014c4 <LUNA_INIT>:
	NVIC_ISER1 |=(1<<(USART1_IRQ-32));

}

void LUNA_INIT(LUNA_MODES mode,OUTPUT_FORMAT format)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b087      	sub	sp, #28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	460a      	mov	r2, r1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
	/*bude raete 9600*/
	USART_Config_t PIN ={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,Disabled,Asynchronous,ONE_STOP_BIT,LUNA_CallBack};
 80014d4:	4b8e      	ldr	r3, [pc, #568]	; (8001710 <LUNA_INIT+0x24c>)
 80014d6:	f107 0408 	add.w	r4, r7, #8
 80014da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(LUNA_UART_INSTANT, &PIN);
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4619      	mov	r1, r3
 80014e6:	488b      	ldr	r0, [pc, #556]	; (8001714 <LUNA_INIT+0x250>)
 80014e8:	f002 f924 	bl	8003734 <MCAL_USART_init>
	//	LUNA_Disable();
	MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0xC2);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80014ec:	215a      	movs	r1, #90	; 0x5a
 80014ee:	4889      	ldr	r0, [pc, #548]	; (8001714 <LUNA_INIT+0x250>)
 80014f0:	f002 fa8c 	bl	8003a0c <MCAL_USART_SendData>
 80014f4:	2108      	movs	r1, #8
 80014f6:	4887      	ldr	r0, [pc, #540]	; (8001714 <LUNA_INIT+0x250>)
 80014f8:	f002 fa88 	bl	8003a0c <MCAL_USART_SendData>
 80014fc:	2106      	movs	r1, #6
 80014fe:	4885      	ldr	r0, [pc, #532]	; (8001714 <LUNA_INIT+0x250>)
 8001500:	f002 fa84 	bl	8003a0c <MCAL_USART_SendData>
 8001504:	2100      	movs	r1, #0
 8001506:	4883      	ldr	r0, [pc, #524]	; (8001714 <LUNA_INIT+0x250>)
 8001508:	f002 fa80 	bl	8003a0c <MCAL_USART_SendData>
 800150c:	21c2      	movs	r1, #194	; 0xc2
 800150e:	4881      	ldr	r0, [pc, #516]	; (8001714 <LUNA_INIT+0x250>)
 8001510:	f002 fa7c 	bl	8003a0c <MCAL_USART_SendData>
 8001514:	2101      	movs	r1, #1
 8001516:	487f      	ldr	r0, [pc, #508]	; (8001714 <LUNA_INIT+0x250>)
 8001518:	f002 fa78 	bl	8003a0c <MCAL_USART_SendData>
 800151c:	2100      	movs	r1, #0
 800151e:	487d      	ldr	r0, [pc, #500]	; (8001714 <LUNA_INIT+0x250>)
 8001520:	f002 fa74 	bl	8003a0c <MCAL_USART_SendData>
 8001524:	2100      	movs	r1, #0
 8001526:	487b      	ldr	r0, [pc, #492]	; (8001714 <LUNA_INIT+0x250>)
 8001528:	f002 fa70 	bl	8003a0c <MCAL_USART_SendData>
	switch (mode){
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d048      	beq.n	80015c4 <LUNA_INIT+0x100>
 8001532:	2b02      	cmp	r3, #2
 8001534:	dc57      	bgt.n	80015e6 <LUNA_INIT+0x122>
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <LUNA_INIT+0x7c>
 800153a:	2b01      	cmp	r3, #1
 800153c:	d019      	beq.n	8001572 <LUNA_INIT+0xae>
 800153e:	e052      	b.n	80015e6 <LUNA_INIT+0x122>
	case CONTIOUS_RANGING_MODE:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x64);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001540:	215a      	movs	r1, #90	; 0x5a
 8001542:	4874      	ldr	r0, [pc, #464]	; (8001714 <LUNA_INIT+0x250>)
 8001544:	f002 fa62 	bl	8003a0c <MCAL_USART_SendData>
 8001548:	2106      	movs	r1, #6
 800154a:	4872      	ldr	r0, [pc, #456]	; (8001714 <LUNA_INIT+0x250>)
 800154c:	f002 fa5e 	bl	8003a0c <MCAL_USART_SendData>
 8001550:	2103      	movs	r1, #3
 8001552:	4870      	ldr	r0, [pc, #448]	; (8001714 <LUNA_INIT+0x250>)
 8001554:	f002 fa5a 	bl	8003a0c <MCAL_USART_SendData>
 8001558:	2164      	movs	r1, #100	; 0x64
 800155a:	486e      	ldr	r0, [pc, #440]	; (8001714 <LUNA_INIT+0x250>)
 800155c:	f002 fa56 	bl	8003a0c <MCAL_USART_SendData>
 8001560:	2100      	movs	r1, #0
 8001562:	486c      	ldr	r0, [pc, #432]	; (8001714 <LUNA_INIT+0x250>)
 8001564:	f002 fa52 	bl	8003a0c <MCAL_USART_SendData>
 8001568:	2100      	movs	r1, #0
 800156a:	486a      	ldr	r0, [pc, #424]	; (8001714 <LUNA_INIT+0x250>)
 800156c:	f002 fa4e 	bl	8003a0c <MCAL_USART_SendData>
		break;
 8001570:	e039      	b.n	80015e6 <LUNA_INIT+0x122>
	case TRIGER_MODE :
		/*frequancy ==0*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x03);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00); MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);	MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001572:	215a      	movs	r1, #90	; 0x5a
 8001574:	4867      	ldr	r0, [pc, #412]	; (8001714 <LUNA_INIT+0x250>)
 8001576:	f002 fa49 	bl	8003a0c <MCAL_USART_SendData>
 800157a:	2106      	movs	r1, #6
 800157c:	4865      	ldr	r0, [pc, #404]	; (8001714 <LUNA_INIT+0x250>)
 800157e:	f002 fa45 	bl	8003a0c <MCAL_USART_SendData>
 8001582:	2103      	movs	r1, #3
 8001584:	4863      	ldr	r0, [pc, #396]	; (8001714 <LUNA_INIT+0x250>)
 8001586:	f002 fa41 	bl	8003a0c <MCAL_USART_SendData>
 800158a:	2100      	movs	r1, #0
 800158c:	4861      	ldr	r0, [pc, #388]	; (8001714 <LUNA_INIT+0x250>)
 800158e:	f002 fa3d 	bl	8003a0c <MCAL_USART_SendData>
 8001592:	2100      	movs	r1, #0
 8001594:	485f      	ldr	r0, [pc, #380]	; (8001714 <LUNA_INIT+0x250>)
 8001596:	f002 fa39 	bl	8003a0c <MCAL_USART_SendData>
 800159a:	2100      	movs	r1, #0
 800159c:	485d      	ldr	r0, [pc, #372]	; (8001714 <LUNA_INIT+0x250>)
 800159e:	f002 fa35 	bl	8003a0c <MCAL_USART_SendData>
		/*triger mode*/
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80015a2:	215a      	movs	r1, #90	; 0x5a
 80015a4:	485b      	ldr	r0, [pc, #364]	; (8001714 <LUNA_INIT+0x250>)
 80015a6:	f002 fa31 	bl	8003a0c <MCAL_USART_SendData>
 80015aa:	2104      	movs	r1, #4
 80015ac:	4859      	ldr	r0, [pc, #356]	; (8001714 <LUNA_INIT+0x250>)
 80015ae:	f002 fa2d 	bl	8003a0c <MCAL_USART_SendData>
 80015b2:	2104      	movs	r1, #4
 80015b4:	4857      	ldr	r0, [pc, #348]	; (8001714 <LUNA_INIT+0x250>)
 80015b6:	f002 fa29 	bl	8003a0c <MCAL_USART_SendData>
 80015ba:	2100      	movs	r1, #0
 80015bc:	4855      	ldr	r0, [pc, #340]	; (8001714 <LUNA_INIT+0x250>)
 80015be:	f002 fa25 	bl	8003a0c <MCAL_USART_SendData>
		break;
 80015c2:	e010      	b.n	80015e6 <LUNA_INIT+0x122>
	case ON_OFF_MODE :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x04);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x3B);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80015c4:	215a      	movs	r1, #90	; 0x5a
 80015c6:	4853      	ldr	r0, [pc, #332]	; (8001714 <LUNA_INIT+0x250>)
 80015c8:	f002 fa20 	bl	8003a0c <MCAL_USART_SendData>
 80015cc:	2104      	movs	r1, #4
 80015ce:	4851      	ldr	r0, [pc, #324]	; (8001714 <LUNA_INIT+0x250>)
 80015d0:	f002 fa1c 	bl	8003a0c <MCAL_USART_SendData>
 80015d4:	213b      	movs	r1, #59	; 0x3b
 80015d6:	484f      	ldr	r0, [pc, #316]	; (8001714 <LUNA_INIT+0x250>)
 80015d8:	f002 fa18 	bl	8003a0c <MCAL_USART_SendData>
 80015dc:	2100      	movs	r1, #0
 80015de:	484d      	ldr	r0, [pc, #308]	; (8001714 <LUNA_INIT+0x250>)
 80015e0:	f002 fa14 	bl	8003a0c <MCAL_USART_SendData>
		break;
 80015e4:	bf00      	nop
	}
	switch (format)
 80015e6:	79bb      	ldrb	r3, [r7, #6]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	f200 808d 	bhi.w	8001708 <LUNA_INIT+0x244>
 80015ee:	a201      	add	r2, pc, #4	; (adr r2, 80015f4 <LUNA_INIT+0x130>)
 80015f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f4:	0800160d 	.word	0x0800160d
 80015f8:	08001637 	.word	0x08001637
 80015fc:	08001661 	.word	0x08001661
 8001600:	0800168b 	.word	0x0800168b
 8001604:	080016b5 	.word	0x080016b5
 8001608:	080016df 	.word	0x080016df
	{
	case BYTE_9_CM:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x01);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800160c:	215a      	movs	r1, #90	; 0x5a
 800160e:	4841      	ldr	r0, [pc, #260]	; (8001714 <LUNA_INIT+0x250>)
 8001610:	f002 f9fc 	bl	8003a0c <MCAL_USART_SendData>
 8001614:	2105      	movs	r1, #5
 8001616:	483f      	ldr	r0, [pc, #252]	; (8001714 <LUNA_INIT+0x250>)
 8001618:	f002 f9f8 	bl	8003a0c <MCAL_USART_SendData>
 800161c:	2105      	movs	r1, #5
 800161e:	483d      	ldr	r0, [pc, #244]	; (8001714 <LUNA_INIT+0x250>)
 8001620:	f002 f9f4 	bl	8003a0c <MCAL_USART_SendData>
 8001624:	2101      	movs	r1, #1
 8001626:	483b      	ldr	r0, [pc, #236]	; (8001714 <LUNA_INIT+0x250>)
 8001628:	f002 f9f0 	bl	8003a0c <MCAL_USART_SendData>
 800162c:	2100      	movs	r1, #0
 800162e:	4839      	ldr	r0, [pc, #228]	; (8001714 <LUNA_INIT+0x250>)
 8001630:	f002 f9ec 	bl	8003a0c <MCAL_USART_SendData>
		break;
 8001634:	e068      	b.n	8001708 <LUNA_INIT+0x244>
	case PLX :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x02);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001636:	215a      	movs	r1, #90	; 0x5a
 8001638:	4836      	ldr	r0, [pc, #216]	; (8001714 <LUNA_INIT+0x250>)
 800163a:	f002 f9e7 	bl	8003a0c <MCAL_USART_SendData>
 800163e:	2105      	movs	r1, #5
 8001640:	4834      	ldr	r0, [pc, #208]	; (8001714 <LUNA_INIT+0x250>)
 8001642:	f002 f9e3 	bl	8003a0c <MCAL_USART_SendData>
 8001646:	2105      	movs	r1, #5
 8001648:	4832      	ldr	r0, [pc, #200]	; (8001714 <LUNA_INIT+0x250>)
 800164a:	f002 f9df 	bl	8003a0c <MCAL_USART_SendData>
 800164e:	2102      	movs	r1, #2
 8001650:	4830      	ldr	r0, [pc, #192]	; (8001714 <LUNA_INIT+0x250>)
 8001652:	f002 f9db 	bl	8003a0c <MCAL_USART_SendData>
 8001656:	2100      	movs	r1, #0
 8001658:	482e      	ldr	r0, [pc, #184]	; (8001714 <LUNA_INIT+0x250>)
 800165a:	f002 f9d7 	bl	8003a0c <MCAL_USART_SendData>
		break;
 800165e:	e053      	b.n	8001708 <LUNA_INIT+0x244>
	case BYTE_9_MM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x06);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 8001660:	215a      	movs	r1, #90	; 0x5a
 8001662:	482c      	ldr	r0, [pc, #176]	; (8001714 <LUNA_INIT+0x250>)
 8001664:	f002 f9d2 	bl	8003a0c <MCAL_USART_SendData>
 8001668:	2105      	movs	r1, #5
 800166a:	482a      	ldr	r0, [pc, #168]	; (8001714 <LUNA_INIT+0x250>)
 800166c:	f002 f9ce 	bl	8003a0c <MCAL_USART_SendData>
 8001670:	2105      	movs	r1, #5
 8001672:	4828      	ldr	r0, [pc, #160]	; (8001714 <LUNA_INIT+0x250>)
 8001674:	f002 f9ca 	bl	8003a0c <MCAL_USART_SendData>
 8001678:	2106      	movs	r1, #6
 800167a:	4826      	ldr	r0, [pc, #152]	; (8001714 <LUNA_INIT+0x250>)
 800167c:	f002 f9c6 	bl	8003a0c <MCAL_USART_SendData>
 8001680:	2100      	movs	r1, #0
 8001682:	4824      	ldr	r0, [pc, #144]	; (8001714 <LUNA_INIT+0x250>)
 8001684:	f002 f9c2 	bl	8003a0c <MCAL_USART_SendData>
		break;
 8001688:	e03e      	b.n	8001708 <LUNA_INIT+0x244>
	case BYTE_32:
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x07);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 800168a:	215a      	movs	r1, #90	; 0x5a
 800168c:	4821      	ldr	r0, [pc, #132]	; (8001714 <LUNA_INIT+0x250>)
 800168e:	f002 f9bd 	bl	8003a0c <MCAL_USART_SendData>
 8001692:	2105      	movs	r1, #5
 8001694:	481f      	ldr	r0, [pc, #124]	; (8001714 <LUNA_INIT+0x250>)
 8001696:	f002 f9b9 	bl	8003a0c <MCAL_USART_SendData>
 800169a:	2105      	movs	r1, #5
 800169c:	481d      	ldr	r0, [pc, #116]	; (8001714 <LUNA_INIT+0x250>)
 800169e:	f002 f9b5 	bl	8003a0c <MCAL_USART_SendData>
 80016a2:	2107      	movs	r1, #7
 80016a4:	481b      	ldr	r0, [pc, #108]	; (8001714 <LUNA_INIT+0x250>)
 80016a6:	f002 f9b1 	bl	8003a0c <MCAL_USART_SendData>
 80016aa:	2100      	movs	r1, #0
 80016ac:	4819      	ldr	r0, [pc, #100]	; (8001714 <LUNA_INIT+0x250>)
 80016ae:	f002 f9ad 	bl	8003a0c <MCAL_USART_SendData>
		break;
 80016b2:	e029      	b.n	8001708 <LUNA_INIT+0x244>
	case ID_0 :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x08);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80016b4:	215a      	movs	r1, #90	; 0x5a
 80016b6:	4817      	ldr	r0, [pc, #92]	; (8001714 <LUNA_INIT+0x250>)
 80016b8:	f002 f9a8 	bl	8003a0c <MCAL_USART_SendData>
 80016bc:	2105      	movs	r1, #5
 80016be:	4815      	ldr	r0, [pc, #84]	; (8001714 <LUNA_INIT+0x250>)
 80016c0:	f002 f9a4 	bl	8003a0c <MCAL_USART_SendData>
 80016c4:	2105      	movs	r1, #5
 80016c6:	4813      	ldr	r0, [pc, #76]	; (8001714 <LUNA_INIT+0x250>)
 80016c8:	f002 f9a0 	bl	8003a0c <MCAL_USART_SendData>
 80016cc:	2108      	movs	r1, #8
 80016ce:	4811      	ldr	r0, [pc, #68]	; (8001714 <LUNA_INIT+0x250>)
 80016d0:	f002 f99c 	bl	8003a0c <MCAL_USART_SendData>
 80016d4:	2100      	movs	r1, #0
 80016d6:	480f      	ldr	r0, [pc, #60]	; (8001714 <LUNA_INIT+0x250>)
 80016d8:	f002 f998 	bl	8003a0c <MCAL_USART_SendData>
		break;
 80016dc:	e014      	b.n	8001708 <LUNA_INIT+0x244>
	case BYTE_8_CM :
		MCAL_USART_SendData(LUNA_UART_INSTANT,0x5A);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x05);  MCAL_USART_SendData(LUNA_UART_INSTANT,0x09);   MCAL_USART_SendData(LUNA_UART_INSTANT,0x00);
 80016de:	215a      	movs	r1, #90	; 0x5a
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <LUNA_INIT+0x250>)
 80016e2:	f002 f993 	bl	8003a0c <MCAL_USART_SendData>
 80016e6:	2105      	movs	r1, #5
 80016e8:	480a      	ldr	r0, [pc, #40]	; (8001714 <LUNA_INIT+0x250>)
 80016ea:	f002 f98f 	bl	8003a0c <MCAL_USART_SendData>
 80016ee:	2105      	movs	r1, #5
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <LUNA_INIT+0x250>)
 80016f2:	f002 f98b 	bl	8003a0c <MCAL_USART_SendData>
 80016f6:	2109      	movs	r1, #9
 80016f8:	4806      	ldr	r0, [pc, #24]	; (8001714 <LUNA_INIT+0x250>)
 80016fa:	f002 f987 	bl	8003a0c <MCAL_USART_SendData>
 80016fe:	2100      	movs	r1, #0
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <LUNA_INIT+0x250>)
 8001702:	f002 f983 	bl	8003a0c <MCAL_USART_SendData>
		break;
 8001706:	bf00      	nop
	}
}
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd90      	pop	{r4, r7, pc}
 8001710:	08004864 	.word	0x08004864
 8001714:	40004800 	.word	0x40004800

08001718 <TFT_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TFT_init(RGB_fromat RGB){
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af04      	add	r7, sp, #16
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]

	/**************init the moudles used*************/
	SPI_Config_t TFT_Config={enabled,Master,SPI_8_BITS,MSB,SW,F_CPU_2,idle_0,first_clock};
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	2301      	movs	r3, #1
 8001732:	743b      	strb	r3, [r7, #16]
 8001734:	2301      	movs	r3, #1
 8001736:	747b      	strb	r3, [r7, #17]
	PIN_config PINx={TFT_RESET_PIN,OUTPUT_PP,SPEED_10};
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <TFT_init+0xf4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
	MCAL_SPI_init(TFT_SPI_inistant, &TFT_Config);
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4619      	mov	r1, r3
 8001744:	4832      	ldr	r0, [pc, #200]	; (8001810 <TFT_init+0xf8>)
 8001746:	f001 fc75 	bl	8003034 <MCAL_SPI_init>
	MCAL_GPIO_init(TFT_PORT, &PINx);
 800174a:	f107 030c 	add.w	r3, r7, #12
 800174e:	4619      	mov	r1, r3
 8001750:	4830      	ldr	r0, [pc, #192]	; (8001814 <TFT_init+0xfc>)
 8001752:	f001 f9a5 	bl	8002aa0 <MCAL_GPIO_init>
	PINx.PIN_number =TFT_A0_PIN;
 8001756:	2303      	movs	r3, #3
 8001758:	81bb      	strh	r3, [r7, #12]
	MCAL_GPIO_init(TFT_PORT, &PINx);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	482c      	ldr	r0, [pc, #176]	; (8001814 <TFT_init+0xfc>)
 8001762:	f001 f99d 	bl	8002aa0 <MCAL_GPIO_init>
	/**************Start the init*************/
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 8001766:	2201      	movs	r2, #1
 8001768:	2104      	movs	r1, #4
 800176a:	482a      	ldr	r0, [pc, #168]	; (8001814 <TFT_init+0xfc>)
 800176c:	f001 fa82 	bl	8002c74 <MCAL_write_PIN>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_LOW);
 8001770:	2200      	movs	r2, #0
 8001772:	2102      	movs	r1, #2
 8001774:	4827      	ldr	r0, [pc, #156]	; (8001814 <TFT_init+0xfc>)
 8001776:	f001 fa7d 	bl	8002c74 <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 800177a:	2078      	movs	r0, #120	; 0x78
 800177c:	f001 ffc2 	bl	8003704 <_TIM1_delay_ms>
	MCAL_write_PIN(TFT_PORT, TFT_RESET_PIN, LOGIC_HIGH);
 8001780:	2201      	movs	r2, #1
 8001782:	2102      	movs	r1, #2
 8001784:	4823      	ldr	r0, [pc, #140]	; (8001814 <TFT_init+0xfc>)
 8001786:	f001 fa75 	bl	8002c74 <MCAL_write_PIN>
	_TIM1_delay_ms( 120);
 800178a:	2078      	movs	r0, #120	; 0x78
 800178c:	f001 ffba 	bl	8003704 <_TIM1_delay_ms>

	TFT_send_command(0x01);
 8001790:	2001      	movs	r0, #1
 8001792:	f000 f91b 	bl	80019cc <TFT_send_command>
	_TIM1_delay_ms( 120);
 8001796:	2078      	movs	r0, #120	; 0x78
 8001798:	f001 ffb4 	bl	8003704 <_TIM1_delay_ms>

	TFT_send_command(TFT_Sleep_Out_MODE);
 800179c:	2011      	movs	r0, #17
 800179e:	f000 f915 	bl	80019cc <TFT_send_command>
	_TIM1_delay_ms( 110);
 80017a2:	206e      	movs	r0, #110	; 0x6e
 80017a4:	f001 ffae 	bl	8003704 <_TIM1_delay_ms>

	TFT_send_command(TFT_Pixel_Format_MODE); // Interface Pixel Format
 80017a8:	203a      	movs	r0, #58	; 0x3a
 80017aa:	f000 f90f 	bl	80019cc <TFT_send_command>
	TFT_send_data(RGB); //18 bit
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f92d 	bl	8001a10 <TFT_send_data>
	_TIM1_delay_ms( 120);
 80017b6:	2078      	movs	r0, #120	; 0x78
 80017b8:	f001 ffa4 	bl	8003704 <_TIM1_delay_ms>

//		TFT_send_command(0x23); // Interface Pixel Format
	TFT_send_command(0x36);
 80017bc:	2036      	movs	r0, #54	; 0x36
 80017be:	f000 f905 	bl	80019cc <TFT_send_command>
	_TIM1_delay_ms( 120);
 80017c2:	2078      	movs	r0, #120	; 0x78
 80017c4:	f001 ff9e 	bl	8003704 <_TIM1_delay_ms>

//	TFT_send_data(0b00011000 );
	TFT_send_data(0b10000000 );
 80017c8:	2080      	movs	r0, #128	; 0x80
 80017ca:	f000 f921 	bl	8001a10 <TFT_send_data>

	_TIM1_delay_ms( 120);
 80017ce:	2078      	movs	r0, #120	; 0x78
 80017d0:	f001 ff98 	bl	8003704 <_TIM1_delay_ms>

	/////////////////////
	TFT_send_command(0xB4);
 80017d4:	20b4      	movs	r0, #180	; 0xb4
 80017d6:	f000 f8f9 	bl	80019cc <TFT_send_command>
//	_TIM1_delay_ms( 120);

	TFT_send_data(0 );
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 f918 	bl	8001a10 <TFT_send_data>
	/////////////////////////
	TFT_send_command(TFT_Display_On_MODE);
 80017e0:	2029      	movs	r0, #41	; 0x29
 80017e2:	f000 f8f3 	bl	80019cc <TFT_send_command>
	_TIM1_delay_ms( 120);
 80017e6:	2078      	movs	r0, #120	; 0x78
 80017e8:	f001 ff8c 	bl	8003704 <_TIM1_delay_ms>





	TFT_SET_BACKGROUND(0,159,0,127,0xff,0xff,0xff);
 80017ec:	23ff      	movs	r3, #255	; 0xff
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	23ff      	movs	r3, #255	; 0xff
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	23ff      	movs	r3, #255	; 0xff
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	237f      	movs	r3, #127	; 0x7f
 80017fa:	2200      	movs	r2, #0
 80017fc:	219f      	movs	r1, #159	; 0x9f
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f8a1 	bl	8001946 <TFT_SET_BACKGROUND>



}
 8001804:	bf00      	nop
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	08004874 	.word	0x08004874
 8001810:	40013000 	.word	0x40013000
 8001814:	40010800 	.word	0x40010800

08001818 <TFT_SET_LOCATION>:
void TFT_SET_LOCATION(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2){
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4604      	mov	r4, r0
 8001820:	4608      	mov	r0, r1
 8001822:	4611      	mov	r1, r2
 8001824:	461a      	mov	r2, r3
 8001826:	4623      	mov	r3, r4
 8001828:	80fb      	strh	r3, [r7, #6]
 800182a:	4603      	mov	r3, r0
 800182c:	80bb      	strh	r3, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	807b      	strh	r3, [r7, #2]
 8001832:	4613      	mov	r3, r2
 8001834:	803b      	strh	r3, [r7, #0]
	/***********************************/
	TFT_send_command(TFT_SET_Column_MODE);
 8001836:	202a      	movs	r0, #42	; 0x2a
 8001838:	f000 f8c8 	bl	80019cc <TFT_send_command>
	TFT_send_data((y1>>8));
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	b29b      	uxth	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f8e3 	bl	8001a10 <TFT_send_data>
	TFT_send_data(((uint8_t)y1));
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f8de 	bl	8001a10 <TFT_send_data>


	TFT_send_data((y2>>8));
 8001854:	883b      	ldrh	r3, [r7, #0]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b29b      	uxth	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f8d7 	bl	8001a10 <TFT_send_data>
	TFT_send_data(((uint8_t)y2));
 8001862:	883b      	ldrh	r3, [r7, #0]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f8d2 	bl	8001a10 <TFT_send_data>
	/***********************************/
	TFT_send_command(TFT_SET_Row_MODE);
 800186c:	202b      	movs	r0, #43	; 0x2b
 800186e:	f000 f8ad 	bl	80019cc <TFT_send_command>
	TFT_send_data((x1>>8));
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	b29b      	uxth	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f8c8 	bl	8001a10 <TFT_send_data>
	TFT_send_data(((uint8_t)x1));
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f8c3 	bl	8001a10 <TFT_send_data>


	TFT_send_data((x2>>8));
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	b29b      	uxth	r3, r3
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f8bc 	bl	8001a10 <TFT_send_data>
	TFT_send_data(((uint8_t)x2));
 8001898:	88bb      	ldrh	r3, [r7, #4]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f8b7 	bl	8001a10 <TFT_send_data>
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <TFT_SEND_Image>:

void TFT_SEND_Image(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2,uint16_t* image){
 80018aa:	b590      	push	{r4, r7, lr}
 80018ac:	b087      	sub	sp, #28
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4604      	mov	r4, r0
 80018b2:	4608      	mov	r0, r1
 80018b4:	4611      	mov	r1, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	4623      	mov	r3, r4
 80018ba:	80fb      	strh	r3, [r7, #6]
 80018bc:	4603      	mov	r3, r0
 80018be:	80bb      	strh	r3, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	807b      	strh	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	803b      	strh	r3, [r7, #0]
	uint32_t image_size=(((x2+1)-x1)*((y2+1)-y1));
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	883a      	ldrh	r2, [r7, #0]
 80018d2:	1c51      	adds	r1, r2, #1
 80018d4:	887a      	ldrh	r2, [r7, #2]
 80018d6:	1a8a      	subs	r2, r1, r2
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	613b      	str	r3, [r7, #16]
	uint8_t r=0,g=0,b=0;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	2300      	movs	r3, #0
 80018e4:	73bb      	strb	r3, [r7, #14]
 80018e6:	2300      	movs	r3, #0
 80018e8:	737b      	strb	r3, [r7, #13]

	TFT_SET_LOCATION(x1,x2,y1,y2);
 80018ea:	883b      	ldrh	r3, [r7, #0]
 80018ec:	887a      	ldrh	r2, [r7, #2]
 80018ee:	88b9      	ldrh	r1, [r7, #4]
 80018f0:	88f8      	ldrh	r0, [r7, #6]
 80018f2:	f7ff ff91 	bl	8001818 <TFT_SET_LOCATION>
	TFT_send_command(TFT_Memory_Write_MODE);
 80018f6:	202c      	movs	r0, #44	; 0x2c
 80018f8:	f000 f868 	bl	80019cc <TFT_send_command>
	for(uint32_t i=0;i<image_size;i++){
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	e016      	b.n	8001930 <TFT_SEND_Image+0x86>
//		b = (b * 255) / 31;
//
//		TFT_send_data(r);
//		TFT_send_data(g);
//		TFT_send_data(b);
				TFT_send_data(((image[i])>>8));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001908:	4413      	add	r3, r2
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	b29b      	uxth	r3, r3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f87c 	bl	8001a10 <TFT_send_data>
				TFT_send_data(image[i]);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800191e:	4413      	add	r3, r2
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f873 	bl	8001a10 <TFT_send_data>
	for(uint32_t i=0;i<image_size;i++){
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d3e4      	bcc.n	8001902 <TFT_SEND_Image+0x58>
	}
	TFT_send_command(0x00);
 8001938:	2000      	movs	r0, #0
 800193a:	f000 f847 	bl	80019cc <TFT_send_command>


}
 800193e:	bf00      	nop
 8001940:	371c      	adds	r7, #28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd90      	pop	{r4, r7, pc}

08001946 <TFT_SET_BACKGROUND>:
void TFT_SET_BACKGROUND(uint16_t x1,uint16_t x2,uint16_t y1,uint16_t y2,uint8_t r,uint8_t g,uint8_t b){
 8001946:	b590      	push	{r4, r7, lr}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	4604      	mov	r4, r0
 800194e:	4608      	mov	r0, r1
 8001950:	4611      	mov	r1, r2
 8001952:	461a      	mov	r2, r3
 8001954:	4623      	mov	r3, r4
 8001956:	80fb      	strh	r3, [r7, #6]
 8001958:	4603      	mov	r3, r0
 800195a:	80bb      	strh	r3, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
 8001960:	4613      	mov	r3, r2
 8001962:	803b      	strh	r3, [r7, #0]
	uint32_t image_size=(((x2+1)-x1)*((y2+1)-y1));
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	883a      	ldrh	r2, [r7, #0]
 800196e:	1c51      	adds	r1, r2, #1
 8001970:	887a      	ldrh	r2, [r7, #2]
 8001972:	1a8a      	subs	r2, r1, r2
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	60bb      	str	r3, [r7, #8]
	TFT_SET_LOCATION(x1,x2,y1,y2);
 800197a:	883b      	ldrh	r3, [r7, #0]
 800197c:	887a      	ldrh	r2, [r7, #2]
 800197e:	88b9      	ldrh	r1, [r7, #4]
 8001980:	88f8      	ldrh	r0, [r7, #6]
 8001982:	f7ff ff49 	bl	8001818 <TFT_SET_LOCATION>
	TFT_send_command(TFT_Memory_Write_MODE);
 8001986:	202c      	movs	r0, #44	; 0x2c
 8001988:	f000 f820 	bl	80019cc <TFT_send_command>
	for(uint32_t i=0;i<image_size;i++){
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e011      	b.n	80019b6 <TFT_SET_BACKGROUND+0x70>
		TFT_send_data(r);
 8001992:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001996:	4618      	mov	r0, r3
 8001998:	f000 f83a 	bl	8001a10 <TFT_send_data>
		TFT_send_data(g);
 800199c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 f835 	bl	8001a10 <TFT_send_data>
		TFT_send_data(b);
 80019a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f830 	bl	8001a10 <TFT_send_data>
	for(uint32_t i=0;i<image_size;i++){
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3e9      	bcc.n	8001992 <TFT_SET_BACKGROUND+0x4c>
	}
	TFT_send_command(0x00);
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f804 	bl	80019cc <TFT_send_command>


}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}

080019cc <TFT_send_command>:

		break;
	}
}
void TFT_send_command(uint8_t command)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 80019d6:	2200      	movs	r2, #0
 80019d8:	2104      	movs	r1, #4
 80019da:	480b      	ldr	r0, [pc, #44]	; (8001a08 <TFT_send_command+0x3c>)
 80019dc:	f001 f94a 	bl	8002c74 <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_LOW);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2103      	movs	r1, #3
 80019e4:	4808      	ldr	r0, [pc, #32]	; (8001a08 <TFT_send_command+0x3c>)
 80019e6:	f001 f945 	bl	8002c74 <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, command);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4807      	ldr	r0, [pc, #28]	; (8001a0c <TFT_send_command+0x40>)
 80019f0:	f001 fbe0 	bl	80031b4 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 80019f4:	2201      	movs	r2, #1
 80019f6:	2104      	movs	r1, #4
 80019f8:	4803      	ldr	r0, [pc, #12]	; (8001a08 <TFT_send_command+0x3c>)
 80019fa:	f001 f93b 	bl	8002c74 <MCAL_write_PIN>

}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40010800 	.word	0x40010800
 8001a0c:	40013000 	.word	0x40013000

08001a10 <TFT_send_data>:


void TFT_send_data(uint8_t data){
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]

	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_LOW); // MAKE CS LOW TO START COMMUCATION USING SPI
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2104      	movs	r1, #4
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <TFT_send_data+0x3c>)
 8001a20:	f001 f928 	bl	8002c74 <MCAL_write_PIN>


	MCAL_write_PIN(TFT_PORT, TFT_A0_PIN, LOGIC_HIGH);
 8001a24:	2201      	movs	r2, #1
 8001a26:	2103      	movs	r1, #3
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <TFT_send_data+0x3c>)
 8001a2a:	f001 f923 	bl	8002c74 <MCAL_write_PIN>

	MCAL_SPI_SendData(TFT_SPI_inistant, data);
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4619      	mov	r1, r3
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <TFT_send_data+0x40>)
 8001a34:	f001 fbbe 	bl	80031b4 <MCAL_SPI_SendData>


	MCAL_write_PIN(TFT_PORT, TFT_CS_PIN, LOGIC_HIGH);
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <TFT_send_data+0x3c>)
 8001a3e:	f001 f919 	bl	8002c74 <MCAL_write_PIN>


}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40010800 	.word	0x40010800
 8001a50:	40013000 	.word	0x40013000

08001a54 <TFT_send_image>:



uint8_t TFT_send_image(uint8_t image_flag){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]


//	TFT_SET_BACKGROUND(0x008C,0x0153,0x006E,0x00D1,0xff,0xff,0xff);
	switch(image_flag){
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	3b08      	subs	r3, #8
 8001a62:	2b0b      	cmp	r3, #11
 8001a64:	d842      	bhi.n	8001aec <TFT_send_image+0x98>
 8001a66:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <TFT_send_image+0x18>)
 8001a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6c:	08001ac5 	.word	0x08001ac5
 8001a70:	08001a9d 	.word	0x08001a9d
 8001a74:	08001aed 	.word	0x08001aed
 8001a78:	08001aed 	.word	0x08001aed
 8001a7c:	08001aed 	.word	0x08001aed
 8001a80:	08001aed 	.word	0x08001aed
 8001a84:	08001aed 	.word	0x08001aed
 8001a88:	08001aed 	.word	0x08001aed
 8001a8c:	08001ab1 	.word	0x08001ab1
 8001a90:	08001aed 	.word	0x08001aed
 8001a94:	08001aed 	.word	0x08001aed
 8001a98:	08001ad9 	.word	0x08001ad9
	case (_100_KM_SIGN_FLAG):
	TFT_SEND_Image(30, 129, 14, 113, _100_KM_SIGN);
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <TFT_send_image+0xb4>)
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2371      	movs	r3, #113	; 0x71
 8001aa2:	220e      	movs	r2, #14
 8001aa4:	2181      	movs	r1, #129	; 0x81
 8001aa6:	201e      	movs	r0, #30
 8001aa8:	f7ff feff 	bl	80018aa <TFT_SEND_Image>

	return 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	e026      	b.n	8001afe <TFT_send_image+0xaa>
	break;

	case _120_KM_SIGN_FLAG:
		TFT_SEND_Image(30, 129, 14, 113, _120_KM_SIGN);
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <TFT_send_image+0xb8>)
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	2371      	movs	r3, #113	; 0x71
 8001ab6:	220e      	movs	r2, #14
 8001ab8:	2181      	movs	r1, #129	; 0x81
 8001aba:	201e      	movs	r0, #30
 8001abc:	f7ff fef5 	bl	80018aa <TFT_SEND_Image>


		return 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e01c      	b.n	8001afe <TFT_send_image+0xaa>
		break;


		break;
	case NO_WAITING_SIGN_FLAG:
		TFT_SEND_Image(30, 129, 14, 113, NO_WAITING_SIGN);
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <TFT_send_image+0xbc>)
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2371      	movs	r3, #113	; 0x71
 8001aca:	220e      	movs	r2, #14
 8001acc:	2181      	movs	r1, #129	; 0x81
 8001ace:	201e      	movs	r0, #30
 8001ad0:	f7ff feeb 	bl	80018aa <TFT_SEND_Image>

		return 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	e012      	b.n	8001afe <TFT_send_image+0xaa>
		break;
	case _40_KM_SIGN_FLAG:
		TFT_SEND_Image(30, 129, 14, 113, _40_KM_SIGN);
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <TFT_send_image+0xc0>)
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2371      	movs	r3, #113	; 0x71
 8001ade:	220e      	movs	r2, #14
 8001ae0:	2181      	movs	r1, #129	; 0x81
 8001ae2:	201e      	movs	r0, #30
 8001ae4:	f7ff fee1 	bl	80018aa <TFT_SEND_Image>

		return 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e008      	b.n	8001afe <TFT_send_image+0xaa>
		break;
	default:
		TFT_SEND_Image(30, 129, 14, 113, _NO_SIGN);
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <TFT_send_image+0xc4>)
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2371      	movs	r3, #113	; 0x71
 8001af2:	220e      	movs	r2, #14
 8001af4:	2181      	movs	r1, #129	; 0x81
 8001af6:	201e      	movs	r0, #30
 8001af8:	f7ff fed7 	bl	80018aa <TFT_SEND_Image>

		return 1;
 8001afc:	2301      	movs	r3, #1





}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	08004984 	.word	0x08004984
 8001b0c:	080133e4 	.word	0x080133e4
 8001b10:	0800e5c4 	.word	0x0800e5c4
 8001b14:	080097a4 	.word	0x080097a4
 8001b18:	08018204 	.word	0x08018204

08001b1c <ADC_ERROR_HANDLER>:
 *      Author: medoo
 */

#include "ADC.h"
ADC_CONFIG G_ADC_config[2][16]={0};
void ADC_ERROR_HANDLER(){
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	while(1);
 8001b20:	e7fe      	b.n	8001b20 <ADC_ERROR_HANDLER+0x4>
	...

08001b24 <ADC_GPIO_CONFIG>:
}
void ADC_GPIO_CONFIG(uint8_t CHx){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b090      	sub	sp, #64	; 0x40
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
	PIN_config PINx={PIN_0,Analog,0};
 8001b2e:	2300      	movs	r3, #0
 8001b30:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001b32:	2300      	movs	r3, #0
 8001b34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	switch(CHx){
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	f200 80d7 	bhi.w	8001cf4 <ADC_GPIO_CONFIG+0x1d0>
 8001b46:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <ADC_GPIO_CONFIG+0x28>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001b8d 	.word	0x08001b8d
 8001b50:	08001bab 	.word	0x08001bab
 8001b54:	08001bc9 	.word	0x08001bc9
 8001b58:	08001be7 	.word	0x08001be7
 8001b5c:	08001c05 	.word	0x08001c05
 8001b60:	08001c23 	.word	0x08001c23
 8001b64:	08001c41 	.word	0x08001c41
 8001b68:	08001c5f 	.word	0x08001c5f
 8001b6c:	08001c7d 	.word	0x08001c7d
 8001b70:	08001c9b 	.word	0x08001c9b
 8001b74:	08001cf5 	.word	0x08001cf5
 8001b78:	08001cf5 	.word	0x08001cf5
 8001b7c:	08001cf5 	.word	0x08001cf5
 8001b80:	08001cf5 	.word	0x08001cf5
 8001b84:	08001cb9 	.word	0x08001cb9
 8001b88:	08001cd7 	.word	0x08001cd7
	case 0:
		PINx=(PIN_config){PIN_0,Analog,0};
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001b96:	2300      	movs	r3, #0
 8001b98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001b9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4858      	ldr	r0, [pc, #352]	; (8001d04 <ADC_GPIO_CONFIG+0x1e0>)
 8001ba4:	f000 ff7c 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001ba8:	e0a7      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 1:
		PINx=(PIN_config){PIN_1,Analog,0};
 8001baa:	2301      	movs	r3, #1
 8001bac:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001bba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4850      	ldr	r0, [pc, #320]	; (8001d04 <ADC_GPIO_CONFIG+0x1e0>)
 8001bc2:	f000 ff6d 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001bc6:	e098      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 2:
		PINx=(PIN_config){PIN_2,Analog,0};
 8001bc8:	2302      	movs	r3, #2
 8001bca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001bd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4849      	ldr	r0, [pc, #292]	; (8001d04 <ADC_GPIO_CONFIG+0x1e0>)
 8001be0:	f000 ff5e 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001be4:	e089      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 3:
		PINx=(PIN_config){PIN_3,Analog,0};
 8001be6:	2303      	movs	r3, #3
 8001be8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001bf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4841      	ldr	r0, [pc, #260]	; (8001d04 <ADC_GPIO_CONFIG+0x1e0>)
 8001bfe:	f000 ff4f 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001c02:	e07a      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 4:
		PINx=(PIN_config){PIN_4,Analog,0};
 8001c04:	2304      	movs	r3, #4
 8001c06:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001c14:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	483a      	ldr	r0, [pc, #232]	; (8001d04 <ADC_GPIO_CONFIG+0x1e0>)
 8001c1c:	f000 ff40 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001c20:	e06b      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 5:
		PINx=(PIN_config){PIN_5,Analog,0};
 8001c22:	2305      	movs	r3, #5
 8001c24:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001c32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c36:	4619      	mov	r1, r3
 8001c38:	4832      	ldr	r0, [pc, #200]	; (8001d04 <ADC_GPIO_CONFIG+0x1e0>)
 8001c3a:	f000 ff31 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001c3e:	e05c      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 6:
		PINx=(PIN_config){PIN_6,Analog,0};
 8001c40:	2306      	movs	r3, #6
 8001c42:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001c50:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c54:	4619      	mov	r1, r3
 8001c56:	482b      	ldr	r0, [pc, #172]	; (8001d04 <ADC_GPIO_CONFIG+0x1e0>)
 8001c58:	f000 ff22 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001c5c:	e04d      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 7:
		PINx=(PIN_config){PIN_7,Analog,0};
 8001c5e:	2307      	movs	r3, #7
 8001c60:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOA,&PINx);
 8001c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c72:	4619      	mov	r1, r3
 8001c74:	4823      	ldr	r0, [pc, #140]	; (8001d04 <ADC_GPIO_CONFIG+0x1e0>)
 8001c76:	f000 ff13 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001c7a:	e03e      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 8:
		PINx=(PIN_config){PIN_0,Analog,0};
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8001c8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c90:	4619      	mov	r1, r3
 8001c92:	481d      	ldr	r0, [pc, #116]	; (8001d08 <ADC_GPIO_CONFIG+0x1e4>)
 8001c94:	f000 ff04 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001c98:	e02f      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 9:
		PINx=(PIN_config){PIN_1,Analog,0};
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOB,&PINx);
 8001caa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4815      	ldr	r0, [pc, #84]	; (8001d08 <ADC_GPIO_CONFIG+0x1e4>)
 8001cb2:	f000 fef5 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001cb6:	e020      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 14:
		PINx=(PIN_config){PIN_4,Analog,0};
 8001cb8:	2304      	movs	r3, #4
 8001cba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 8001cc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480f      	ldr	r0, [pc, #60]	; (8001d0c <ADC_GPIO_CONFIG+0x1e8>)
 8001cd0:	f000 fee6 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001cd4:	e011      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	case 15:
		PINx=(PIN_config){PIN_5,Analog,0};
 8001cd6:	2305      	movs	r3, #5
 8001cd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		MCAL_GPIO_init(GPIOC,&PINx);
 8001ce6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cea:	4619      	mov	r1, r3
 8001cec:	4807      	ldr	r0, [pc, #28]	; (8001d0c <ADC_GPIO_CONFIG+0x1e8>)
 8001cee:	f000 fed7 	bl	8002aa0 <MCAL_GPIO_init>
		break;
 8001cf2:	e002      	b.n	8001cfa <ADC_GPIO_CONFIG+0x1d6>
	default:
		ADC_ERROR_HANDLER();
 8001cf4:	f7ff ff12 	bl	8001b1c <ADC_ERROR_HANDLER>
		break;
 8001cf8:	bf00      	nop

	}



}
 8001cfa:	bf00      	nop
 8001cfc:	3740      	adds	r7, #64	; 0x40
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40010800 	.word	0x40010800
 8001d08:	40010c00 	.word	0x40010c00
 8001d0c:	40011000 	.word	0x40011000

08001d10 <ADC_init>:

ADC_return ADC_init(ADCx_REG *ADCx,ADC_CONFIG *config)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
	if(config->CHx_num>9 &&config->CHx_num<14)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b09      	cmp	r3, #9
 8001d20:	d905      	bls.n	8001d2e <ADC_init+0x1e>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b0d      	cmp	r3, #13
 8001d28:	d801      	bhi.n	8001d2e <ADC_init+0x1e>
		return ADC_error;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e177      	b.n	800201e <ADC_init+0x30e>
	//peripheral clock enable
	if(ADCx ==ADC1){
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a9a      	ldr	r2, [pc, #616]	; (8001f9c <ADC_init+0x28c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d113      	bne.n	8001d5e <ADC_init+0x4e>
		G_ADC_config[0][config->CHx_num]=*config;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4a98      	ldr	r2, [pc, #608]	; (8001fa0 <ADC_init+0x290>)
 8001d3e:	460b      	mov	r3, r1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	440b      	add	r3, r1
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<9);
 8001d50:	4b94      	ldr	r3, [pc, #592]	; (8001fa4 <ADC_init+0x294>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a93      	ldr	r2, [pc, #588]	; (8001fa4 <ADC_init+0x294>)
 8001d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	e013      	b.n	8001d86 <ADC_init+0x76>
	}
	else{
		G_ADC_config[1][config->CHx_num]=*config;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	4a8e      	ldr	r2, [pc, #568]	; (8001fa0 <ADC_init+0x290>)
 8001d66:	460b      	mov	r3, r1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	440b      	add	r3, r1
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	33c0      	adds	r3, #192	; 0xc0
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		RCC->APB2ENR |=(1<<10);
 8001d7a:	4b8a      	ldr	r3, [pc, #552]	; (8001fa4 <ADC_init+0x294>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	4a89      	ldr	r2, [pc, #548]	; (8001fa4 <ADC_init+0x294>)
 8001d80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d84:	6193      	str	r3, [r2, #24]
	}
	ADC_GPIO_CONFIG(config->CHx_num);
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff feca 	bl	8001b24 <ADC_GPIO_CONFIG>

	//The ADC can be powered-on by setting the ADON bit in the ADC_CR2 register
	ADCx->CR2.Bit_Name.ADON=1;
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6893      	ldr	r3, [r2, #8]
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6093      	str	r3, [r2, #8]
	_TIM1_delay_us(10);
 8001d9a:	200a      	movs	r0, #10
 8001d9c:	f001 fc86 	bl	80036ac <_TIM1_delay_us>
	/*Conversion starts when ADON bit is set for a second time by software after ADC power-up
	time (tSTAB).*/
	ADCx->CR2.Bit_Name.ADON=1;
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6893      	ldr	r3, [r2, #8]
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6093      	str	r3, [r2, #8]
	//	ADC clock (max 14Mhz)
	// i want to edit the prescaler to ensure the adc clock not more 14Mhz but i assume the my
	//	max clock not more 24 Mhz so the clock will be 12 Mhz

	switch((MCAL_GET_PCLCK2()/1000000UL)){
 8001daa:	f001 f92f 	bl	800300c <MCAL_GET_PCLCK2>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a7d      	ldr	r2, [pc, #500]	; (8001fa8 <ADC_init+0x298>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9b      	lsrs	r3, r3, #18
 8001db8:	2b1c      	cmp	r3, #28
 8001dba:	d014      	beq.n	8001de6 <ADC_init+0xd6>
 8001dbc:	2b1c      	cmp	r3, #28
 8001dbe:	d819      	bhi.n	8001df4 <ADC_init+0xe4>
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d002      	beq.n	8001dca <ADC_init+0xba>
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d007      	beq.n	8001dd8 <ADC_init+0xc8>
 8001dc8:	e014      	b.n	8001df4 <ADC_init+0xe4>
	case 8: //ADC CLK 4MHZ
		RCC->CFGR&=~(0b11<<14);
 8001dca:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <ADC_init+0x294>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a75      	ldr	r2, [pc, #468]	; (8001fa4 <ADC_init+0x294>)
 8001dd0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dd4:	6053      	str	r3, [r2, #4]
		break;
 8001dd6:	e014      	b.n	8001e02 <ADC_init+0xf2>
	case 16://ADC CLK 8MHZ
		RCC->CFGR&=~(0b11<<14);
 8001dd8:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <ADC_init+0x294>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a71      	ldr	r2, [pc, #452]	; (8001fa4 <ADC_init+0x294>)
 8001dde:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001de2:	6053      	str	r3, [r2, #4]
		break;
 8001de4:	e00d      	b.n	8001e02 <ADC_init+0xf2>
	case 28://ADC CLK 12MHZ
		RCC->CFGR&=~(0b11<<14);
 8001de6:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <ADC_init+0x294>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a6e      	ldr	r2, [pc, #440]	; (8001fa4 <ADC_init+0x294>)
 8001dec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001df0:	6053      	str	r3, [r2, #4]
		break;
 8001df2:	e006      	b.n	8001e02 <ADC_init+0xf2>
	default:
		//the worst case that 72Mhz so i will divde by 6 to ensure that i'm ok
		RCC->CFGR|=(0b10<<14);
 8001df4:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <ADC_init+0x294>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a6a      	ldr	r2, [pc, #424]	; (8001fa4 <ADC_init+0x294>)
 8001dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfe:	6053      	str	r3, [r2, #4]
		break;
 8001e00:	bf00      	nop
	}
	//It is recommended to perform a calibration after each power-up.
	ADCx->CR2.Bit_Name.CAL=1;
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6893      	ldr	r3, [r2, #8]
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6093      	str	r3, [r2, #8]
	//Right alignment of data
	ADCx->CR2.Bit_Name.ALIGN=0;
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6893      	ldr	r3, [r2, #8]
 8001e10:	f36f 23cb 	bfc	r3, #11, #1
 8001e14:	6093      	str	r3, [r2, #8]
	/*Tconv = Sampling time + 12.5 cycles
			Example:
		With an ADCCLK = 14 MHz and a sampling time of 1.5 cycles:
		Tconv = 1.5 + 12.5 = 14 cycles = 1 μs
		STM32F103xx performance line devices: 1 μs at 56 MHz (1.17 μs at 72 MHz)*/
	switch(config->CHx_num){
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f200 80a8 	bhi.w	8001f70 <ADC_init+0x260>
 8001e20:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <ADC_init+0x118>)
 8001e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e26:	bf00      	nop
 8001e28:	08001e69 	.word	0x08001e69
 8001e2c:	08001e7f 	.word	0x08001e7f
 8001e30:	08001e95 	.word	0x08001e95
 8001e34:	08001eab 	.word	0x08001eab
 8001e38:	08001ec1 	.word	0x08001ec1
 8001e3c:	08001ed7 	.word	0x08001ed7
 8001e40:	08001eed 	.word	0x08001eed
 8001e44:	08001f03 	.word	0x08001f03
 8001e48:	08001f19 	.word	0x08001f19
 8001e4c:	08001f2f 	.word	0x08001f2f
 8001e50:	08001f71 	.word	0x08001f71
 8001e54:	08001f71 	.word	0x08001f71
 8001e58:	08001f71 	.word	0x08001f71
 8001e5c:	08001f71 	.word	0x08001f71
 8001e60:	08001f45 	.word	0x08001f45
 8001e64:	08001f5b 	.word	0x08001f5b
	case 0:
		ADCx->SMPR2.Bit_Name.SMP0=config->SPT;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	789b      	ldrb	r3, [r3, #2]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	b2d9      	uxtb	r1, r3
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6913      	ldr	r3, [r2, #16]
 8001e76:	f361 0302 	bfi	r3, r1, #0, #3
 8001e7a:	6113      	str	r3, [r2, #16]
		break;
 8001e7c:	e07b      	b.n	8001f76 <ADC_init+0x266>
	case 1:
		ADCx->SMPR2.Bit_Name.SMP1=config->SPT;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	789b      	ldrb	r3, [r3, #2]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	b2d9      	uxtb	r1, r3
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6913      	ldr	r3, [r2, #16]
 8001e8c:	f361 03c5 	bfi	r3, r1, #3, #3
 8001e90:	6113      	str	r3, [r2, #16]

		break;
 8001e92:	e070      	b.n	8001f76 <ADC_init+0x266>
	case 2:
		ADCx->SMPR2.Bit_Name.SMP2=config->SPT;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	789b      	ldrb	r3, [r3, #2]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	b2d9      	uxtb	r1, r3
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6913      	ldr	r3, [r2, #16]
 8001ea2:	f361 1388 	bfi	r3, r1, #6, #3
 8001ea6:	6113      	str	r3, [r2, #16]

		break;
 8001ea8:	e065      	b.n	8001f76 <ADC_init+0x266>
	case 3:
		ADCx->SMPR2.Bit_Name.SMP3=config->SPT;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	789b      	ldrb	r3, [r3, #2]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	b2d9      	uxtb	r1, r3
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6913      	ldr	r3, [r2, #16]
 8001eb8:	f361 234b 	bfi	r3, r1, #9, #3
 8001ebc:	6113      	str	r3, [r2, #16]

		break;
 8001ebe:	e05a      	b.n	8001f76 <ADC_init+0x266>
	case 4:
		ADCx->SMPR2.Bit_Name.SMP4=config->SPT;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	789b      	ldrb	r3, [r3, #2]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	b2d9      	uxtb	r1, r3
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6913      	ldr	r3, [r2, #16]
 8001ece:	f361 330e 	bfi	r3, r1, #12, #3
 8001ed2:	6113      	str	r3, [r2, #16]

		break;
 8001ed4:	e04f      	b.n	8001f76 <ADC_init+0x266>
	case 5:
		ADCx->SMPR2.Bit_Name.SMP5=config->SPT;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	789b      	ldrb	r3, [r3, #2]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	b2d9      	uxtb	r1, r3
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6913      	ldr	r3, [r2, #16]
 8001ee4:	f361 33d1 	bfi	r3, r1, #15, #3
 8001ee8:	6113      	str	r3, [r2, #16]

		break;
 8001eea:	e044      	b.n	8001f76 <ADC_init+0x266>
	case 6:
		ADCx->SMPR2.Bit_Name.SMP6=config->SPT;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	789b      	ldrb	r3, [r3, #2]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	b2d9      	uxtb	r1, r3
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6913      	ldr	r3, [r2, #16]
 8001efa:	f361 4394 	bfi	r3, r1, #18, #3
 8001efe:	6113      	str	r3, [r2, #16]

		break;
 8001f00:	e039      	b.n	8001f76 <ADC_init+0x266>
	case 7:
		ADCx->SMPR2.Bit_Name.SMP7=config->SPT;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	789b      	ldrb	r3, [r3, #2]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	b2d9      	uxtb	r1, r3
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	6913      	ldr	r3, [r2, #16]
 8001f10:	f361 5357 	bfi	r3, r1, #21, #3
 8001f14:	6113      	str	r3, [r2, #16]

		break;
 8001f16:	e02e      	b.n	8001f76 <ADC_init+0x266>
	case 8:
		ADCx->SMPR2.Bit_Name.SMP8=config->SPT;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	789b      	ldrb	r3, [r3, #2]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	b2d9      	uxtb	r1, r3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6913      	ldr	r3, [r2, #16]
 8001f26:	f361 631a 	bfi	r3, r1, #24, #3
 8001f2a:	6113      	str	r3, [r2, #16]

		break;
 8001f2c:	e023      	b.n	8001f76 <ADC_init+0x266>
	case 9:
		ADCx->SMPR2.Bit_Name.SMP9=config->SPT;
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	789b      	ldrb	r3, [r3, #2]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	b2d9      	uxtb	r1, r3
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6913      	ldr	r3, [r2, #16]
 8001f3c:	f361 63dd 	bfi	r3, r1, #27, #3
 8001f40:	6113      	str	r3, [r2, #16]

		break;
 8001f42:	e018      	b.n	8001f76 <ADC_init+0x266>
	case 14:
		ADCx->SMPR1.Bit_Name.SMP14=config->SPT;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	789b      	ldrb	r3, [r3, #2]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	b2d9      	uxtb	r1, r3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68d3      	ldr	r3, [r2, #12]
 8001f52:	f361 330e 	bfi	r3, r1, #12, #3
 8001f56:	60d3      	str	r3, [r2, #12]

		break;
 8001f58:	e00d      	b.n	8001f76 <ADC_init+0x266>
	case 15:
		ADCx->SMPR1.Bit_Name.SMP15=config->SPT;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	789b      	ldrb	r3, [r3, #2]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	b2d9      	uxtb	r1, r3
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68d3      	ldr	r3, [r2, #12]
 8001f68:	f361 33d1 	bfi	r3, r1, #15, #3
 8001f6c:	60d3      	str	r3, [r2, #12]
		break;
 8001f6e:	e002      	b.n	8001f76 <ADC_init+0x266>
	default:
		ADC_ERROR_HANDLER();
 8001f70:	f7ff fdd4 	bl	8001b1c <ADC_ERROR_HANDLER>
		break;
 8001f74:	bf00      	nop


	}

	switch(config->mode){
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <ADC_init+0x274>
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d006      	beq.n	8001f90 <ADC_init+0x280>
 8001f82:	e013      	b.n	8001fac <ADC_init+0x29c>
	case ADC_Single_conversion:
		/*In Single conversion mode the ADC does one conversion. This mode is started either by
setting the ADON bit in the ADC_CR2 register (for a regular channel only) or by external
trigger (for a regular or injected channel), while the CONT bit is 0.*/
		ADCx->CR2.Bit_Name.CONT=0;
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6893      	ldr	r3, [r2, #8]
 8001f88:	f36f 0341 	bfc	r3, #1, #1
 8001f8c:	6093      	str	r3, [r2, #8]
		break;
 8001f8e:	e010      	b.n	8001fb2 <ADC_init+0x2a2>
	case ADC_Continuous_conversion:
		/*In continuous conversion mode ADC starts another conversion as soon as it finishes one.
This mode is started either by external trigger or by setting the ADON bit in the ADC_CR2
register, while the CONT bit is 1. */
		ADCx->CR2.Bit_Name.CONT=1;
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6893      	ldr	r3, [r2, #8]
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6093      	str	r3, [r2, #8]
		break;
 8001f9a:	e00a      	b.n	8001fb2 <ADC_init+0x2a2>
 8001f9c:	40012400 	.word	0x40012400
 8001fa0:	20003fd4 	.word	0x20003fd4
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	431bde83 	.word	0x431bde83

	default:
		ADC_ERROR_HANDLER();
 8001fac:	f7ff fdb6 	bl	8001b1c <ADC_ERROR_HANDLER>
		break;
 8001fb0:	bf00      	nop
	}

	if(config->AWDG->AWGD_Enable){
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d022      	beq.n	8002008 <ADC_init+0x2f8>
		ADCx->CR1.Bit_Name.AWDEN=1;
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6853      	ldr	r3, [r2, #4]
 8001fc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fca:	6053      	str	r3, [r2, #4]
		ADCx->CR1.Bit_Name.AWDCH=config->CHx_num;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	b2d9      	uxtb	r1, r3
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6853      	ldr	r3, [r2, #4]
 8001fda:	f361 0304 	bfi	r3, r1, #0, #5
 8001fde:	6053      	str	r3, [r2, #4]
		if(config->IE ==ADC_interrupt){
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	78db      	ldrb	r3, [r3, #3]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <ADC_init+0x2e4>
			ADCx->CR1.Bit_Name.AWDIE=1;
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6853      	ldr	r3, [r2, #4]
 8001fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff0:	6053      	str	r3, [r2, #4]
 8001ff2:	e004      	b.n	8001ffe <ADC_init+0x2ee>
		}else{
			ADCx->CR1.Bit_Name.AWDIE=0;
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6853      	ldr	r3, [r2, #4]
 8001ff8:	f36f 1386 	bfc	r3, #6, #1
 8001ffc:	6053      	str	r3, [r2, #4]
		}
		ADCx->CR1.Bit_Name.AWDSGL=1;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6853      	ldr	r3, [r2, #4]
 8002002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002006:	6053      	str	r3, [r2, #4]

	if(config->IE){
 // this will done when ADC_interrupt_Enable(); calles
	}

	ADCx->CR2.Bit_Name.EXTSEL=0b111; //111: SWSTART
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6893      	ldr	r3, [r2, #8]
 800200c:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 8002010:	6093      	str	r3, [r2, #8]
	ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6893      	ldr	r3, [r2, #8]
 8002016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800201a:	6093      	str	r3, [r2, #8]

	return ADC_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop

08002028 <ADC_read>:

void ADC_read(ADCx_REG *ADCx,uint8_t CH_num,uint16_t *data){
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	460b      	mov	r3, r1
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	72fb      	strb	r3, [r7, #11]
	ADC_CONFIG *ADC_CONFIG_v=NULL;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]

	//GET the back up sitting from the global sitting
	if(ADCx ==ADC1){
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a30      	ldr	r2, [pc, #192]	; (8002100 <ADC_read+0xd8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <ADC_read+0x2c>
		ADC_CONFIG_v=&G_ADC_config[0][CH_num];
 8002042:	7afa      	ldrb	r2, [r7, #11]
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4a2d      	ldr	r2, [pc, #180]	; (8002104 <ADC_read+0xdc>)
 800204e:	4413      	add	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e008      	b.n	8002066 <ADC_read+0x3e>
	}
	else{
		ADC_CONFIG_v=&G_ADC_config[1][CH_num];
 8002054:	7afa      	ldrb	r2, [r7, #11]
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	33c0      	adds	r3, #192	; 0xc0
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <ADC_read+0xdc>)
 8002062:	4413      	add	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
	}




	ADCx->SQR1.ALL_Bits=0;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
	ADCx->SQR2.ALL_Bits=0;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
	ADCx->SQR3.ALL_Bits=0;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	635a      	str	r2, [r3, #52]	; 0x34

	ADCx->SQR3.Bit_Name.SQ1=ADC_CONFIG_v->CHx_num;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	f003 031f 	and.w	r3, r3, #31
 8002080:	b2d9      	uxtb	r1, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002086:	f361 0304 	bfi	r3, r1, #0, #5
 800208a:	6353      	str	r3, [r2, #52]	; 0x34



	if(ADC_CONFIG_v->mode==ADC_Single_conversion){
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	785b      	ldrb	r3, [r3, #1]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10c      	bne.n	80020ae <ADC_read+0x86>
		ADCx->CR2.Bit_Name.SWSTART=1;//1: Starts conversion of regular channels
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	6893      	ldr	r3, [r2, #8]
 8002098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800209c:	6093      	str	r3, [r2, #8]
		//		while(ADCx->SR.Bit_Name.STRT==0);
		while(ADCx->SR.Bit_Name.EOC==0);
 800209e:	bf00      	nop
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f8      	beq.n	80020a0 <ADC_read+0x78>

	}

	if(ADC_CONFIG_v->IE){
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	78db      	ldrb	r3, [r3, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <ADC_read+0xa0>
		*data=ADCx->DR.Bit_Name.Regular_DATA;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	801a      	strh	r2, [r3, #0]
		data++;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3302      	adds	r3, #2
 80020c4:	607b      	str	r3, [r7, #4]
			*data=ADCx->DR.Bit_Name.Regular_DATA;
			data++;
		}
	}

}
 80020c6:	e016      	b.n	80020f6 <ADC_read+0xce>
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
 80020cc:	e00a      	b.n	80020e4 <ADC_read+0xbc>
			*data=ADCx->DR.Bit_Name.Regular_DATA;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	801a      	strh	r2, [r3, #0]
			data++;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3302      	adds	r3, #2
 80020dc:	607b      	str	r3, [r7, #4]
		for(uint8_t i=0;i<=ADCx->SQR1.Bit_Name.L;i++){
 80020de:	7cfb      	ldrb	r3, [r7, #19]
 80020e0:	3301      	adds	r3, #1
 80020e2:	74fb      	strb	r3, [r7, #19]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	f3c3 5303 	ubfx	r3, r3, #20, #4
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d9eb      	bls.n	80020ce <ADC_read+0xa6>
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	40012400 	.word	0x40012400
 8002104:	20003fd4 	.word	0x20003fd4

08002108 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(){
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	if(ADC1->SR.Bit_Name.EOC ==1){
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <ADC1_2_IRQHandler+0x54>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b01      	cmp	r3, #1
 8002118:	d10f      	bne.n	800213a <ADC1_2_IRQHandler+0x32>

		G_ADC_config[0][(ADC1->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <ADC1_2_IRQHandler+0x54>)
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4619      	mov	r1, r3
 8002126:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <ADC1_2_IRQHandler+0x58>)
 8002128:	460b      	mov	r3, r1
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	440b      	add	r3, r1
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3308      	adds	r3, #8
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4798      	blx	r3
	}else{
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
	}
}
 8002138:	e00e      	b.n	8002158 <ADC1_2_IRQHandler+0x50>
		G_ADC_config[1][(ADC2->SQR3.Bit_Name.SQ1)].g_ADC_callback();
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <ADC1_2_IRQHandler+0x5c>)
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002142:	b2db      	uxtb	r3, r3
 8002144:	4619      	mov	r1, r3
 8002146:	4a06      	ldr	r2, [pc, #24]	; (8002160 <ADC1_2_IRQHandler+0x58>)
 8002148:	460b      	mov	r3, r1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	440b      	add	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	33c8      	adds	r3, #200	; 0xc8
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4798      	blx	r3
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40012400 	.word	0x40012400
 8002160:	20003fd4 	.word	0x20003fd4
 8002164:	40012800 	.word	0x40012800

08002168 <ERROR_HANDLER>:
 */


#include "CAN.h"
CAN_config CAN_SITTING={0};
void ERROR_HANDLER(){
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
	while(1);
 800216c:	e7fe      	b.n	800216c <ERROR_HANDLER+0x4>
	...

08002170 <MCAL_CAN_SET_GPIO>:
}
void MCAL_CAN_SET_GPIO(){
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
	PIN_config PINx={PIN_12,OUTPUT_AF_PP,SPEED_10}; //CAN_TX
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <MCAL_CAN_SET_GPIO+0x30>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	4619      	mov	r1, r3
 8002180:	4808      	ldr	r0, [pc, #32]	; (80021a4 <MCAL_CAN_SET_GPIO+0x34>)
 8002182:	f000 fc8d 	bl	8002aa0 <MCAL_GPIO_init>
	PINx=(PIN_config){PIN_11,INPUT_FI,0}; //CAN_RX
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <MCAL_CAN_SET_GPIO+0x38>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	607b      	str	r3, [r7, #4]
	MCAL_GPIO_init(GPIOA, &PINx);
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	4619      	mov	r1, r3
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <MCAL_CAN_SET_GPIO+0x34>)
 8002192:	f000 fc85 	bl	8002aa0 <MCAL_GPIO_init>

}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	08004878 	.word	0x08004878
 80021a4:	40010800 	.word	0x40010800
 80021a8:	0800487c 	.word	0x0800487c

080021ac <MCAL_CAN_init>:
CAN_retrun MCAL_CAN_init(CAN_config *CANx){
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	CAN_SITTING =(*CANx);
 80021b4:	4b84      	ldr	r3, [pc, #528]	; (80023c8 <MCAL_CAN_init+0x21c>)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80021ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//Make the Can State ITIALIZATION
	RCC->APB1ENR|=(1<<25);
 80021be:	4b83      	ldr	r3, [pc, #524]	; (80023cc <MCAL_CAN_init+0x220>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a82      	ldr	r2, [pc, #520]	; (80023cc <MCAL_CAN_init+0x220>)
 80021c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c8:	61d3      	str	r3, [r2, #28]
	MCAL_CAN_SET_GPIO();
 80021ca:	f7ff ffd1 	bl	8002170 <MCAL_CAN_SET_GPIO>
	if((CAN1->MSR.Bit_Name.INAK ==0) &&(CAN1->MSR.Bit_Name.SLAK ==1) ){
 80021ce:	4b80      	ldr	r3, [pc, #512]	; (80023d0 <MCAL_CAN_init+0x224>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d11f      	bne.n	800221c <MCAL_CAN_init+0x70>
 80021dc:	4b7c      	ldr	r3, [pc, #496]	; (80023d0 <MCAL_CAN_init+0x224>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d118      	bne.n	800221c <MCAL_CAN_init+0x70>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 80021ea:	4a79      	ldr	r2, [pc, #484]	; (80023d0 <MCAL_CAN_init+0x224>)
 80021ec:	6813      	ldr	r3, [r2, #0]
 80021ee:	f36f 0341 	bfc	r3, #1, #1
 80021f2:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=1;
 80021f4:	4a76      	ldr	r2, [pc, #472]	; (80023d0 <MCAL_CAN_init+0x224>)
 80021f6:	6813      	ldr	r3, [r2, #0]
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6013      	str	r3, [r2, #0]
		while(!((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0)));
 80021fe:	bf00      	nop
 8002200:	4b73      	ldr	r3, [pc, #460]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d1f8      	bne.n	8002200 <MCAL_CAN_init+0x54>
 800220e:	4b70      	ldr	r3, [pc, #448]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f1      	bne.n	8002200 <MCAL_CAN_init+0x54>
	}
	//Automatic bus-off management
	if(CANx->ABO){
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <MCAL_CAN_init+0x84>
		CAN1->MCR.Bit_Name.ABOM=1;
 8002224:	4a6a      	ldr	r2, [pc, #424]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e004      	b.n	800223a <MCAL_CAN_init+0x8e>
	}else{
		CAN1->MCR.Bit_Name.ABOM=0;
 8002230:	4a67      	ldr	r2, [pc, #412]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	f36f 1386 	bfc	r3, #6, #1
 8002238:	6013      	str	r3, [r2, #0]
	}
	//No automatic retransmission
	if(CANx->NAT){
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	785b      	ldrb	r3, [r3, #1]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <MCAL_CAN_init+0xa2>
		CAN1->MCR.Bit_Name.NART=1;
 8002242:	4a63      	ldr	r2, [pc, #396]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002244:	6813      	ldr	r3, [r2, #0]
 8002246:	f043 0310 	orr.w	r3, r3, #16
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e004      	b.n	8002258 <MCAL_CAN_init+0xac>
	}else{
		CAN1->MCR.Bit_Name.NART=0;
 800224e:	4a60      	ldr	r2, [pc, #384]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002250:	6813      	ldr	r3, [r2, #0]
 8002252:	f36f 1304 	bfc	r3, #4, #1
 8002256:	6013      	str	r3, [r2, #0]
	}

	//Transmit FIFO priority by the identifier of the message
	CAN1->MCR.Bit_Name.TXFP=0;
 8002258:	4a5d      	ldr	r2, [pc, #372]	; (80023d0 <MCAL_CAN_init+0x224>)
 800225a:	6813      	ldr	r3, [r2, #0]
 800225c:	f36f 0382 	bfc	r3, #2, #1
 8002260:	6013      	str	r3, [r2, #0]
	//Receive FIFO locked mode Receive FIFO locked against overrun. Once a receive FIFO
	//is full the next incoming message will be discarded.
	if(CANx->RFL){
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	789b      	ldrb	r3, [r3, #2]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <MCAL_CAN_init+0xca>
		CAN1->MCR.Bit_Name.RFLM=1;
 800226a:	4a59      	ldr	r2, [pc, #356]	; (80023d0 <MCAL_CAN_init+0x224>)
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	e004      	b.n	8002280 <MCAL_CAN_init+0xd4>
	}else{
		CAN1->MCR.Bit_Name.RFLM=0;
 8002276:	4a56      	ldr	r2, [pc, #344]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	f36f 03c3 	bfc	r3, #3, #1
 800227e:	6013      	str	r3, [r2, #0]

	}

	//from http://www.bittiming.can-wiki.info/ we can get the CAN1->BTR
	switch(MCAL_GET_PCLCK1()){
 8002280:	f000 feb0 	bl	8002fe4 <MCAL_GET_PCLCK1>
 8002284:	4603      	mov	r3, r0
 8002286:	4a53      	ldr	r2, [pc, #332]	; (80023d4 <MCAL_CAN_init+0x228>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d003      	beq.n	8002294 <MCAL_CAN_init+0xe8>
 800228c:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <MCAL_CAN_init+0x22c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d023      	beq.n	80022da <MCAL_CAN_init+0x12e>

			}

			break;
			default:
				break;
 8002292:	e045      	b.n	8002320 <MCAL_CAN_init+0x174>
		switch(CANx->SPEED){
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	78db      	ldrb	r3, [r3, #3]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d83e      	bhi.n	800231a <MCAL_CAN_init+0x16e>
 800229c:	a201      	add	r2, pc, #4	; (adr r2, 80022a4 <MCAL_CAN_init+0xf8>)
 800229e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a2:	bf00      	nop
 80022a4:	080022b5 	.word	0x080022b5
 80022a8:	080022bf 	.word	0x080022bf
 80022ac:	080022c9 	.word	0x080022c9
 80022b0:	080022d1 	.word	0x080022d1
			CAN1->BTR.ALL_Bits=0x00050000;
 80022b4:	4b46      	ldr	r3, [pc, #280]	; (80023d0 <MCAL_CAN_init+0x224>)
 80022b6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80022ba:	61da      	str	r2, [r3, #28]
			break;
 80022bc:	e00c      	b.n	80022d8 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0000;
 80022be:	4b44      	ldr	r3, [pc, #272]	; (80023d0 <MCAL_CAN_init+0x224>)
 80022c0:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80022c4:	61da      	str	r2, [r3, #28]
			break;
 80022c6:	e007      	b.n	80022d8 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0001;
 80022c8:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <MCAL_CAN_init+0x224>)
 80022ca:	4a44      	ldr	r2, [pc, #272]	; (80023dc <MCAL_CAN_init+0x230>)
 80022cc:	61da      	str	r2, [r3, #28]
			break;
 80022ce:	e003      	b.n	80022d8 <MCAL_CAN_init+0x12c>
			CAN1->BTR.ALL_Bits=0x001c0004;
 80022d0:	4b3f      	ldr	r3, [pc, #252]	; (80023d0 <MCAL_CAN_init+0x224>)
 80022d2:	4a43      	ldr	r2, [pc, #268]	; (80023e0 <MCAL_CAN_init+0x234>)
 80022d4:	61da      	str	r2, [r3, #28]
			break;
 80022d6:	bf00      	nop
		break;
 80022d8:	e01f      	b.n	800231a <MCAL_CAN_init+0x16e>
			switch(CANx->SPEED){
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	78db      	ldrb	r3, [r3, #3]
 80022de:	2b03      	cmp	r3, #3
 80022e0:	d81d      	bhi.n	800231e <MCAL_CAN_init+0x172>
 80022e2:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <MCAL_CAN_init+0x13c>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	080022f9 	.word	0x080022f9
 80022ec:	08002301 	.word	0x08002301
 80022f0:	08002309 	.word	0x08002309
 80022f4:	08002311 	.word	0x08002311
				CAN1->BTR.ALL_Bits=0x00090001;
 80022f8:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <MCAL_CAN_init+0x224>)
 80022fa:	4a3a      	ldr	r2, [pc, #232]	; (80023e4 <MCAL_CAN_init+0x238>)
 80022fc:	61da      	str	r2, [r3, #28]
				break;
 80022fe:	e00b      	b.n	8002318 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0002;
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002302:	4a39      	ldr	r2, [pc, #228]	; (80023e8 <MCAL_CAN_init+0x23c>)
 8002304:	61da      	str	r2, [r3, #28]
				break;
 8002306:	e007      	b.n	8002318 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c0005;
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <MCAL_CAN_init+0x224>)
 800230a:	4a38      	ldr	r2, [pc, #224]	; (80023ec <MCAL_CAN_init+0x240>)
 800230c:	61da      	str	r2, [r3, #28]
				break;
 800230e:	e003      	b.n	8002318 <MCAL_CAN_init+0x16c>
				CAN1->BTR.ALL_Bits=0x001c000e;
 8002310:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002312:	4a37      	ldr	r2, [pc, #220]	; (80023f0 <MCAL_CAN_init+0x244>)
 8002314:	61da      	str	r2, [r3, #28]
				break;
 8002316:	bf00      	nop
			break;
 8002318:	e001      	b.n	800231e <MCAL_CAN_init+0x172>
		break;
 800231a:	bf00      	nop
 800231c:	e000      	b.n	8002320 <MCAL_CAN_init+0x174>
			break;
 800231e:	bf00      	nop

	}

	switch(CANx->MODE){
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	791b      	ldrb	r3, [r3, #4]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d837      	bhi.n	8002398 <MCAL_CAN_init+0x1ec>
 8002328:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <MCAL_CAN_init+0x184>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002341 	.word	0x08002341
 8002334:	08002357 	.word	0x08002357
 8002338:	0800236d 	.word	0x0800236d
 800233c:	08002383 	.word	0x08002383
	case CAN_NORMAL:
		CAN1->BTR.Bit_Name.SILM=0;
 8002340:	4a23      	ldr	r2, [pc, #140]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002342:	69d3      	ldr	r3, [r2, #28]
 8002344:	f36f 73df 	bfc	r3, #31, #1
 8002348:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 800234a:	4a21      	ldr	r2, [pc, #132]	; (80023d0 <MCAL_CAN_init+0x224>)
 800234c:	69d3      	ldr	r3, [r2, #28]
 800234e:	f36f 739e 	bfc	r3, #30, #1
 8002352:	61d3      	str	r3, [r2, #28]

		break;
 8002354:	e023      	b.n	800239e <MCAL_CAN_init+0x1f2>
	case CAN_Silent:
		CAN1->BTR.Bit_Name.SILM=1;
 8002356:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002358:	69d3      	ldr	r3, [r2, #28]
 800235a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800235e:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=0;
 8002360:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002362:	69d3      	ldr	r3, [r2, #28]
 8002364:	f36f 739e 	bfc	r3, #30, #1
 8002368:	61d3      	str	r3, [r2, #28]
		break;
 800236a:	e018      	b.n	800239e <MCAL_CAN_init+0x1f2>
	case CAN_Loop_back:
		CAN1->BTR.Bit_Name.SILM=0;
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <MCAL_CAN_init+0x224>)
 800236e:	69d3      	ldr	r3, [r2, #28]
 8002370:	f36f 73df 	bfc	r3, #31, #1
 8002374:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 8002376:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002378:	69d3      	ldr	r3, [r2, #28]
 800237a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800237e:	61d3      	str	r3, [r2, #28]
		break;
 8002380:	e00d      	b.n	800239e <MCAL_CAN_init+0x1f2>
	case CAN_Silent_Loop_back:
		CAN1->BTR.Bit_Name.SILM=1;
 8002382:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <MCAL_CAN_init+0x224>)
 8002384:	69d3      	ldr	r3, [r2, #28]
 8002386:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800238a:	61d3      	str	r3, [r2, #28]
		CAN1->BTR.Bit_Name.LBKM=1;
 800238c:	4a10      	ldr	r2, [pc, #64]	; (80023d0 <MCAL_CAN_init+0x224>)
 800238e:	69d3      	ldr	r3, [r2, #28]
 8002390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002394:	61d3      	str	r3, [r2, #28]
		break;
 8002396:	e002      	b.n	800239e <MCAL_CAN_init+0x1f2>
	default:
		ERROR_HANDLER();
 8002398:	f7ff fee6 	bl	8002168 <ERROR_HANDLER>
		break;
 800239c:	bf00      	nop

	}

	if(CANx->IE){
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	795b      	ldrb	r3, [r3, #5]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <MCAL_CAN_init+0x24c>
		CAN1->IER.Bit_Name.FMPIE0=1;
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <MCAL_CAN_init+0x224>)
 80023a8:	6953      	ldr	r3, [r2, #20]
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=1;
 80023b0:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <MCAL_CAN_init+0x224>)
 80023b2:	6953      	ldr	r3, [r2, #20]
 80023b4:	f043 0310 	orr.w	r3, r3, #16
 80023b8:	6153      	str	r3, [r2, #20]
		NVIC_ISER0|=(1<<20) |(1<<21);
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <MCAL_CAN_init+0x248>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <MCAL_CAN_init+0x248>)
 80023c0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e027      	b.n	8002418 <MCAL_CAN_init+0x26c>
 80023c8:	20004154 	.word	0x20004154
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40006400 	.word	0x40006400
 80023d4:	007a1200 	.word	0x007a1200
 80023d8:	016e3600 	.word	0x016e3600
 80023dc:	001c0001 	.word	0x001c0001
 80023e0:	001c0004 	.word	0x001c0004
 80023e4:	00090001 	.word	0x00090001
 80023e8:	001c0002 	.word	0x001c0002
 80023ec:	001c0005 	.word	0x001c0005
 80023f0:	001c000e 	.word	0x001c000e
 80023f4:	e000e100 	.word	0xe000e100
	}else{
		CAN1->IER.Bit_Name.FMPIE0=0;
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <MCAL_CAN_init+0x2d8>)
 80023fa:	6953      	ldr	r3, [r2, #20]
 80023fc:	f36f 0341 	bfc	r3, #1, #1
 8002400:	6153      	str	r3, [r2, #20]
		CAN1->IER.Bit_Name.FMPIE1=0;
 8002402:	4a20      	ldr	r2, [pc, #128]	; (8002484 <MCAL_CAN_init+0x2d8>)
 8002404:	6953      	ldr	r3, [r2, #20]
 8002406:	f36f 1304 	bfc	r3, #4, #1
 800240a:	6153      	str	r3, [r2, #20]
		NVIC_ICER0|=(1<<20) |(1<<21);
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <MCAL_CAN_init+0x2dc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <MCAL_CAN_init+0x2dc>)
 8002412:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002416:	6013      	str	r3, [r2, #0]
	}

	CAN1->IER.Bit_Name.BOFIE=1;
 8002418:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <MCAL_CAN_init+0x2d8>)
 800241a:	6953      	ldr	r3, [r2, #20]
 800241c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002420:	6153      	str	r3, [r2, #20]
	CAN1->IER.Bit_Name.ERRIE=1;
 8002422:	4a18      	ldr	r2, [pc, #96]	; (8002484 <MCAL_CAN_init+0x2d8>)
 8002424:	6953      	ldr	r3, [r2, #20]
 8002426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242a:	6153      	str	r3, [r2, #20]
	NVIC_ISER0|=(1<<22);
 800242c:	4b17      	ldr	r3, [pc, #92]	; (800248c <MCAL_CAN_init+0x2e0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <MCAL_CAN_init+0x2e0>)
 8002432:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002436:	6013      	str	r3, [r2, #0]
	//Make the Can State Normal
	if((CAN1->MSR.Bit_Name.INAK ==1) &&(CAN1->MSR.Bit_Name.SLAK ==0) ){
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MCAL_CAN_init+0x2d8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d118      	bne.n	8002478 <MCAL_CAN_init+0x2cc>
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MCAL_CAN_init+0x2d8>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d111      	bne.n	8002478 <MCAL_CAN_init+0x2cc>
		//this mean the state of can is sleep
		CAN1->MCR.Bit_Name.SLEEP=0;
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <MCAL_CAN_init+0x2d8>)
 8002456:	6813      	ldr	r3, [r2, #0]
 8002458:	f36f 0341 	bfc	r3, #1, #1
 800245c:	6013      	str	r3, [r2, #0]
		CAN1->MCR.Bit_Name.INRQ=0;
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <MCAL_CAN_init+0x2d8>)
 8002460:	6813      	ldr	r3, [r2, #0]
 8002462:	f36f 0300 	bfc	r3, #0, #1
 8002466:	6013      	str	r3, [r2, #0]
		while(CAN1->MSR.Bit_Name.INAK ==1);
 8002468:	bf00      	nop
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <MCAL_CAN_init+0x2d8>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d0f8      	beq.n	800246a <MCAL_CAN_init+0x2be>
	}


	return CAN_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40006400 	.word	0x40006400
 8002488:	e000e180 	.word	0xe000e180
 800248c:	e000e100 	.word	0xe000e100

08002490 <MCAL_CAN_RESET>:

	return CAN_OK;

}

void MCAL_CAN_RESET(){
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
	RCC->APB1RSTR|=(1<<25);
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <MCAL_CAN_RESET+0x24>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <MCAL_CAN_RESET+0x24>)
 800249a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800249e:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR&=~(1<<25);
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <MCAL_CAN_RESET+0x24>)
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	4a03      	ldr	r2, [pc, #12]	; (80024b4 <MCAL_CAN_RESET+0x24>)
 80024a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80024aa:	6113      	str	r3, [r2, #16]

}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	40021000 	.word	0x40021000

080024b8 <USB_LP_CAN_RX0_IRQHandler>:

void USB_LP_CAN_RX0_IRQHandler(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 80024bc:	4b02      	ldr	r3, [pc, #8]	; (80024c8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4798      	blx	r3
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20004154 	.word	0x20004154

080024cc <CAN_RX1_IRQHandler>:
void CAN_RX1_IRQHandler(){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
	CAN_SITTING.g_f_callback();
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <CAN_RX1_IRQHandler+0x10>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4798      	blx	r3
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20004154 	.word	0x20004154

080024e0 <CAN_SCE_IRQHandler>:

void CAN_SCE_IRQHandler(){
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	MCAL_CAN_RESET();
 80024e4:	f7ff ffd4 	bl	8002490 <MCAL_CAN_RESET>
	MCAL_CAN_init(&CAN_SITTING);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <CAN_SCE_IRQHandler+0x14>)
 80024ea:	f7ff fe5f 	bl	80021ac <MCAL_CAN_init>
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20004154 	.word	0x20004154

080024f8 <NVIC_ENABLE>:
 */

#include "EXTI_Driver.h"

void (*g_P_CALLBACK_f[15])();
void NVIC_ENABLE(usint8_t irq){
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d854      	bhi.n	80025b2 <NVIC_ENABLE+0xba>
 8002508:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <NVIC_ENABLE+0x18>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002551 	.word	0x08002551
 8002514:	0800255f 	.word	0x0800255f
 8002518:	0800256d 	.word	0x0800256d
 800251c:	0800257b 	.word	0x0800257b
 8002520:	08002589 	.word	0x08002589
 8002524:	08002597 	.word	0x08002597
 8002528:	08002597 	.word	0x08002597
 800252c:	08002597 	.word	0x08002597
 8002530:	08002597 	.word	0x08002597
 8002534:	08002597 	.word	0x08002597
 8002538:	080025a5 	.word	0x080025a5
 800253c:	080025a5 	.word	0x080025a5
 8002540:	080025a5 	.word	0x080025a5
 8002544:	080025a5 	.word	0x080025a5
 8002548:	080025a5 	.word	0x080025a5
 800254c:	080025a5 	.word	0x080025a5
	case 0:
		NVIC_EXTI0_EN;
 8002550:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <NVIC_ENABLE+0xc4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a19      	ldr	r2, [pc, #100]	; (80025bc <NVIC_ENABLE+0xc4>)
 8002556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255a:	6013      	str	r3, [r2, #0]
		break;
 800255c:	e029      	b.n	80025b2 <NVIC_ENABLE+0xba>
	case 1:
		NVIC_EXTI1_EN;
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <NVIC_ENABLE+0xc4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a16      	ldr	r2, [pc, #88]	; (80025bc <NVIC_ENABLE+0xc4>)
 8002564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002568:	6013      	str	r3, [r2, #0]
		break;
 800256a:	e022      	b.n	80025b2 <NVIC_ENABLE+0xba>
	case 2:
		NVIC_EXTI2_EN;
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <NVIC_ENABLE+0xc4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a12      	ldr	r2, [pc, #72]	; (80025bc <NVIC_ENABLE+0xc4>)
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	6013      	str	r3, [r2, #0]
		break;
 8002578:	e01b      	b.n	80025b2 <NVIC_ENABLE+0xba>
	case 3:
		NVIC_EXTI3_EN;
 800257a:	4b10      	ldr	r3, [pc, #64]	; (80025bc <NVIC_ENABLE+0xc4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a0f      	ldr	r2, [pc, #60]	; (80025bc <NVIC_ENABLE+0xc4>)
 8002580:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002584:	6013      	str	r3, [r2, #0]
		break;
 8002586:	e014      	b.n	80025b2 <NVIC_ENABLE+0xba>
	case 4:
		NVIC_EXTI4_EN;
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <NVIC_ENABLE+0xc4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <NVIC_ENABLE+0xc4>)
 800258e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002592:	6013      	str	r3, [r2, #0]
		break;
 8002594:	e00d      	b.n	80025b2 <NVIC_ENABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_EN;
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <NVIC_ENABLE+0xc4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a08      	ldr	r2, [pc, #32]	; (80025bc <NVIC_ENABLE+0xc4>)
 800259c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025a0:	6013      	str	r3, [r2, #0]
		break;
 80025a2:	e006      	b.n	80025b2 <NVIC_ENABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_EN;
 80025a4:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <NVIC_ENABLE+0xc8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a05      	ldr	r2, [pc, #20]	; (80025c0 <NVIC_ENABLE+0xc8>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ae:	6013      	str	r3, [r2, #0]
break;
 80025b0:	bf00      	nop

	}
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100
 80025c0:	e000e104 	.word	0xe000e104

080025c4 <NVIC_DISABLE>:
void NVIC_DISABLE(usint8_t irq){
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
	switch(irq){
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d854      	bhi.n	800267e <NVIC_DISABLE+0xba>
 80025d4:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <NVIC_DISABLE+0x18>)
 80025d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025da:	bf00      	nop
 80025dc:	0800261d 	.word	0x0800261d
 80025e0:	0800262b 	.word	0x0800262b
 80025e4:	08002639 	.word	0x08002639
 80025e8:	08002647 	.word	0x08002647
 80025ec:	08002655 	.word	0x08002655
 80025f0:	08002663 	.word	0x08002663
 80025f4:	08002663 	.word	0x08002663
 80025f8:	08002663 	.word	0x08002663
 80025fc:	08002663 	.word	0x08002663
 8002600:	08002663 	.word	0x08002663
 8002604:	08002671 	.word	0x08002671
 8002608:	08002671 	.word	0x08002671
 800260c:	08002671 	.word	0x08002671
 8002610:	08002671 	.word	0x08002671
 8002614:	08002671 	.word	0x08002671
 8002618:	08002671 	.word	0x08002671
	case 0:
		NVIC_EXTI0_D;
 800261c:	4b1a      	ldr	r3, [pc, #104]	; (8002688 <NVIC_DISABLE+0xc4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a19      	ldr	r2, [pc, #100]	; (8002688 <NVIC_DISABLE+0xc4>)
 8002622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002626:	6013      	str	r3, [r2, #0]
		break;
 8002628:	e029      	b.n	800267e <NVIC_DISABLE+0xba>
	case 1:
		NVIC_EXTI1_D;
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <NVIC_DISABLE+0xc4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a16      	ldr	r2, [pc, #88]	; (8002688 <NVIC_DISABLE+0xc4>)
 8002630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002634:	6013      	str	r3, [r2, #0]
		break;
 8002636:	e022      	b.n	800267e <NVIC_DISABLE+0xba>
	case 2:
		NVIC_EXTI2_D;
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <NVIC_DISABLE+0xc4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a12      	ldr	r2, [pc, #72]	; (8002688 <NVIC_DISABLE+0xc4>)
 800263e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]
		break;
 8002644:	e01b      	b.n	800267e <NVIC_DISABLE+0xba>
	case 3:
		NVIC_EXTI3_D;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <NVIC_DISABLE+0xc4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <NVIC_DISABLE+0xc4>)
 800264c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002650:	6013      	str	r3, [r2, #0]
		break;
 8002652:	e014      	b.n	800267e <NVIC_DISABLE+0xba>
	case 4:
		NVIC_EXTI4_D;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <NVIC_DISABLE+0xc4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <NVIC_DISABLE+0xc4>)
 800265a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800265e:	6013      	str	r3, [r2, #0]
		break;
 8002660:	e00d      	b.n	800267e <NVIC_DISABLE+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_EXTI9_D;
 8002662:	4b09      	ldr	r3, [pc, #36]	; (8002688 <NVIC_DISABLE+0xc4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <NVIC_DISABLE+0xc4>)
 8002668:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800266c:	6013      	str	r3, [r2, #0]
		break;
 800266e:	e006      	b.n	800267e <NVIC_DISABLE+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_EXTI15_D;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <NVIC_DISABLE+0xc8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a05      	ldr	r2, [pc, #20]	; (800268c <NVIC_DISABLE+0xc8>)
 8002676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800267a:	6013      	str	r3, [r2, #0]
break;
 800267c:	bf00      	nop

	}
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000e104 	.word	0xe000e104

08002690 <MCAL_EXTI_init>:
	void MCAL_EXTI_init(EXTI_config_t *EXTI){
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
		RCC->APB2ENR |=(1<<0);
 8002698:	4b65      	ldr	r3, [pc, #404]	; (8002830 <MCAL_EXTI_init+0x1a0>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4a64      	ldr	r2, [pc, #400]	; (8002830 <MCAL_EXTI_init+0x1a0>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6193      	str	r3, [r2, #24]
		usint8_t AFIO_EXTICR = (EXTI->EXTI_PIN.EXI_LINE /4);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	73fb      	strb	r3, [r7, #15]
		usint8_t EXTI_position = (EXTI->EXTI_PIN.EXI_LINE %4)*4;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	881b      	ldrh	r3, [r3, #0]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	73bb      	strb	r3, [r7, #14]

		// MAKE THE PIN INPUT FLOATING
		PIN_config pin={EXTI->EXTI_PIN.PIN,INPUT_FI};
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	891b      	ldrh	r3, [r3, #8]
 80026c6:	813b      	strh	r3, [r7, #8]
 80026c8:	2301      	movs	r3, #1
 80026ca:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_init(EXTI->EXTI_PIN.GIPO, &pin);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f107 0208 	add.w	r2, r7, #8
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f9e2 	bl	8002aa0 <MCAL_GPIO_init>

		//MAKE THE SIGNAL RISING OR FALLING OR BOTH
		if(EXTI->EXT_TRIGGER ==FALLING){
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7b1b      	ldrb	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10b      	bne.n	80026fc <MCAL_EXTI_init+0x6c>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80026e4:	4b53      	ldr	r3, [pc, #332]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	8812      	ldrh	r2, [r2, #0]
 80026ec:	4611      	mov	r1, r2
 80026ee:	2201      	movs	r2, #1
 80026f0:	408a      	lsls	r2, r1
 80026f2:	4611      	mov	r1, r2
 80026f4:	4a4f      	ldr	r2, [pc, #316]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 80026f6:	430b      	orrs	r3, r1
 80026f8:	60d3      	str	r3, [r2, #12]
 80026fa:	e029      	b.n	8002750 <MCAL_EXTI_init+0xc0>
		}else if(EXTI->EXT_TRIGGER ==RISEING){
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	7b1b      	ldrb	r3, [r3, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d10b      	bne.n	800271c <MCAL_EXTI_init+0x8c>
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8002704:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	8812      	ldrh	r2, [r2, #0]
 800270c:	4611      	mov	r1, r2
 800270e:	2201      	movs	r2, #1
 8002710:	408a      	lsls	r2, r1
 8002712:	4611      	mov	r1, r2
 8002714:	4a47      	ldr	r2, [pc, #284]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 8002716:	430b      	orrs	r3, r1
 8002718:	6093      	str	r3, [r2, #8]
 800271a:	e019      	b.n	8002750 <MCAL_EXTI_init+0xc0>

		}else if(EXTI->EXT_TRIGGER ==FALLING_RISEING){
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	7b1b      	ldrb	r3, [r3, #12]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d115      	bne.n	8002750 <MCAL_EXTI_init+0xc0>
			EXTI_REG->FTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 8002724:	4b43      	ldr	r3, [pc, #268]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	8812      	ldrh	r2, [r2, #0]
 800272c:	4611      	mov	r1, r2
 800272e:	2201      	movs	r2, #1
 8002730:	408a      	lsls	r2, r1
 8002732:	4611      	mov	r1, r2
 8002734:	4a3f      	ldr	r2, [pc, #252]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 8002736:	430b      	orrs	r3, r1
 8002738:	60d3      	str	r3, [r2, #12]
			EXTI_REG->RTSR |=(1<<EXTI->EXTI_PIN.EXI_LINE);
 800273a:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	8812      	ldrh	r2, [r2, #0]
 8002742:	4611      	mov	r1, r2
 8002744:	2201      	movs	r2, #1
 8002746:	408a      	lsls	r2, r1
 8002748:	4611      	mov	r1, r2
 800274a:	4a3a      	ldr	r2, [pc, #232]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 800274c:	430b      	orrs	r3, r1
 800274e:	6093      	str	r3, [r2, #8]


		}
		//UPDATE THE ALTERNATIVE FUNC
			AFIO->EXTICR[AFIO_EXTICR] &=~(0xF <<EXTI_position);
 8002750:	4a39      	ldr	r2, [pc, #228]	; (8002838 <MCAL_EXTI_init+0x1a8>)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	3302      	adds	r3, #2
 8002756:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800275a:	7bbb      	ldrb	r3, [r7, #14]
 800275c:	210f      	movs	r1, #15
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	4618      	mov	r0, r3
 8002766:	4934      	ldr	r1, [pc, #208]	; (8002838 <MCAL_EXTI_init+0x1a8>)
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	4002      	ands	r2, r0
 800276c:	3302      	adds	r3, #2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			AFIO->EXTICR[AFIO_EXTICR] |=(PORT_Detector(EXTI->EXTI_PIN.GIPO)<<EXTI_position);
 8002772:	4a31      	ldr	r2, [pc, #196]	; (8002838 <MCAL_EXTI_init+0x1a8>)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	3302      	adds	r3, #2
 8002778:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	492e      	ldr	r1, [pc, #184]	; (800283c <MCAL_EXTI_init+0x1ac>)
 8002782:	428b      	cmp	r3, r1
 8002784:	d016      	beq.n	80027b4 <MCAL_EXTI_init+0x124>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	492d      	ldr	r1, [pc, #180]	; (8002840 <MCAL_EXTI_init+0x1b0>)
 800278c:	428b      	cmp	r3, r1
 800278e:	d00f      	beq.n	80027b0 <MCAL_EXTI_init+0x120>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	492b      	ldr	r1, [pc, #172]	; (8002844 <MCAL_EXTI_init+0x1b4>)
 8002796:	428b      	cmp	r3, r1
 8002798:	d008      	beq.n	80027ac <MCAL_EXTI_init+0x11c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	492a      	ldr	r1, [pc, #168]	; (8002848 <MCAL_EXTI_init+0x1b8>)
 80027a0:	428b      	cmp	r3, r1
 80027a2:	d101      	bne.n	80027a8 <MCAL_EXTI_init+0x118>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e006      	b.n	80027b6 <MCAL_EXTI_init+0x126>
 80027a8:	2300      	movs	r3, #0
 80027aa:	e004      	b.n	80027b6 <MCAL_EXTI_init+0x126>
 80027ac:	2303      	movs	r3, #3
 80027ae:	e002      	b.n	80027b6 <MCAL_EXTI_init+0x126>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <MCAL_EXTI_init+0x126>
 80027b4:	2300      	movs	r3, #0
 80027b6:	7bb9      	ldrb	r1, [r7, #14]
 80027b8:	408b      	lsls	r3, r1
 80027ba:	4618      	mov	r0, r3
 80027bc:	491e      	ldr	r1, [pc, #120]	; (8002838 <MCAL_EXTI_init+0x1a8>)
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	4302      	orrs	r2, r0
 80027c2:	3302      	adds	r3, #2
 80027c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Update Call Back Func
		g_P_CALLBACK_f[EXTI->EXTI_PIN.EXI_LINE]=EXTI->P_CallBack;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	4a1e      	ldr	r2, [pc, #120]	; (800284c <MCAL_EXTI_init+0x1bc>)
 80027d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//ENABLE THE Interrupt MASK AND NVIC
		if(EXTI->EXT_EN ==ENABLE){
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7b5b      	ldrb	r3, [r3, #13]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d111      	bne.n	8002804 <MCAL_EXTI_init+0x174>
		EXTI_REG->IMR|=(1<<EXTI->EXTI_PIN.EXI_LINE);
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	8812      	ldrh	r2, [r2, #0]
 80027e8:	4611      	mov	r1, r2
 80027ea:	2201      	movs	r2, #1
 80027ec:	408a      	lsls	r2, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	4a10      	ldr	r2, [pc, #64]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 80027f2:	430b      	orrs	r3, r1
 80027f4:	6013      	str	r3, [r2, #0]
		NVIC_ENABLE(EXTI->EXTI_PIN.EXI_LINE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fe7b 	bl	80024f8 <NVIC_ENABLE>
		else{
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
		}

	}
 8002802:	e011      	b.n	8002828 <MCAL_EXTI_init+0x198>
			EXTI_REG->IMR&=~(1<<EXTI->EXTI_PIN.EXI_LINE);
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	8812      	ldrh	r2, [r2, #0]
 800280c:	4611      	mov	r1, r2
 800280e:	2201      	movs	r2, #1
 8002810:	408a      	lsls	r2, r1
 8002812:	43d2      	mvns	r2, r2
 8002814:	4611      	mov	r1, r2
 8002816:	4a07      	ldr	r2, [pc, #28]	; (8002834 <MCAL_EXTI_init+0x1a4>)
 8002818:	400b      	ands	r3, r1
 800281a:	6013      	str	r3, [r2, #0]
			NVIC_DISABLE(EXTI->EXTI_PIN.EXI_LINE	);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fece 	bl	80025c4 <NVIC_DISABLE>
	}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	40010400 	.word	0x40010400
 8002838:	40010000 	.word	0x40010000
 800283c:	40010800 	.word	0x40010800
 8002840:	40010c00 	.word	0x40010c00
 8002844:	40011000 	.word	0x40011000
 8002848:	40011400 	.word	0x40011400
 800284c:	20004160 	.word	0x20004160

08002850 <EXTI0_IRQHandler>:
	void EXTI0_IRQHandler(){
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[0]();
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <EXTI0_IRQHandler+0x1c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4798      	blx	r3
		EXTI_REG->PR|=(1<<0);
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <EXTI0_IRQHandler+0x20>)
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	4a04      	ldr	r2, [pc, #16]	; (8002870 <EXTI0_IRQHandler+0x20>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6153      	str	r3, [r2, #20]
	}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20004160 	.word	0x20004160
 8002870:	40010400 	.word	0x40010400

08002874 <EXTI1_IRQHandler>:
	void EXTI1_IRQHandler(){
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[1]();
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <EXTI1_IRQHandler+0x1c>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4798      	blx	r3
		EXTI_REG->PR|=(1<<1);
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <EXTI1_IRQHandler+0x20>)
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	4a04      	ldr	r2, [pc, #16]	; (8002894 <EXTI1_IRQHandler+0x20>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6153      	str	r3, [r2, #20]

	}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20004160 	.word	0x20004160
 8002894:	40010400 	.word	0x40010400

08002898 <EXTI2_IRQHandler>:
	void EXTI2_IRQHandler(){
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[2]();
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <EXTI2_IRQHandler+0x1c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4798      	blx	r3
		EXTI_REG->PR|=(1<<2);
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <EXTI2_IRQHandler+0x20>)
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <EXTI2_IRQHandler+0x20>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6153      	str	r3, [r2, #20]

	}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20004160 	.word	0x20004160
 80028b8:	40010400 	.word	0x40010400

080028bc <EXTI3_IRQHandler>:
	void EXTI3_IRQHandler(){
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[3]();
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <EXTI3_IRQHandler+0x1c>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4798      	blx	r3
		EXTI_REG->PR|=(1<<3);
 80028c6:	4b05      	ldr	r3, [pc, #20]	; (80028dc <EXTI3_IRQHandler+0x20>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4a04      	ldr	r2, [pc, #16]	; (80028dc <EXTI3_IRQHandler+0x20>)
 80028cc:	f043 0308 	orr.w	r3, r3, #8
 80028d0:	6153      	str	r3, [r2, #20]

	}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20004160 	.word	0x20004160
 80028dc:	40010400 	.word	0x40010400

080028e0 <EXTI4_IRQHandler>:
	void EXTI4_IRQHandler(){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
		g_P_CALLBACK_f[4]();
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <EXTI4_IRQHandler+0x1c>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4798      	blx	r3
		EXTI_REG->PR|=(1<<4);
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <EXTI4_IRQHandler+0x20>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <EXTI4_IRQHandler+0x20>)
 80028f0:	f043 0310 	orr.w	r3, r3, #16
 80028f4:	6153      	str	r3, [r2, #20]

	}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20004160 	.word	0x20004160
 8002900:	40010400 	.word	0x40010400

08002904 <EXTI9_5_IRQHandler>:
	void EXTI9_5_IRQHandler(){
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<5)){EXTI_REG->PR|=(1<<5); 		g_P_CALLBACK_f[5]();}
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <EXTI9_5_IRQHandler+0x22>
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 800291a:	f043 0320 	orr.w	r3, r3, #32
 800291e:	6153      	str	r3, [r2, #20]
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <EXTI9_5_IRQHandler+0xa4>)
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<6)){EXTI_REG->PR|=(1<<6); 		g_P_CALLBACK_f[6]();}
 8002926:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <EXTI9_5_IRQHandler+0x40>
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800293c:	6153      	str	r3, [r2, #20]
 800293e:	4b1a      	ldr	r3, [pc, #104]	; (80029a8 <EXTI9_5_IRQHandler+0xa4>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<7)){EXTI_REG->PR|=(1<<7); 		g_P_CALLBACK_f[7]();}
 8002944:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <EXTI9_5_IRQHandler+0x5e>
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295a:	6153      	str	r3, [r2, #20]
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <EXTI9_5_IRQHandler+0xa4>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<8)){EXTI_REG->PR|=(1<<8); 		g_P_CALLBACK_f[8]();}
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <EXTI9_5_IRQHandler+0x7c>
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6153      	str	r3, [r2, #20]
 800297a:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <EXTI9_5_IRQHandler+0xa4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<9)){EXTI_REG->PR|=(1<<9); 		g_P_CALLBACK_f[9]();}
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <EXTI9_5_IRQHandler+0x9a>
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <EXTI9_5_IRQHandler+0xa0>)
 8002992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002996:	6153      	str	r3, [r2, #20]
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <EXTI9_5_IRQHandler+0xa4>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	4798      	blx	r3
	}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40010400 	.word	0x40010400
 80029a8:	20004160 	.word	0x20004160

080029ac <EXTI15_10_IRQHandler>:
	void EXTI15_10_IRQHandler(){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
		if(EXTI_REG->PR &(1<<10)){EXTI_REG->PR|=(1<<10); 		g_P_CALLBACK_f[10]();}
 80029b0:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <EXTI15_10_IRQHandler+0x22>
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	4a29      	ldr	r2, [pc, #164]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 80029c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c6:	6153      	str	r3, [r2, #20]
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <EXTI15_10_IRQHandler+0xc0>)
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<11)){EXTI_REG->PR|=(1<<11); 		g_P_CALLBACK_f[11]();}
 80029ce:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <EXTI15_10_IRQHandler+0x40>
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	4a22      	ldr	r2, [pc, #136]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 80029e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e4:	6153      	str	r3, [r2, #20]
 80029e6:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <EXTI15_10_IRQHandler+0xc0>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<12)){EXTI_REG->PR|=(1<<12); 		g_P_CALLBACK_f[12]();}
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <EXTI15_10_IRQHandler+0x5e>
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 80029fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a02:	6153      	str	r3, [r2, #20]
 8002a04:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <EXTI15_10_IRQHandler+0xc0>)
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<13)){EXTI_REG->PR|=(1<<13); 		g_P_CALLBACK_f[13]();}
 8002a0a:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <EXTI15_10_IRQHandler+0x7c>
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 8002a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a20:	6153      	str	r3, [r2, #20]
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <EXTI15_10_IRQHandler+0xc0>)
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<14)){EXTI_REG->PR|=(1<<14); 		g_P_CALLBACK_f[14]();}
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <EXTI15_10_IRQHandler+0x9a>
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 8002a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3e:	6153      	str	r3, [r2, #20]
 8002a40:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <EXTI15_10_IRQHandler+0xc0>)
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	4798      	blx	r3
		if(EXTI_REG->PR &(1<<15)){EXTI_REG->PR|=(1<<15); 		g_P_CALLBACK_f[15]();}
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <EXTI15_10_IRQHandler+0xb8>
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <EXTI15_10_IRQHandler+0xbc>)
 8002a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5c:	6153      	str	r3, [r2, #20]
 8002a5e:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <EXTI15_10_IRQHandler+0xc0>)
 8002a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a62:	4798      	blx	r3

	}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40010400 	.word	0x40010400
 8002a6c:	20004160 	.word	0x20004160

08002a70 <Get_PIN_Positon>:
 *      Author: Ahmed
 */


#include "GPIO_Driver.h"
usint16_t Get_PIN_Positon(usint16_t pin){
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
	usint16_t positon = (pin<8) ? (4*pin) :((pin-8)*4)   ;
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b07      	cmp	r3, #7
 8002a7e:	d803      	bhi.n	8002a88 <Get_PIN_Positon+0x18>
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	e004      	b.n	8002a92 <Get_PIN_Positon+0x22>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	3b08      	subs	r3, #8
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	81fb      	strh	r3, [r7, #14]
return positon;
 8002a94:	89fb      	ldrh	r3, [r7, #14]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <MCAL_GPIO_init>:
void MCAL_GPIO_init(GPIOx_REG* GPIOx,PIN_config* PINx){
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	if(GPIOx ==GPIOA) RCC->APB2ENR |=(1<<2);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a6b      	ldr	r2, [pc, #428]	; (8002c5c <MCAL_GPIO_init+0x1bc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d106      	bne.n	8002ac0 <MCAL_GPIO_init+0x20>
 8002ab2:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	4a6a      	ldr	r2, [pc, #424]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6193      	str	r3, [r2, #24]
 8002abe:	e02a      	b.n	8002b16 <MCAL_GPIO_init+0x76>
	else if(GPIOx ==GPIOB)RCC->APB2ENR |=(1<<3);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a68      	ldr	r2, [pc, #416]	; (8002c64 <MCAL_GPIO_init+0x1c4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d106      	bne.n	8002ad6 <MCAL_GPIO_init+0x36>
 8002ac8:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a64      	ldr	r2, [pc, #400]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002ace:	f043 0308 	orr.w	r3, r3, #8
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	e01f      	b.n	8002b16 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOC)RCC->APB2ENR |=(1<<4);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a63      	ldr	r2, [pc, #396]	; (8002c68 <MCAL_GPIO_init+0x1c8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d106      	bne.n	8002aec <MCAL_GPIO_init+0x4c>
 8002ade:	4b60      	ldr	r3, [pc, #384]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	4a5f      	ldr	r2, [pc, #380]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002ae4:	f043 0310 	orr.w	r3, r3, #16
 8002ae8:	6193      	str	r3, [r2, #24]
 8002aea:	e014      	b.n	8002b16 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOD)RCC->APB2ENR |=(1<<5);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a5f      	ldr	r2, [pc, #380]	; (8002c6c <MCAL_GPIO_init+0x1cc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d106      	bne.n	8002b02 <MCAL_GPIO_init+0x62>
 8002af4:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	4a59      	ldr	r2, [pc, #356]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002afa:	f043 0320 	orr.w	r3, r3, #32
 8002afe:	6193      	str	r3, [r2, #24]
 8002b00:	e009      	b.n	8002b16 <MCAL_GPIO_init+0x76>
		else if(GPIOx ==GPIOE)RCC->APB2ENR |=(1<<6);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a5a      	ldr	r2, [pc, #360]	; (8002c70 <MCAL_GPIO_init+0x1d0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d105      	bne.n	8002b16 <MCAL_GPIO_init+0x76>
 8002b0a:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <MCAL_GPIO_init+0x1c0>)
 8002b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b14:	6193      	str	r3, [r2, #24]

	vusint32_t *CONFIG=(PINx->PIN_number < 8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b07      	cmp	r3, #7
 8002b1e:	d801      	bhi.n	8002b24 <MCAL_GPIO_init+0x84>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	e001      	b.n	8002b28 <MCAL_GPIO_init+0x88>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	60fb      	str	r3, [r7, #12]
	*(CONFIG) &=~(0xF <<Get_PIN_Positon(PINx->PIN_number));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff9d 	bl	8002a70 <Get_PIN_Positon>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	230f      	movs	r3, #15
 8002b3c:	4093      	lsls	r3, r2
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	401a      	ands	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	601a      	str	r2, [r3, #0]
	// CNF0[1:0] MODE0[1:0] CLEAR

	if(PINx->MODE == Analog ||PINx->MODE == INPUT_FI ||PINx->MODE == INPUT_PU ||PINx->MODE == INPUT_PD ){
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	789b      	ldrb	r3, [r3, #2]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00e      	beq.n	8002b72 <MCAL_GPIO_init+0xd2>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	789b      	ldrb	r3, [r3, #2]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d009      	beq.n	8002b72 <MCAL_GPIO_init+0xd2>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	789b      	ldrb	r3, [r3, #2]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d004      	beq.n	8002b72 <MCAL_GPIO_init+0xd2>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	789b      	ldrb	r3, [r3, #2]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d156      	bne.n	8002c20 <MCAL_GPIO_init+0x180>
		if(PINx->MODE == INPUT_PD){
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	789b      	ldrb	r3, [r3, #2]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d11c      	bne.n	8002bb6 <MCAL_GPIO_init+0x116>
			*(CONFIG) |=((INPUT_PU << 2 ) << Get_PIN_Positon(PINx->PIN_number) );
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff74 	bl	8002a70 <Get_PIN_Positon>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	fa03 f202 	lsl.w	r2, r3, r2
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	601a      	str	r2, [r3, #0]
			GPIOx->ODR &=~(1<< PINx->PIN_number);;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	4093      	lsls	r3, r2
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	401a      	ands	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8002bb4:	e04d      	b.n	8002c52 <MCAL_GPIO_init+0x1b2>
		}

		else if(PINx->MODE == INPUT_PU){
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	789b      	ldrb	r3, [r3, #2]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d11c      	bne.n	8002bfa <MCAL_GPIO_init+0x15a>
			*(CONFIG) |=((INPUT_PU << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff52 	bl	8002a70 <Get_PIN_Positon>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	fa03 f202 	lsl.w	r2, r3, r2
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	601a      	str	r2, [r3, #0]
			GPIOx->ODR |=(1<< PINx->PIN_number);;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	2301      	movs	r3, #1
 8002bea:	fa03 f202 	lsl.w	r2, r3, r2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]
		if(PINx->MODE == INPUT_PD){
 8002bf8:	e02b      	b.n	8002c52 <MCAL_GPIO_init+0x1b2>

		}else{
			*(CONFIG) |=((PINx->MODE << 2  ) << Get_PIN_Positon(PINx->PIN_number) );
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	789b      	ldrb	r3, [r3, #2]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	009c      	lsls	r4, r3, #2
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff31 	bl	8002a70 <Get_PIN_Positon>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	fa04 f203 	lsl.w	r2, r4, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	601a      	str	r2, [r3, #0]
		if(PINx->MODE == INPUT_PD){
 8002c1e:	e018      	b.n	8002c52 <MCAL_GPIO_init+0x1b2>

		}

	}else{
		*(CONFIG) |=((((PINx->MODE -4 ) <<2) | PINx->SPEED ) << Get_PIN_Positon(PINx->PIN_number) );
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	789b      	ldrb	r3, [r3, #2]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3b04      	subs	r3, #4
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	78d2      	ldrb	r2, [r2, #3]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	ea43 0402 	orr.w	r4, r3, r2
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ff18 	bl	8002a70 <Get_PIN_Positon>
 8002c40:	4603      	mov	r3, r0
 8002c42:	fa04 f203 	lsl.w	r2, r4, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]

	}

}
 8002c50:	bf00      	nop
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd90      	pop	{r4, r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40010800 	.word	0x40010800
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010c00 	.word	0x40010c00
 8002c68:	40011000 	.word	0x40011000
 8002c6c:	40011400 	.word	0x40011400
 8002c70:	40011800 	.word	0x40011800

08002c74 <MCAL_write_PIN>:

	}


}
void MCAL_write_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number,vusint8_t value){
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
	if(value == LOGIC_HIGH){
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d10b      	bne.n	8002ca4 <MCAL_write_PIN+0x30>
		GPIOx->ODR |=(1<<PIN_Number);
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	2301      	movs	r3, #1
 8002c94:	fa03 f202 	lsl.w	r2, r3, r2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]

	}



}
 8002ca2:	e00a      	b.n	8002cba <MCAL_write_PIN+0x46>
		GPIOx->ODR &=~(1<<PIN_Number);
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2301      	movs	r3, #1
 8002cac:	4093      	lsls	r3, r2
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	60da      	str	r2, [r3, #12]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <MCAL_Read_PIN>:
void MCAL_write_PORT(GPIOx_REG* GPIOX,vusint16_t value){
	GPIOX->ODR=value;


}
usint16_t MCAL_Read_PIN(GPIOx_REG* GPIOx,vusint16_t PIN_Number){
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]

	return ((GPIOx->IDR>>PIN_Number) & 1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	887a      	ldrh	r2, [r7, #2]
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	40d3      	lsrs	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	b29b      	uxth	r3, r3

}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <TIM2_IRQHandler>:
	if(TIMx== TIM2)			{RCC->APB1RSTR|=(1<<0);		RCC->APB1RSTR&=~(1<<0);	}
	else if(TIMx== TIM3)	{RCC->APB1RSTR|=(1<<1);		RCC->APB1RSTR&=~(1<<1);	}
	else if(TIMx== TIM4)	{RCC->APB1RSTR|=(1<<2);		RCC->APB1RSTR&=~(1<<2);	}
}

void TIM2_IRQHandler(){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM2->SR.BIT_NAME.UIF){
 8002cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <TIM2_IRQHandler+0x2e>
		ERROR->UIF=1;
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	7813      	ldrb	r3, [r2, #0]
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.UIF=0;
 8002d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d10:	6913      	ldr	r3, [r2, #16]
 8002d12:	f36f 0300 	bfc	r3, #0, #1
 8002d16:	6113      	str	r3, [r2, #16]
 8002d18:	e04e      	b.n	8002db8 <TIM2_IRQHandler+0xcc>
	}

	else if(TIM2->SR.BIT_NAME.CC1IF){
 8002d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <TIM2_IRQHandler+0x56>
		ERROR->CC1IF=1;
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	7813      	ldrb	r3, [r2, #0]
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC1IF=0;
 8002d34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d38:	6913      	ldr	r3, [r2, #16]
 8002d3a:	f36f 0341 	bfc	r3, #1, #1
 8002d3e:	6113      	str	r3, [r2, #16]
 8002d40:	e03a      	b.n	8002db8 <TIM2_IRQHandler+0xcc>


	}
	else if(TIM2->SR.BIT_NAME.CC2IF){
 8002d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <TIM2_IRQHandler+0x7e>
		ERROR->CC2IF=1;
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	7813      	ldrb	r3, [r2, #0]
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC2IF=0;
 8002d5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d60:	6913      	ldr	r3, [r2, #16]
 8002d62:	f36f 0382 	bfc	r3, #2, #1
 8002d66:	6113      	str	r3, [r2, #16]
 8002d68:	e026      	b.n	8002db8 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC3IF){
 8002d6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <TIM2_IRQHandler+0xa6>
		ERROR->CC3IF=1;
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	7813      	ldrb	r3, [r2, #0]
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC3IF=0;
 8002d84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d88:	6913      	ldr	r3, [r2, #16]
 8002d8a:	f36f 03c3 	bfc	r3, #3, #1
 8002d8e:	6113      	str	r3, [r2, #16]
 8002d90:	e012      	b.n	8002db8 <TIM2_IRQHandler+0xcc>

	}
	else if(TIM2->SR.BIT_NAME.CC4IF){
 8002d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <TIM2_IRQHandler+0xcc>
		ERROR->CC4IF=1;
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	7813      	ldrb	r3, [r2, #0]
 8002da6:	f043 0310 	orr.w	r3, r3, #16
 8002daa:	7013      	strb	r3, [r2, #0]
		TIM2->SR.BIT_NAME.CC4IF=0;
 8002dac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002db0:	6913      	ldr	r3, [r2, #16]
 8002db2:	f36f 1304 	bfc	r3, #4, #1
 8002db6:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[0].f_callback(ERROR);
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <TIM2_IRQHandler+0xdc>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3

}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	2000419c 	.word	0x2000419c

08002dcc <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
	GP_TIMx_ERROR_src *ERROR;
	if(TIM3->SR.BIT_NAME.UIF){
 8002dd2:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <TIM3_IRQHandler+0x2a>
		ERROR->UIF=1;
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	7813      	ldrb	r3, [r2, #0]
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.UIF=0;
 8002dea:	4a2a      	ldr	r2, [pc, #168]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002dec:	6913      	ldr	r3, [r2, #16]
 8002dee:	f36f 0300 	bfc	r3, #0, #1
 8002df2:	6113      	str	r3, [r2, #16]
 8002df4:	e046      	b.n	8002e84 <TIM3_IRQHandler+0xb8>
	}

	else if(TIM3->SR.BIT_NAME.CC1IF){
 8002df6:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <TIM3_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	7813      	ldrb	r3, [r2, #0]
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC1IF=0;
 8002e0e:	4a21      	ldr	r2, [pc, #132]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002e10:	6913      	ldr	r3, [r2, #16]
 8002e12:	f36f 0341 	bfc	r3, #1, #1
 8002e16:	6113      	str	r3, [r2, #16]
 8002e18:	e034      	b.n	8002e84 <TIM3_IRQHandler+0xb8>


	}
	else if(TIM3->SR.BIT_NAME.CC2IF){
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <TIM3_IRQHandler+0x72>
		ERROR->CC2IF=1;
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	7813      	ldrb	r3, [r2, #0]
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC2IF=0;
 8002e32:	4a18      	ldr	r2, [pc, #96]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002e34:	6913      	ldr	r3, [r2, #16]
 8002e36:	f36f 0382 	bfc	r3, #2, #1
 8002e3a:	6113      	str	r3, [r2, #16]
 8002e3c:	e022      	b.n	8002e84 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC3IF){
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <TIM3_IRQHandler+0x96>
		ERROR->CC3IF=1;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	7813      	ldrb	r3, [r2, #0]
 8002e50:	f043 0308 	orr.w	r3, r3, #8
 8002e54:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC3IF=0;
 8002e56:	4a0f      	ldr	r2, [pc, #60]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002e58:	6913      	ldr	r3, [r2, #16]
 8002e5a:	f36f 03c3 	bfc	r3, #3, #1
 8002e5e:	6113      	str	r3, [r2, #16]
 8002e60:	e010      	b.n	8002e84 <TIM3_IRQHandler+0xb8>

	}
	else if(TIM3->SR.BIT_NAME.CC4IF){
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <TIM3_IRQHandler+0xb8>
		ERROR->CC4IF=1;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	7813      	ldrb	r3, [r2, #0]
 8002e74:	f043 0310 	orr.w	r3, r3, #16
 8002e78:	7013      	strb	r3, [r2, #0]
		TIM3->SR.BIT_NAME.CC4IF=0;
 8002e7a:	4a06      	ldr	r2, [pc, #24]	; (8002e94 <TIM3_IRQHandler+0xc8>)
 8002e7c:	6913      	ldr	r3, [r2, #16]
 8002e7e:	f36f 1304 	bfc	r3, #4, #1
 8002e82:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[1].f_callback(ERROR);
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <TIM3_IRQHandler+0xcc>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3


}void TIM4_IRQHandler(){
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40000400 	.word	0x40000400
 8002e98:	2000419c 	.word	0x2000419c

08002e9c <TIM4_IRQHandler>:
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
	volatile  GP_TIMx_ERROR_src *ERROR;
	if(TIM4->SR.BIT_NAME.UIF){
 8002ea2:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <TIM4_IRQHandler+0x2a>
		ERROR->UIF=1;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	7813      	ldrb	r3, [r2, #0]
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.UIF=0;
 8002eba:	4a2d      	ldr	r2, [pc, #180]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002ebc:	6913      	ldr	r3, [r2, #16]
 8002ebe:	f36f 0300 	bfc	r3, #0, #1
 8002ec2:	6113      	str	r3, [r2, #16]
 8002ec4:	e04b      	b.n	8002f5e <TIM4_IRQHandler+0xc2>
	}

	else if(TIM4->SR.BIT_NAME.CC1IF){
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <TIM4_IRQHandler+0x4e>
		ERROR->CC1IF=1;
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	7813      	ldrb	r3, [r2, #0]
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC1IF=0;
 8002ede:	4a24      	ldr	r2, [pc, #144]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002ee0:	6913      	ldr	r3, [r2, #16]
 8002ee2:	f36f 0341 	bfc	r3, #1, #1
 8002ee6:	6113      	str	r3, [r2, #16]
 8002ee8:	e039      	b.n	8002f5e <TIM4_IRQHandler+0xc2>


	}
	else if(TIM4->SR.BIT_NAME.CC2IF){
 8002eea:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00f      	beq.n	8002f18 <TIM4_IRQHandler+0x7c>
		ERROR->CC2IF=1;
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	7813      	ldrb	r3, [r2, #0]
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC2IF=0;
 8002f02:	4a1b      	ldr	r2, [pc, #108]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002f04:	6913      	ldr	r3, [r2, #16]
 8002f06:	f36f 0382 	bfc	r3, #2, #1
 8002f0a:	6113      	str	r3, [r2, #16]
		ERROR->UIF=1;
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	7813      	ldrb	r3, [r2, #0]
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	7013      	strb	r3, [r2, #0]
 8002f16:	e022      	b.n	8002f5e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC3IF){
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <TIM4_IRQHandler+0xa0>
		ERROR->CC3IF=1;
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	7813      	ldrb	r3, [r2, #0]
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC3IF=0;
 8002f30:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002f32:	6913      	ldr	r3, [r2, #16]
 8002f34:	f36f 03c3 	bfc	r3, #3, #1
 8002f38:	6113      	str	r3, [r2, #16]
 8002f3a:	e010      	b.n	8002f5e <TIM4_IRQHandler+0xc2>

	}
	else if(TIM4->SR.BIT_NAME.CC4IF){
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <TIM4_IRQHandler+0xc2>
		ERROR->CC4IF=1;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	7813      	ldrb	r3, [r2, #0]
 8002f4e:	f043 0310 	orr.w	r3, r3, #16
 8002f52:	7013      	strb	r3, [r2, #0]
		TIM4->SR.BIT_NAME.CC4IF=0;
 8002f54:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <TIM4_IRQHandler+0xd4>)
 8002f56:	6913      	ldr	r3, [r2, #16]
 8002f58:	f36f 1304 	bfc	r3, #4, #1
 8002f5c:	6113      	str	r3, [r2, #16]

	}
	g_GP_Sitting[2].f_callback(ERROR);
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <TIM4_IRQHandler+0xd8>)
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3


}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40000800 	.word	0x40000800
 8002f74:	2000419c 	.word	0x2000419c

08002f78 <MCAL_GET_SYS_CLCK>:
 */
#include "RCC.h"
uint8_t APB_Prescaler[]={0,0,0,0,1,2,3,4};
uint8_t AHB_Prescaler[]={0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9};

uint32_t MCAL_GET_SYS_CLCK(){
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
	switch((RCC->CFGR >>2) &0b11){
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <MCAL_GET_SYS_CLCK+0x34>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d00a      	beq.n	8002fa0 <MCAL_GET_SYS_CLCK+0x28>
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d80a      	bhi.n	8002fa4 <MCAL_GET_SYS_CLCK+0x2c>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <MCAL_GET_SYS_CLCK+0x20>
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d002      	beq.n	8002f9c <MCAL_GET_SYS_CLCK+0x24>
 8002f96:	e005      	b.n	8002fa4 <MCAL_GET_SYS_CLCK+0x2c>
	case 0:
		return HSI_CLOCK;
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <MCAL_GET_SYS_CLCK+0x38>)
 8002f9a:	e003      	b.n	8002fa4 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 1:
		return HSE_CLOCK;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <MCAL_GET_SYS_CLCK+0x3c>)
 8002f9e:	e001      	b.n	8002fa4 <MCAL_GET_SYS_CLCK+0x2c>
		break;
	case 2:
		return PLL_CLOCK;
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <MCAL_GET_SYS_CLCK+0x40>)
 8002fa2:	e7ff      	b.n	8002fa4 <MCAL_GET_SYS_CLCK+0x2c>

		break;
	}

}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	007a1200 	.word	0x007a1200
 8002fb4:	00f42400 	.word	0x00f42400
 8002fb8:	01ab3f00 	.word	0x01ab3f00

08002fbc <MCAL_GET_H_CLCK>:
uint32_t MCAL_GET_H_CLCK(){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0

	return (MCAL_GET_SYS_CLCK() >> AHB_Prescaler[ (RCC->CFGR >>4) &0xF]) ;
 8002fc0:	f7ff ffda 	bl	8002f78 <MCAL_GET_SYS_CLCK>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <MCAL_GET_H_CLCK+0x20>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <MCAL_GET_H_CLCK+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	20000010 	.word	0x20000010

08002fe4 <MCAL_GET_PCLCK1>:
uint32_t MCAL_GET_PCLCK1(){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>8) &0b111] );
 8002fe8:	f7ff ffe8 	bl	8002fbc <MCAL_GET_H_CLCK>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <MCAL_GET_PCLCK1+0x20>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4903      	ldr	r1, [pc, #12]	; (8003008 <MCAL_GET_PCLCK1+0x24>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3

}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	20000008 	.word	0x20000008

0800300c <MCAL_GET_PCLCK2>:
uint32_t MCAL_GET_PCLCK2(){
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	return (MCAL_GET_H_CLCK() >> APB_Prescaler[ (RCC->CFGR >>11) &0b111] );
 8003010:	f7ff ffd4 	bl	8002fbc <MCAL_GET_H_CLCK>
 8003014:	4602      	mov	r2, r0
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <MCAL_GET_PCLCK2+0x20>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	0adb      	lsrs	r3, r3, #11
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4903      	ldr	r1, [pc, #12]	; (8003030 <MCAL_GET_PCLCK2+0x24>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	fa22 f303 	lsr.w	r3, r2, r3

}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	20000008 	.word	0x20000008

08003034 <MCAL_SPI_init>:
 */

#include "SPI.h"
SPI_Config_t G_P_Config_t[2]={0}; // index 0 for SPI0 index 1 for SPI1

void MCAL_SPI_init(SPI_Reg * SPIx,SPI_Config_t *Config){
 8003034:	b590      	push	{r4, r7, lr}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
	// make a global backup for the configuration of the SPI
	if(SPIx == SPI1){ G_P_Config_t[0]= *Config; 	RCC->APB2ENR |=(1<<12); }
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a57      	ldr	r2, [pc, #348]	; (80031a0 <MCAL_SPI_init+0x16c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10c      	bne.n	8003060 <MCAL_SPI_init+0x2c>
 8003046:	4a57      	ldr	r2, [pc, #348]	; (80031a4 <MCAL_SPI_init+0x170>)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	4614      	mov	r4, r2
 800304c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800304e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003052:	4b55      	ldr	r3, [pc, #340]	; (80031a8 <MCAL_SPI_init+0x174>)
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	4a54      	ldr	r2, [pc, #336]	; (80031a8 <MCAL_SPI_init+0x174>)
 8003058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800305c:	6193      	str	r3, [r2, #24]
 800305e:	e011      	b.n	8003084 <MCAL_SPI_init+0x50>
	else if(SPIx == SPI2){ G_P_Config_t[1]= *Config;RCC->APB1ENR |=(1<<14); }
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a52      	ldr	r2, [pc, #328]	; (80031ac <MCAL_SPI_init+0x178>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d10d      	bne.n	8003084 <MCAL_SPI_init+0x50>
 8003068:	4b4e      	ldr	r3, [pc, #312]	; (80031a4 <MCAL_SPI_init+0x170>)
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	f103 0410 	add.w	r4, r3, #16
 8003070:	4613      	mov	r3, r2
 8003072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003078:	4b4b      	ldr	r3, [pc, #300]	; (80031a8 <MCAL_SPI_init+0x174>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	4a4a      	ldr	r2, [pc, #296]	; (80031a8 <MCAL_SPI_init+0x174>)
 800307e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003082:	61d3      	str	r3, [r2, #28]
	//1. Set the DFF bit to define 8- or 16-bit data frame format
	SPIx->SPI_CR1.Bit_Name.DFF = Config->DATA;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	789b      	ldrb	r3, [r3, #2]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	b2d9      	uxtb	r1, r3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	8813      	ldrh	r3, [r2, #0]
 8003092:	f361 23cb 	bfi	r3, r1, #11, #1
 8003096:	8013      	strh	r3, [r2, #0]
		/*2. Select the CPOL and CPHA bits to define one of the four relationships between the
		data transfer and the serial clock (see Figure 240). For correct data transfer, the CPOL
		and CPHA bits must be configured in the same way in the slave device and the master
		device*/
	SPIx->SPI_CR1.Bit_Name.CPOL = Config->POL;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	799b      	ldrb	r3, [r3, #6]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	b2d9      	uxtb	r1, r3
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	8813      	ldrh	r3, [r2, #0]
 80030a6:	f361 0341 	bfi	r3, r1, #1, #1
 80030aa:	8013      	strh	r3, [r2, #0]
	SPIx->SPI_CR1.Bit_Name.CPHA = Config->PHA;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	79db      	ldrb	r3, [r3, #7]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	b2d9      	uxtb	r1, r3
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	8813      	ldrh	r3, [r2, #0]
 80030ba:	f361 0300 	bfi	r3, r1, #0, #1
 80030be:	8013      	strh	r3, [r2, #0]
		/*3. The frame format (MSB-first or LSB-first depending on the value of the LSBFIRST bit in
		the SPI_CR1 register) must be the same as the master device.*/
	SPIx->SPI_CR1.Bit_Name.LSBFIRST = Config->FRAME;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	78db      	ldrb	r3, [r3, #3]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	b2d9      	uxtb	r1, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	8813      	ldrh	r3, [r2, #0]
 80030ce:	f361 13c7 	bfi	r3, r1, #7, #1
 80030d2:	8013      	strh	r3, [r2, #0]
	/*4. In Hardware mode (refer to Slave select (NSS) pin management), the NSS pin must be
		connected to a low level signal during the complete byte transmit sequence. In NSS
		software mode, set the SSM bit and clear the SSI bit in the SPI_CR1 register.*/
	if(Config->NSS_SELC ==SW) 	SPIx->SPI_CR1.Bit_Name.SSM = 1;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	791b      	ldrb	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d105      	bne.n	80030e8 <MCAL_SPI_init+0xb4>
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	8813      	ldrh	r3, [r2, #0]
 80030e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e4:	8013      	strh	r3, [r2, #0]
 80030e6:	e01c      	b.n	8003122 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_OUT ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =1;}
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	791b      	ldrb	r3, [r3, #4]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d10a      	bne.n	8003106 <MCAL_SPI_init+0xd2>
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	8813      	ldrh	r3, [r2, #0]
 80030f4:	f36f 2349 	bfc	r3, #9, #1
 80030f8:	8013      	strh	r3, [r2, #0]
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	7913      	ldrb	r3, [r2, #4]
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	7113      	strb	r3, [r2, #4]
 8003104:	e00d      	b.n	8003122 <MCAL_SPI_init+0xee>
	else if(Config->NSS_SELC ==HW_IN ){ SPIx->SPI_CR1.Bit_Name.SSM = 0; SPIx->SPI_CR2.Bit_Name.SSOE =0;}
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	791b      	ldrb	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d109      	bne.n	8003122 <MCAL_SPI_init+0xee>
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	8813      	ldrh	r3, [r2, #0]
 8003112:	f36f 2349 	bfc	r3, #9, #1
 8003116:	8013      	strh	r3, [r2, #0]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	7913      	ldrb	r3, [r2, #4]
 800311c:	f36f 0382 	bfc	r3, #2, #1
 8003120:	7113      	strb	r3, [r2, #4]
	//5. Clear the MSTR bit and set the SPE bit (both in the SPI_CR1 register) to assign the pins to alternate functions.
	SPIx->SPI_CR1.Bit_Name.MSTR = Config->M_S;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	b2d9      	uxtb	r1, r3
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	8813      	ldrh	r3, [r2, #0]
 8003130:	f361 0382 	bfi	r3, r1, #2, #1
 8003134:	8013      	strh	r3, [r2, #0]
	//6. Select the BR[2:0] bits to define the serial clock baud rate (see SPI_CR1 register)
	SPIx->SPI_CR1.Bit_Name.BR = Config->BAUD_R;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	795b      	ldrb	r3, [r3, #5]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	b2d9      	uxtb	r1, r3
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	8813      	ldrh	r3, [r2, #0]
 8003144:	f361 03c5 	bfi	r3, r1, #3, #3
 8003148:	8013      	strh	r3, [r2, #0]

	// 7.check if the interrupt is enabled or not
	if(Config->IN_EN ==interrupt_EN){
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	7a1b      	ldrb	r3, [r3, #8]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d114      	bne.n	800317c <MCAL_SPI_init+0x148>

		if(SPIx == SPI1)    	NVIC_ISER1 |=(1<< (SPI1_IRQ-32));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <MCAL_SPI_init+0x16c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d106      	bne.n	8003168 <MCAL_SPI_init+0x134>
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <MCAL_SPI_init+0x17c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <MCAL_SPI_init+0x17c>)
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e009      	b.n	800317c <MCAL_SPI_init+0x148>
		else if(SPIx == SPI2)   NVIC_ISER1 |=(1<< (SPI2_IRQ-32));
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <MCAL_SPI_init+0x178>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d105      	bne.n	800317c <MCAL_SPI_init+0x148>
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <MCAL_SPI_init+0x17c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <MCAL_SPI_init+0x17c>)
 8003176:	f043 0310 	orr.w	r3, r3, #16
 800317a:	6013      	str	r3, [r2, #0]
}
	// set the SPE bit
	 MCAL_SET_GPIO(SPIx);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f853 	bl	8003228 <MCAL_SET_GPIO>
	 SPIx->SPI_CR1.Bit_Name.SPE =Config->SP_EN;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	b2d9      	uxtb	r1, r3
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	8813      	ldrh	r3, [r2, #0]
 8003190:	f361 1386 	bfi	r3, r1, #6, #1
 8003194:	8013      	strh	r3, [r2, #0]




}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bd90      	pop	{r4, r7, pc}
 800319e:	bf00      	nop
 80031a0:	40013000 	.word	0x40013000
 80031a4:	200041cc 	.word	0x200041cc
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40003800 	.word	0x40003800
 80031b0:	e000e104 	.word	0xe000e104

080031b4 <MCAL_SPI_SendData>:
	if(SPIx == SPI1)   {	NVIC_ICER1 |=(1<< (SPI1_IRQ-32));	RCC->APB2RSTR |=(1<<12); }
	else if(SPIx == SPI2) {NVIC_ICER1 |=(1<< (SPI2_IRQ-32));	RCC->APB1RSTR |=(1<<14); }
}


uint8_t MCAL_SPI_SendData(SPI_Reg *SPIx,uint8_t data){
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
	SPI_Config_t *L_P_config_t=NULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60fb      	str	r3, [r7, #12]
	if(SPIx == SPI1) L_P_config_t =&G_P_Config_t[0];
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <MCAL_SPI_SendData+0x64>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d102      	bne.n	80031d2 <MCAL_SPI_SendData+0x1e>
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <MCAL_SPI_SendData+0x68>)
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	e005      	b.n	80031de <MCAL_SPI_SendData+0x2a>
	else if(SPIx == SPI2) L_P_config_t =&G_P_Config_t[1];
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a12      	ldr	r2, [pc, #72]	; (8003220 <MCAL_SPI_SendData+0x6c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <MCAL_SPI_SendData+0x2a>
 80031da:	4b12      	ldr	r3, [pc, #72]	; (8003224 <MCAL_SPI_SendData+0x70>)
 80031dc:	60fb      	str	r3, [r7, #12]
	// check if the configuration is polling or interrupt
	if(L_P_config_t->IN_EN ==interrupt_EN){ // do nothing the cpu will jump to isr
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	7a1b      	ldrb	r3, [r3, #8]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d105      	bne.n	80031f2 <MCAL_SPI_SendData+0x3e>
		SPIx->SPI_CR2.Bit_Name.TXEIE = 1;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	7913      	ldrb	r3, [r2, #4]
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	7113      	strb	r3, [r2, #4]
 80031f0:	e007      	b.n	8003202 <MCAL_SPI_SendData+0x4e>

	}else{
		while(!SPIx->SPI_SR.Bit_Name.TXE);
 80031f2:	bf00      	nop
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f8      	beq.n	80031f4 <MCAL_SPI_SendData+0x40>
	}
	SPIx->DR_reg.ALL_REG=(uint8_t)data;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	60da      	str	r2, [r3, #12]

	return SPIx->DR_reg.ALL_REG;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	b2db      	uxtb	r3, r3

}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40013000 	.word	0x40013000
 800321c:	200041cc 	.word	0x200041cc
 8003220:	40003800 	.word	0x40003800
 8003224:	200041dc 	.word	0x200041dc

08003228 <MCAL_SET_GPIO>:
	(*data)=(SPIx->DR_reg.ALL_REG &0xFF);


}

void MCAL_SET_GPIO(SPI_Reg *SPIx){
 8003228:	b580      	push	{r7, lr}
 800322a:	b096      	sub	sp, #88	; 0x58
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	SPI_Config_t *L_P_config_t=NULL;
 8003230:	2300      	movs	r3, #0
 8003232:	657b      	str	r3, [r7, #84]	; 0x54
	PIN_config SPI_PIN_CONFIG;
	if(SPIx == SPI1) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a6c      	ldr	r2, [pc, #432]	; (80033e8 <MCAL_SET_GPIO+0x1c0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d169      	bne.n	8003310 <MCAL_SET_GPIO+0xe8>
		L_P_config_t =&G_P_Config_t[0];
 800323c:	4b6b      	ldr	r3, [pc, #428]	; (80033ec <MCAL_SET_GPIO+0x1c4>)
 800323e:	657b      	str	r3, [r7, #84]	; 0x54
		RCC->APB2ENR|=(1<<2); // ENABLE CLOCK FOR PROTA
 8003240:	4b6b      	ldr	r3, [pc, #428]	; (80033f0 <MCAL_SET_GPIO+0x1c8>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a6a      	ldr	r2, [pc, #424]	; (80033f0 <MCAL_SET_GPIO+0x1c8>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	6193      	str	r3, [r2, #24]
		//PA4 SPI1_NSS
		if(L_P_config_t ->NSS_SELC ==SW){ SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_PP,SPEED_10};  		SPI1->SPI_CR1.Bit_Name.SSI=1;}//Not used. Can be used as a GPIO
 800324c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324e:	791b      	ldrb	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <MCAL_SET_GPIO+0x3e>
 8003254:	4b67      	ldr	r3, [pc, #412]	; (80033f4 <MCAL_SET_GPIO+0x1cc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	653b      	str	r3, [r7, #80]	; 0x50
 800325a:	4a63      	ldr	r2, [pc, #396]	; (80033e8 <MCAL_SET_GPIO+0x1c0>)
 800325c:	8813      	ldrh	r3, [r2, #0]
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	8013      	strh	r3, [r2, #0]
 8003264:	e00e      	b.n	8003284 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_4,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8003266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003268:	791b      	ldrb	r3, [r3, #4]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d103      	bne.n	8003276 <MCAL_SET_GPIO+0x4e>
 800326e:	4b62      	ldr	r3, [pc, #392]	; (80033f8 <MCAL_SET_GPIO+0x1d0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	653b      	str	r3, [r7, #80]	; 0x50
 8003274:	e006      	b.n	8003284 <MCAL_SET_GPIO+0x5c>
		else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_4,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8003276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003278:	791b      	ldrb	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d102      	bne.n	8003284 <MCAL_SET_GPIO+0x5c>
 800327e:	4b5f      	ldr	r3, [pc, #380]	; (80033fc <MCAL_SET_GPIO+0x1d4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003284:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003288:	4619      	mov	r1, r3
 800328a:	485d      	ldr	r0, [pc, #372]	; (8003400 <MCAL_SET_GPIO+0x1d8>)
 800328c:	f7ff fc08 	bl	8002aa0 <MCAL_GPIO_init>
		//PA5 SPI1_SCK
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_5,OUTPUT_AF_PP,SPEED_10};
 8003290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d103      	bne.n	80032a0 <MCAL_SET_GPIO+0x78>
 8003298:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <MCAL_SET_GPIO+0x1dc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	653b      	str	r3, [r7, #80]	; 0x50
 800329e:	e006      	b.n	80032ae <MCAL_SET_GPIO+0x86>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_5,INPUT_FI,0};
 80032a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a2:	785b      	ldrb	r3, [r3, #1]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d102      	bne.n	80032ae <MCAL_SET_GPIO+0x86>
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <MCAL_SET_GPIO+0x1e0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80032ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032b2:	4619      	mov	r1, r3
 80032b4:	4852      	ldr	r0, [pc, #328]	; (8003400 <MCAL_SET_GPIO+0x1d8>)
 80032b6:	f7ff fbf3 	bl	8002aa0 <MCAL_GPIO_init>
		//PA6 SPI1_MISO
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_6,INPUT_FI,0};
 80032ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d103      	bne.n	80032ca <MCAL_SET_GPIO+0xa2>
 80032c2:	4b52      	ldr	r3, [pc, #328]	; (800340c <MCAL_SET_GPIO+0x1e4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	653b      	str	r3, [r7, #80]	; 0x50
 80032c8:	e006      	b.n	80032d8 <MCAL_SET_GPIO+0xb0>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_6,OUTPUT_AF_PP,SPEED_10};
 80032ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032cc:	785b      	ldrb	r3, [r3, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <MCAL_SET_GPIO+0xb0>
 80032d2:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <MCAL_SET_GPIO+0x1e8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80032d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032dc:	4619      	mov	r1, r3
 80032de:	4848      	ldr	r0, [pc, #288]	; (8003400 <MCAL_SET_GPIO+0x1d8>)
 80032e0:	f7ff fbde 	bl	8002aa0 <MCAL_GPIO_init>
		//PA7 SPI1_MOSI
		if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_7,OUTPUT_AF_PP,SPEED_10};
 80032e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d103      	bne.n	80032f4 <MCAL_SET_GPIO+0xcc>
 80032ec:	4b49      	ldr	r3, [pc, #292]	; (8003414 <MCAL_SET_GPIO+0x1ec>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	653b      	str	r3, [r7, #80]	; 0x50
 80032f2:	e006      	b.n	8003302 <MCAL_SET_GPIO+0xda>
		else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_7,INPUT_FI,0};
 80032f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f6:	785b      	ldrb	r3, [r3, #1]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <MCAL_SET_GPIO+0xda>
 80032fc:	4b46      	ldr	r3, [pc, #280]	; (8003418 <MCAL_SET_GPIO+0x1f0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	653b      	str	r3, [r7, #80]	; 0x50
		MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003302:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003306:	4619      	mov	r1, r3
 8003308:	483d      	ldr	r0, [pc, #244]	; (8003400 <MCAL_SET_GPIO+0x1d8>)
 800330a:	f7ff fbc9 	bl	8002aa0 <MCAL_GPIO_init>
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
	}



}
 800330e:	e067      	b.n	80033e0 <MCAL_SET_GPIO+0x1b8>
	else if(SPIx == SPI2){
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a42      	ldr	r2, [pc, #264]	; (800341c <MCAL_SET_GPIO+0x1f4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d163      	bne.n	80033e0 <MCAL_SET_GPIO+0x1b8>
		L_P_config_t =&G_P_Config_t[1];
 8003318:	4b41      	ldr	r3, [pc, #260]	; (8003420 <MCAL_SET_GPIO+0x1f8>)
 800331a:	657b      	str	r3, [r7, #84]	; 0x54
		RCC->APB2ENR|=(1<<3); // ENABLE CLOCK FOR PROTA
 800331c:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <MCAL_SET_GPIO+0x1c8>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a33      	ldr	r2, [pc, #204]	; (80033f0 <MCAL_SET_GPIO+0x1c8>)
 8003322:	f043 0308 	orr.w	r3, r3, #8
 8003326:	6193      	str	r3, [r2, #24]
		if(L_P_config_t ->NSS_SELC ==SW) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Not used. Can be used as a GPIO
 8003328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332a:	791b      	ldrb	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d103      	bne.n	8003338 <MCAL_SET_GPIO+0x110>
 8003330:	4b3c      	ldr	r3, [pc, #240]	; (8003424 <MCAL_SET_GPIO+0x1fc>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	653b      	str	r3, [r7, #80]	; 0x50
 8003336:	e00e      	b.n	8003356 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_OUT) SPI_PIN_CONFIG=(PIN_config) {PIN_12,OUTPUT_AF_PP,SPEED_10}; //Alternate function push-pull
 8003338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333a:	791b      	ldrb	r3, [r3, #4]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d103      	bne.n	8003348 <MCAL_SET_GPIO+0x120>
 8003340:	4b38      	ldr	r3, [pc, #224]	; (8003424 <MCAL_SET_GPIO+0x1fc>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	653b      	str	r3, [r7, #80]	; 0x50
 8003346:	e006      	b.n	8003356 <MCAL_SET_GPIO+0x12e>
			else if(L_P_config_t ->NSS_SELC ==HW_IN) SPI_PIN_CONFIG=(PIN_config) {PIN_12,INPUT_FI,0}; //Input floating/ Input pull-up / Input pull-down
 8003348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334a:	791b      	ldrb	r3, [r3, #4]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d102      	bne.n	8003356 <MCAL_SET_GPIO+0x12e>
 8003350:	4b35      	ldr	r3, [pc, #212]	; (8003428 <MCAL_SET_GPIO+0x200>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	653b      	str	r3, [r7, #80]	; 0x50
			MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003356:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800335a:	4619      	mov	r1, r3
 800335c:	4828      	ldr	r0, [pc, #160]	; (8003400 <MCAL_SET_GPIO+0x1d8>)
 800335e:	f7ff fb9f 	bl	8002aa0 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_13,OUTPUT_AF_PP,SPEED_10};
 8003362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003364:	785b      	ldrb	r3, [r3, #1]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d103      	bne.n	8003372 <MCAL_SET_GPIO+0x14a>
 800336a:	4b30      	ldr	r3, [pc, #192]	; (800342c <MCAL_SET_GPIO+0x204>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	653b      	str	r3, [r7, #80]	; 0x50
 8003370:	e006      	b.n	8003380 <MCAL_SET_GPIO+0x158>
				else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_13,INPUT_FI,0};
 8003372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <MCAL_SET_GPIO+0x158>
 800337a:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <MCAL_SET_GPIO+0x208>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	653b      	str	r3, [r7, #80]	; 0x50
				MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 8003380:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003384:	4619      	mov	r1, r3
 8003386:	481e      	ldr	r0, [pc, #120]	; (8003400 <MCAL_SET_GPIO+0x1d8>)
 8003388:	f7ff fb8a 	bl	8002aa0 <MCAL_GPIO_init>
				if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_14,INPUT_FI,0};
 800338c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d103      	bne.n	800339c <MCAL_SET_GPIO+0x174>
 8003394:	4b27      	ldr	r3, [pc, #156]	; (8003434 <MCAL_SET_GPIO+0x20c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	653b      	str	r3, [r7, #80]	; 0x50
 800339a:	e006      	b.n	80033aa <MCAL_SET_GPIO+0x182>
					else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_14,OUTPUT_AF_PP,SPEED_10};
 800339c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339e:	785b      	ldrb	r3, [r3, #1]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d102      	bne.n	80033aa <MCAL_SET_GPIO+0x182>
 80033a4:	4b24      	ldr	r3, [pc, #144]	; (8003438 <MCAL_SET_GPIO+0x210>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	653b      	str	r3, [r7, #80]	; 0x50
					MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80033aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033ae:	4619      	mov	r1, r3
 80033b0:	4813      	ldr	r0, [pc, #76]	; (8003400 <MCAL_SET_GPIO+0x1d8>)
 80033b2:	f7ff fb75 	bl	8002aa0 <MCAL_GPIO_init>
					if(L_P_config_t ->M_S ==Master) SPI_PIN_CONFIG=(PIN_config) {PIN_15,OUTPUT_AF_PP,SPEED_10};
 80033b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d103      	bne.n	80033c6 <MCAL_SET_GPIO+0x19e>
 80033be:	4b1f      	ldr	r3, [pc, #124]	; (800343c <MCAL_SET_GPIO+0x214>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	653b      	str	r3, [r7, #80]	; 0x50
 80033c4:	e006      	b.n	80033d4 <MCAL_SET_GPIO+0x1ac>
							else if(L_P_config_t ->M_S ==Slave) SPI_PIN_CONFIG=(PIN_config) {PIN_15,INPUT_FI,0};
 80033c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c8:	785b      	ldrb	r3, [r3, #1]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <MCAL_SET_GPIO+0x1ac>
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <MCAL_SET_GPIO+0x218>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	653b      	str	r3, [r7, #80]	; 0x50
							MCAL_GPIO_init(GPIOA, &SPI_PIN_CONFIG);
 80033d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033d8:	4619      	mov	r1, r3
 80033da:	4809      	ldr	r0, [pc, #36]	; (8003400 <MCAL_SET_GPIO+0x1d8>)
 80033dc:	f7ff fb60 	bl	8002aa0 <MCAL_GPIO_init>
}
 80033e0:	bf00      	nop
 80033e2:	3758      	adds	r7, #88	; 0x58
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40013000 	.word	0x40013000
 80033ec:	200041cc 	.word	0x200041cc
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08004880 	.word	0x08004880
 80033f8:	08004884 	.word	0x08004884
 80033fc:	08004888 	.word	0x08004888
 8003400:	40010800 	.word	0x40010800
 8003404:	0800488c 	.word	0x0800488c
 8003408:	08004890 	.word	0x08004890
 800340c:	08004894 	.word	0x08004894
 8003410:	08004898 	.word	0x08004898
 8003414:	0800489c 	.word	0x0800489c
 8003418:	080048a0 	.word	0x080048a0
 800341c:	40003800 	.word	0x40003800
 8003420:	200041dc 	.word	0x200041dc
 8003424:	080048a4 	.word	0x080048a4
 8003428:	080048a8 	.word	0x080048a8
 800342c:	080048ac 	.word	0x080048ac
 8003430:	080048b0 	.word	0x080048b0
 8003434:	080048b4 	.word	0x080048b4
 8003438:	080048b8 	.word	0x080048b8
 800343c:	080048bc 	.word	0x080048bc
 8003440:	080048c0 	.word	0x080048c0

08003444 <SPI1_IRQHandler>:


void SPI1_IRQHandler(void){
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
	Flag_source flagv2;
	get_flag_source(&flagv2,SPI1);
 800344a:	1d3b      	adds	r3, r7, #4
 800344c:	4905      	ldr	r1, [pc, #20]	; (8003464 <SPI1_IRQHandler+0x20>)
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f80c 	bl	800346c <get_flag_source>
	G_P_Config_t[0].P_CallBack(flagv2);
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <SPI1_IRQHandler+0x24>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	7938      	ldrb	r0, [r7, #4]
 800345a:	4798      	blx	r3
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40013000 	.word	0x40013000
 8003468:	200041cc 	.word	0x200041cc

0800346c <get_flag_source>:
void get_flag_source(Flag_source *flag,SPI_Reg* SPIx){
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]

	if(SPIx->SPI_SR.Bit_Name.RXNE){
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00f      	beq.n	80034a4 <get_flag_source+0x38>
			flag->TXE_FLAG=0;
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	7813      	ldrb	r3, [r2, #0]
 8003488:	f36f 0300 	bfc	r3, #0, #1
 800348c:	7013      	strb	r3, [r2, #0]
			flag->RXNE_FLAG=1;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	7813      	ldrb	r3, [r2, #0]
 8003492:	f043 0302 	orr.w	r3, r3, #2
 8003496:	7013      	strb	r3, [r2, #0]
			SPIx->SPI_CR2.Bit_Name.RXNEIE=0;
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	7913      	ldrb	r3, [r2, #4]
 800349c:	f36f 1386 	bfc	r3, #6, #1
 80034a0:	7113      	strb	r3, [r2, #4]
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
		flag->TXE_FLAG=1;
		flag->RXNE_FLAG=0;
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
	}
}
 80034a2:	e015      	b.n	80034d0 <get_flag_source+0x64>
		}else if(SPIx->SPI_SR.Bit_Name.TXE){
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00e      	beq.n	80034d0 <get_flag_source+0x64>
		flag->TXE_FLAG=1;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	7813      	ldrb	r3, [r2, #0]
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	7013      	strb	r3, [r2, #0]
		flag->RXNE_FLAG=0;
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	7813      	ldrb	r3, [r2, #0]
 80034c0:	f36f 0341 	bfc	r3, #1, #1
 80034c4:	7013      	strb	r3, [r2, #0]
		SPIx->SPI_CR2.Bit_Name.TXEIE=0;
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	7913      	ldrb	r3, [r2, #4]
 80034ca:	f36f 13c7 	bfc	r3, #7, #1
 80034ce:	7113      	strb	r3, [r2, #4]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <MCAL_SET_TIMx_GPIO>:
#include "Timer1_8.h"
TIMERx_type g_Sitting;
TIM1_8_REG* g_TIMX;


void MCAL_SET_TIMx_GPIO(TIM1_8_REG* TIMx){
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	PIN_config pin={PIN_8,OUTPUT_AF_PP,SPEED_10};
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <MCAL_SET_TIMx_GPIO+0x24>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
	MCAL_GPIO_init(GPIOA, &pin);
 80034ea:	f107 030c 	add.w	r3, r7, #12
 80034ee:	4619      	mov	r1, r3
 80034f0:	4804      	ldr	r0, [pc, #16]	; (8003504 <MCAL_SET_TIMx_GPIO+0x28>)
 80034f2:	f7ff fad5 	bl	8002aa0 <MCAL_GPIO_init>
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	080048c4 	.word	0x080048c4
 8003504:	40010800 	.word	0x40010800

08003508 <TIMER_1_8_start>:
void TIMER_1_8_start(TIM1_8_REG* TIMx,TIMERx_type* Sitting){
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
	g_Sitting=(* Sitting);
 8003512:	4a3d      	ldr	r2, [pc, #244]	; (8003608 <TIMER_1_8_start+0x100>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4614      	mov	r4, r2
 8003518:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800351a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	g_TIMX=TIMx;
 800351e:	4a3b      	ldr	r2, [pc, #236]	; (800360c <TIMER_1_8_start+0x104>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6013      	str	r3, [r2, #0]
	if(TIMx== TIM1) RCC->APB2ENR|=(1<<11);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3a      	ldr	r2, [pc, #232]	; (8003610 <TIMER_1_8_start+0x108>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d105      	bne.n	8003538 <TIMER_1_8_start+0x30>
 800352c:	4b39      	ldr	r3, [pc, #228]	; (8003614 <TIMER_1_8_start+0x10c>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	4a38      	ldr	r2, [pc, #224]	; (8003614 <TIMER_1_8_start+0x10c>)
 8003532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003536:	6193      	str	r3, [r2, #24]



	// 2.select the pre vale
	TIMx->PSC=Sitting->TIME_PSC;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	629a      	str	r2, [r3, #40]	; 0x28

	TIMx->CR1.BIT_NAME.ARPE=1;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6813      	ldr	r3, [r2, #0]
 8003546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354a:	6013      	str	r3, [r2, #0]

	TIMx->ARR=Sitting->TIME_ARR;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	885b      	ldrh	r3, [r3, #2]
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	62da      	str	r2, [r3, #44]	; 0x2c

		TIMx->RCR=Sitting->TIME_RCR;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	889b      	ldrh	r3, [r3, #4]
 800355a:	461a      	mov	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
	//1.Select the mode CMS[1:0]
	switch(Sitting->mode){
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	7a5b      	ldrb	r3, [r3, #9]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d01c      	beq.n	80035a2 <TIMER_1_8_start+0x9a>
 8003568:	2b02      	cmp	r3, #2
 800356a:	dc20      	bgt.n	80035ae <TIMER_1_8_start+0xa6>
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <TIMER_1_8_start+0x6e>
 8003570:	2b01      	cmp	r3, #1
 8003572:	d00b      	beq.n	800358c <TIMER_1_8_start+0x84>
 8003574:	e01b      	b.n	80035ae <TIMER_1_8_start+0xa6>
	case TIM1_Up:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6813      	ldr	r3, [r2, #0]
 800357a:	f36f 1346 	bfc	r3, #5, #2
 800357e:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=0; //0: Counter used as upcounter
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6813      	ldr	r3, [r2, #0]
 8003584:	f36f 1304 	bfc	r3, #4, #1
 8003588:	6013      	str	r3, [r2, #0]
		break;
 800358a:	e013      	b.n	80035b4 <TIMER_1_8_start+0xac>
	case TIM1_DOWN:
		TIMx->CR1.BIT_NAME.CMS=0b00; //00: Edge-aligned mode. The counter counts up or down depending on the direction bit (DIR).
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6813      	ldr	r3, [r2, #0]
 8003590:	f36f 1346 	bfc	r3, #5, #2
 8003594:	6013      	str	r3, [r2, #0]
		TIMx->CR1.BIT_NAME.DIR=1; //1: Counter used as downcounter
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6813      	ldr	r3, [r2, #0]
 800359a:	f043 0310 	orr.w	r3, r3, #16
 800359e:	6013      	str	r3, [r2, #0]
		break;
 80035a0:	e008      	b.n	80035b4 <TIMER_1_8_start+0xac>
	case TIM1_Up_Down:
		TIMx->CR1.BIT_NAME.CMS=0b11;
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6813      	ldr	r3, [r2, #0]
 80035a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035aa:	6013      	str	r3, [r2, #0]
		/*11: Center-aligned mode 3. The counter counts up and down alternatively. Output compare
		interrupt flags of channels configured in output (CCxS=00 in TIMx_CCMRx register) are set
		both when the counter is counting up or down*/
		break;
 80035ac:	e002      	b.n	80035b4 <TIMER_1_8_start+0xac>
	default:
		ERROR_HANDLER();
 80035ae:	f7fe fddb 	bl	8002168 <ERROR_HANDLER>
		break;
 80035b2:	bf00      	nop
	}
	MCAL_SET_TIMx_GPIO(TIMx);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ff91 	bl	80034dc <MCAL_SET_TIMx_GPIO>
	TIMx->CR1.BIT_NAME.CEN=1;
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6813      	ldr	r3, [r2, #0]
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6013      	str	r3, [r2, #0]

	if(Sitting->INT_EN_DIS==TIM1_INT_EN){
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	7a1b      	ldrb	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10b      	bne.n	80035e4 <TIMER_1_8_start+0xdc>

		TIMx->DIER.BIT_NAME.UIE=1;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68d3      	ldr	r3, [r2, #12]
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	60d3      	str	r3, [r2, #12]
		NVIC_ISER0|=(1<<25);
 80035d6:	4b10      	ldr	r3, [pc, #64]	; (8003618 <TIMER_1_8_start+0x110>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a0f      	ldr	r2, [pc, #60]	; (8003618 <TIMER_1_8_start+0x110>)
 80035dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035e0:	6013      	str	r3, [r2, #0]
	}else{
 		while(!TIMx->SR.BIT_NAME.UIF);
		TIMx->SR.BIT_NAME.UIF=0;
	}

}
 80035e2:	e00c      	b.n	80035fe <TIMER_1_8_start+0xf6>
 		while(!TIMx->SR.BIT_NAME.UIF);
 80035e4:	bf00      	nop
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f8      	beq.n	80035e6 <TIMER_1_8_start+0xde>
		TIMx->SR.BIT_NAME.UIF=0;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6913      	ldr	r3, [r2, #16]
 80035f8:	f36f 0300 	bfc	r3, #0, #1
 80035fc:	6113      	str	r3, [r2, #16]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bd90      	pop	{r4, r7, pc}
 8003606:	bf00      	nop
 8003608:	200041ec 	.word	0x200041ec
 800360c:	200041fc 	.word	0x200041fc
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40021000 	.word	0x40021000
 8003618:	e000e100 	.word	0xe000e100

0800361c <TIM1_UP_IRQHandler>:

}



void TIM1_UP_IRQHandler(){
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <TIM1_UP_IRQHandler+0x1c>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <TIM1_UP_IRQHandler+0x20>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	6913      	ldr	r3, [r2, #16]
 800362c:	f36f 0300 	bfc	r3, #0, #1
 8003630:	6113      	str	r3, [r2, #16]

}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200041ec 	.word	0x200041ec
 800363c:	200041fc 	.word	0x200041fc

08003640 <TIM1_CC_IRQHandler>:


void TIM1_CC_IRQHandler(){
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <TIM1_CC_IRQHandler+0x1c>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.CC1IF=0;
 800364a:	4b05      	ldr	r3, [pc, #20]	; (8003660 <TIM1_CC_IRQHandler+0x20>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	6913      	ldr	r3, [r2, #16]
 8003650:	f36f 0341 	bfc	r3, #1, #1
 8003654:	6113      	str	r3, [r2, #16]

}
 8003656:	bf00      	nop
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	200041ec 	.word	0x200041ec
 8003660:	200041fc 	.word	0x200041fc

08003664 <TIM1_BRK_IRQHandler>:
void TIM1_BRK_IRQHandler(){
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <TIM1_BRK_IRQHandler+0x1c>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <TIM1_BRK_IRQHandler+0x20>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	6913      	ldr	r3, [r2, #16]
 8003674:	f36f 0300 	bfc	r3, #0, #1
 8003678:	6113      	str	r3, [r2, #16]

}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200041ec 	.word	0x200041ec
 8003684:	200041fc 	.word	0x200041fc

08003688 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	g_Sitting.f_callback();
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <TIM1_TRG_COM_IRQHandler+0x1c>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4798      	blx	r3
	g_TIMX->SR.BIT_NAME.UIF=0;
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <TIM1_TRG_COM_IRQHandler+0x20>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	6913      	ldr	r3, [r2, #16]
 8003698:	f36f 0300 	bfc	r3, #0, #1
 800369c:	6113      	str	r3, [r2, #16]

}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200041ec 	.word	0x200041ec
 80036a8:	200041fc 	.word	0x200041fc

080036ac <_TIM1_delay_us>:

void _TIM1_delay_us(uint16_t delay){
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	80fb      	strh	r3, [r7, #6]
	TIMERx_type l_t_delay={((MCAL_GET_PCLCK2()/1000000)-1),((delay)-1),0,0,TIM1_INT_DIS,TIM1_Up,NULL};
 80036b6:	f7ff fca9 	bl	800300c <MCAL_GET_PCLCK2>
 80036ba:	4603      	mov	r3, r0
 80036bc:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <_TIM1_delay_us+0x50>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0c9b      	lsrs	r3, r3, #18
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	813b      	strh	r3, [r7, #8]
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	817b      	strh	r3, [r7, #10]
 80036d4:	2300      	movs	r3, #0
 80036d6:	81bb      	strh	r3, [r7, #12]
 80036d8:	2300      	movs	r3, #0
 80036da:	81fb      	strh	r3, [r7, #14]
 80036dc:	2301      	movs	r3, #1
 80036de:	743b      	strb	r3, [r7, #16]
 80036e0:	2300      	movs	r3, #0
 80036e2:	747b      	strb	r3, [r7, #17]
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
	TIMER_1_8_start(TIM1,&l_t_delay);
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	4619      	mov	r1, r3
 80036ee:	4804      	ldr	r0, [pc, #16]	; (8003700 <_TIM1_delay_us+0x54>)
 80036f0:	f7ff ff0a 	bl	8003508 <TIMER_1_8_start>

}
 80036f4:	bf00      	nop
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	431bde83 	.word	0x431bde83
 8003700:	40012c00 	.word	0x40012c00

08003704 <_TIM1_delay_ms>:

void _TIM1_delay_ms(uint16_t delay){
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	80fb      	strh	r3, [r7, #6]


		for(uint32_t i=0;i<delay;i++)
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	e006      	b.n	8003722 <_TIM1_delay_ms+0x1e>
			_TIM1_delay_us(1000);
 8003714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003718:	f7ff ffc8 	bl	80036ac <_TIM1_delay_us>
		for(uint32_t i=0;i<delay;i++)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	429a      	cmp	r2, r3
 8003728:	d3f4      	bcc.n	8003714 <_TIM1_delay_ms+0x10>

}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <MCAL_USART_init>:
 *  Created on: Aug 8, 2023
 *      Author: Ahmed
 */
#include "USART_Driver.h"
USART_Config_t G_P_config[3];
void MCAL_USART_init(USART_REG *USARTx,USART_Config_t *PIN){
 8003734:	b5b0      	push	{r4, r5, r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a8d      	ldr	r2, [pc, #564]	; (8003978 <MCAL_USART_init+0x244>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d10c      	bne.n	8003760 <MCAL_USART_init+0x2c>
		G_P_config[0]=*PIN;
 8003746:	4a8d      	ldr	r2, [pc, #564]	; (800397c <MCAL_USART_init+0x248>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4614      	mov	r4, r2
 800374c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800374e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB2ENR |=(1<<14);
 8003752:	4b8b      	ldr	r3, [pc, #556]	; (8003980 <MCAL_USART_init+0x24c>)
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	4a8a      	ldr	r2, [pc, #552]	; (8003980 <MCAL_USART_init+0x24c>)
 8003758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800375c:	6193      	str	r3, [r2, #24]
 800375e:	e024      	b.n	80037aa <MCAL_USART_init+0x76>
	}else if(USARTx==USART2){
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a88      	ldr	r2, [pc, #544]	; (8003984 <MCAL_USART_init+0x250>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10e      	bne.n	8003786 <MCAL_USART_init+0x52>
		G_P_config[1]=*PIN;
 8003768:	4b84      	ldr	r3, [pc, #528]	; (800397c <MCAL_USART_init+0x248>)
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	f103 0410 	add.w	r4, r3, #16
 8003770:	4613      	mov	r3, r2
 8003772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<17);
 8003778:	4b81      	ldr	r3, [pc, #516]	; (8003980 <MCAL_USART_init+0x24c>)
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	4a80      	ldr	r2, [pc, #512]	; (8003980 <MCAL_USART_init+0x24c>)
 800377e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003782:	61d3      	str	r3, [r2, #28]
 8003784:	e011      	b.n	80037aa <MCAL_USART_init+0x76>
}else if(USARTx==USART3){
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a7f      	ldr	r2, [pc, #508]	; (8003988 <MCAL_USART_init+0x254>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10d      	bne.n	80037aa <MCAL_USART_init+0x76>
		G_P_config[2]=*PIN;
 800378e:	4b7b      	ldr	r3, [pc, #492]	; (800397c <MCAL_USART_init+0x248>)
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	f103 0420 	add.w	r4, r3, #32
 8003796:	4613      	mov	r3, r2
 8003798:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800379a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC->APB1ENR |=(1<<18);
 800379e:	4b78      	ldr	r3, [pc, #480]	; (8003980 <MCAL_USART_init+0x24c>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	4a77      	ldr	r2, [pc, #476]	; (8003980 <MCAL_USART_init+0x24c>)
 80037a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a8:	61d3      	str	r3, [r2, #28]


	}
	// 1. Enable the USART by writing the UE bit in USART_CR1 register to 1.
	USARTx->CR1 |=(1<<13);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60da      	str	r2, [r3, #12]
	//2. Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=(PIN->Word<<12);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	7912      	ldrb	r2, [r2, #4]
 80037be:	0312      	lsls	r2, r2, #12
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60da      	str	r2, [r3, #12]
	//3. Program the number of stop bits in USART_CR2
	USARTx->CR2 |=(PIN->STOP<<12);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	79d2      	ldrb	r2, [r2, #7]
 80037ce:	0312      	lsls	r2, r2, #12
 80037d0:	431a      	orrs	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	611a      	str	r2, [r3, #16]
	if(PIN->MODE ==Asynchronous){
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	7a5b      	ldrb	r3, [r3, #9]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10b      	bne.n	80037f6 <MCAL_USART_init+0xc2>
		//	6. Set the TE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<3);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f043 0208 	orr.w	r2, r3, #8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	60da      	str	r2, [r3, #12]
		//	7. Set the RE bit in USART_CR1 to send an idle frame as first transmission
		USARTx->CR1 |=(1<<2);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60da      	str	r2, [r3, #12]
	}else{ // will modified later

	}
	//	8. Set the CTSE&RTSE bit in USART_CR3 to enable CTS&RTS hardware flow control

	switch( PIN->HW ){
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	7a1b      	ldrb	r3, [r3, #8]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d826      	bhi.n	800384c <MCAL_USART_init+0x118>
 80037fe:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <MCAL_USART_init+0xd0>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	08003815 	.word	0x08003815
 8003808:	08003823 	.word	0x08003823
 800380c:	08003831 	.word	0x08003831
 8003810:	0800383f 	.word	0x0800383f
	case Disabled:
		USARTx->CR3 &=~(RTS_EN |CTS_EN);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	615a      	str	r2, [r3, #20]
		break;
 8003820:	e014      	b.n	800384c <MCAL_USART_init+0x118>
	case RTSE:
		USARTx->CR3 |=RTS_EN;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	615a      	str	r2, [r3, #20]
		break;
 800382e:	e00d      	b.n	800384c <MCAL_USART_init+0x118>
	case CTSE:
		USARTx->CR3 |=CTS_EN;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	615a      	str	r2, [r3, #20]
		break;
 800383c:	e006      	b.n	800384c <MCAL_USART_init+0x118>
	case BOTH:
		USARTx->CR3 |=CTS_EN |RTS_EN;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	615a      	str	r2, [r3, #20]
		break;
 800384a:	bf00      	nop

	}
	//	9. Set the PCE &PS bit in USART_CR1 to send an idle frame as first transmission
	USARTx->CR1 |=(PIN->Parity<<9);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	7952      	ldrb	r2, [r2, #5]
 8003854:	0252      	lsls	r2, r2, #9
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]
	if(PIN->MEC ==Interrupt){
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	799b      	ldrb	r3, [r3, #6]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d125      	bne.n	80038b0 <MCAL_USART_init+0x17c>



		//ENABLE NVIC 	ISER1 32-63
		if(USARTx==USART1){
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a44      	ldr	r2, [pc, #272]	; (8003978 <MCAL_USART_init+0x244>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d106      	bne.n	800387a <MCAL_USART_init+0x146>

			NVIC_ISER1 |=(1<<(USART1_IRQ-32));
 800386c:	4b47      	ldr	r3, [pc, #284]	; (800398c <MCAL_USART_init+0x258>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a46      	ldr	r2, [pc, #280]	; (800398c <MCAL_USART_init+0x258>)
 8003872:	f043 0320 	orr.w	r3, r3, #32
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	e014      	b.n	80038a4 <MCAL_USART_init+0x170>
		}
		else if(USARTx==USART2){
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a41      	ldr	r2, [pc, #260]	; (8003984 <MCAL_USART_init+0x250>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d106      	bne.n	8003890 <MCAL_USART_init+0x15c>
			NVIC_ISER1 |=(1<<(USART2_IRQ-32));
 8003882:	4b42      	ldr	r3, [pc, #264]	; (800398c <MCAL_USART_init+0x258>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a41      	ldr	r2, [pc, #260]	; (800398c <MCAL_USART_init+0x258>)
 8003888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e009      	b.n	80038a4 <MCAL_USART_init+0x170>

		}
		else if(USARTx==USART3){
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3d      	ldr	r2, [pc, #244]	; (8003988 <MCAL_USART_init+0x254>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d105      	bne.n	80038a4 <MCAL_USART_init+0x170>
			NVIC_ISER1 |=(1<<(USART3_IRQ-32));
 8003898:	4b3c      	ldr	r3, [pc, #240]	; (800398c <MCAL_USART_init+0x258>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a3b      	ldr	r2, [pc, #236]	; (800398c <MCAL_USART_init+0x258>)
 800389e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a2:	6013      	str	r3, [r2, #0]

		}
		//Bit 7 TXEIE: TXE interrupt enable				//		Bit 5 RXNEIE: RXNE interrupt enable

				USARTx->CR1 |=(1<<5) ;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	60da      	str	r2, [r3, #12]

		}
	if(USARTx==USART1){ // MAKE A BACKUP AND ENABLE THE CLOCK
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a31      	ldr	r2, [pc, #196]	; (8003978 <MCAL_USART_init+0x244>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d12d      	bne.n	8003914 <MCAL_USART_init+0x1e0>
				USARTx->BRR=BRR(MCAL_GET_PCLCK2(),PIN->Baud_Rate);
 80038b8:	f7ff fba8 	bl	800300c <MCAL_GET_PCLCK2>
 80038bc:	4602      	mov	r2, r0
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	011c      	lsls	r4, r3, #4
 80038ca:	f7ff fb9f 	bl	800300c <MCAL_GET_PCLCK2>
 80038ce:	4602      	mov	r2, r0
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009a      	lsls	r2, r3, #2
 80038d8:	441a      	add	r2, r3
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80038e4:	f7ff fb92 	bl	800300c <MCAL_GET_PCLCK2>
 80038e8:	4602      	mov	r2, r0
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f4:	2264      	movs	r2, #100	; 0x64
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	1aeb      	subs	r3, r5, r3
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	4a24      	ldr	r2, [pc, #144]	; (8003990 <MCAL_USART_init+0x25c>)
 8003900:	fba2 2303 	umull	r2, r3, r2, r3
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	ea44 0203 	orr.w	r2, r4, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	e070      	b.n	80039f6 <MCAL_USART_init+0x2c2>
			}else if(USARTx==USART2){
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <MCAL_USART_init+0x250>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d13b      	bne.n	8003994 <MCAL_USART_init+0x260>
				USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 800391c:	f7ff fb62 	bl	8002fe4 <MCAL_GET_PCLCK1>
 8003920:	4602      	mov	r2, r0
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	fbb2 f3f3 	udiv	r3, r2, r3
 800392c:	011c      	lsls	r4, r3, #4
 800392e:	f7ff fb59 	bl	8002fe4 <MCAL_GET_PCLCK1>
 8003932:	4602      	mov	r2, r0
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	009a      	lsls	r2, r3, #2
 800393c:	441a      	add	r2, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	fbb2 f5f3 	udiv	r5, r2, r3
 8003948:	f7ff fb4c 	bl	8002fe4 <MCAL_GET_PCLCK1>
 800394c:	4602      	mov	r2, r0
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	fbb2 f3f3 	udiv	r3, r2, r3
 8003958:	2264      	movs	r2, #100	; 0x64
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	1aeb      	subs	r3, r5, r3
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <MCAL_USART_init+0x25c>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	ea44 0203 	orr.w	r2, r4, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	e03e      	b.n	80039f6 <MCAL_USART_init+0x2c2>
 8003978:	40013800 	.word	0x40013800
 800397c:	20004200 	.word	0x20004200
 8003980:	40021000 	.word	0x40021000
 8003984:	40004400 	.word	0x40004400
 8003988:	40004800 	.word	0x40004800
 800398c:	e000e104 	.word	0xe000e104
 8003990:	51eb851f 	.word	0x51eb851f

		}else if(USARTx==USART3){
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <MCAL_USART_init+0x2d0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d12c      	bne.n	80039f6 <MCAL_USART_init+0x2c2>
			USARTx->BRR=	BRR(MCAL_GET_PCLCK1(),PIN->Baud_Rate);
 800399c:	f7ff fb22 	bl	8002fe4 <MCAL_GET_PCLCK1>
 80039a0:	4602      	mov	r2, r0
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	011c      	lsls	r4, r3, #4
 80039ae:	f7ff fb19 	bl	8002fe4 <MCAL_GET_PCLCK1>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	441a      	add	r2, r3
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fbb2 f5f3 	udiv	r5, r2, r3
 80039c8:	f7ff fb0c 	bl	8002fe4 <MCAL_GET_PCLCK1>
 80039cc:	4602      	mov	r2, r0
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	2264      	movs	r2, #100	; 0x64
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	1aeb      	subs	r3, r5, r3
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	4a09      	ldr	r2, [pc, #36]	; (8003a08 <MCAL_USART_init+0x2d4>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	ea44 0203 	orr.w	r2, r4, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	609a      	str	r2, [r3, #8]
		}
	SET_GPIO(USARTx);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f892 	bl	8003b20 <SET_GPIO>
	}
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bdb0      	pop	{r4, r5, r7, pc}
 8003a04:	40004800 	.word	0x40004800
 8003a08:	51eb851f 	.word	0x51eb851f

08003a0c <MCAL_USART_SendData>:
		RCC	->APB1RSTR |=(1<<18);
		NVIC_ICER1 |=(1<<(USART3_IRQ-32));
	}
	}

void MCAL_USART_SendData(USART_REG *USARTx,uint8_t data){
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
	USART_Config_t * L_P_config_pin=NULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
//	USARTx->DR=0;
	if(USARTx==USART1){
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <MCAL_USART_SendData+0x68>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d102      	bne.n	8003a2a <MCAL_USART_SendData+0x1e>
		L_P_config_pin=&G_P_config[0];
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <MCAL_USART_SendData+0x6c>)
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	e00c      	b.n	8003a44 <MCAL_USART_SendData+0x38>
	}		else if(USARTx==USART2){
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <MCAL_USART_SendData+0x70>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d102      	bne.n	8003a38 <MCAL_USART_SendData+0x2c>
		L_P_config_pin=&G_P_config[1];
 8003a32:	4b13      	ldr	r3, [pc, #76]	; (8003a80 <MCAL_USART_SendData+0x74>)
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e005      	b.n	8003a44 <MCAL_USART_SendData+0x38>
	}
	else if(USARTx==USART3){
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <MCAL_USART_SendData+0x78>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <MCAL_USART_SendData+0x38>
		L_P_config_pin=&G_P_config[2];
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <MCAL_USART_SendData+0x7c>)
 8003a42:	60fb      	str	r3, [r7, #12]
	}
	while(!(USARTx->SR & (1<<7)));
 8003a44:	bf00      	nop
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f9      	beq.n	8003a46 <MCAL_USART_SendData+0x3a>



	// check if the word size if 9B or 8B
	if(L_P_config_pin->Word ==NINE_BITS)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	791b      	ldrb	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d103      	bne.n	8003a62 <MCAL_USART_SendData+0x56>
	{
		USARTx->DR =((uint8_t)data & (uint8_t)0x1FF);
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	605a      	str	r2, [r3, #4]
	}else{
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);

	}

}
 8003a60:	e002      	b.n	8003a68 <MCAL_USART_SendData+0x5c>
		USARTx->DR =((uint8_t)data & (uint8_t)0xFF);
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	605a      	str	r2, [r3, #4]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40013800 	.word	0x40013800
 8003a78:	20004200 	.word	0x20004200
 8003a7c:	40004400 	.word	0x40004400
 8003a80:	20004210 	.word	0x20004210
 8003a84:	40004800 	.word	0x40004800
 8003a88:	20004220 	.word	0x20004220

08003a8c <MCAL_USART_ReciveData>:
uint16_t MCAL_USART_ReciveData(USART_REG *USARTx){
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
	USART_Config_t * L_P_config_pin=NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
	if(USARTx==USART1){
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a1b      	ldr	r2, [pc, #108]	; (8003b08 <MCAL_USART_ReciveData+0x7c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d102      	bne.n	8003aa6 <MCAL_USART_ReciveData+0x1a>
		L_P_config_pin=&G_P_config[0];
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <MCAL_USART_ReciveData+0x80>)
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e00c      	b.n	8003ac0 <MCAL_USART_ReciveData+0x34>
	}		else if(USARTx==USART2){
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <MCAL_USART_ReciveData+0x84>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d102      	bne.n	8003ab4 <MCAL_USART_ReciveData+0x28>
		L_P_config_pin=&G_P_config[1];
 8003aae:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <MCAL_USART_ReciveData+0x88>)
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	e005      	b.n	8003ac0 <MCAL_USART_ReciveData+0x34>
	}
	else if(USARTx==USART3){
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <MCAL_USART_ReciveData+0x8c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d101      	bne.n	8003ac0 <MCAL_USART_ReciveData+0x34>
		L_P_config_pin=&G_P_config[2];
 8003abc:	4b17      	ldr	r3, [pc, #92]	; (8003b1c <MCAL_USART_ReciveData+0x90>)
 8003abe:	60fb      	str	r3, [r7, #12]
	}

		if(L_P_config_pin->MEC ==POLLING){
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	799b      	ldrb	r3, [r3, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <MCAL_USART_ReciveData+0x4c>
			while(!(USARTx->SR & (1<<5)));
 8003ac8:	bf00      	nop
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f9      	beq.n	8003aca <MCAL_USART_ReciveData+0x3e>
 8003ad6:	e002      	b.n	8003ade <MCAL_USART_ReciveData+0x52>
		}else if(L_P_config_pin->MEC ==Interrupt){ // Do nothing the cpu will jump to isr
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	799b      	ldrb	r3, [r3, #6]
 8003adc:	2b01      	cmp	r3, #1

		}else if(L_P_config_pin->MEC ==DMA){ // will modified later

		}
		if(L_P_config_pin->Parity ==Parity_DISABLE){
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	795b      	ldrb	r3, [r3, #5]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d104      	bne.n	8003af0 <MCAL_USART_ReciveData+0x64>
			return ((uint8_t)USARTx->DR& (uint8_t)0xFF);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	e006      	b.n	8003afe <MCAL_USART_ReciveData+0x72>
		}else{
			return ((uint8_t)USARTx->DR &(uint8_t)0x7F);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afc:	b29b      	uxth	r3, r3

		}

}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	20004200 	.word	0x20004200
 8003b10:	40004400 	.word	0x40004400
 8003b14:	20004210 	.word	0x20004210
 8003b18:	40004800 	.word	0x40004800
 8003b1c:	20004220 	.word	0x20004220

08003b20 <SET_GPIO>:

void SET_GPIO(USART_REG *USARTx){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	PIN_config GPIO={PIN_9,OUTPUT_AF_PP,SPEED_2}; // CONFIGRATION OF TX PIN
 8003b28:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <SET_GPIO+0xbc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	61fb      	str	r3, [r7, #28]
	if(USARTx==USART1){
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2b      	ldr	r2, [pc, #172]	; (8003be0 <SET_GPIO+0xc0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d115      	bne.n	8003b62 <SET_GPIO+0x42>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8003b36:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <SET_GPIO+0xc4>)
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	4a2a      	ldr	r2, [pc, #168]	; (8003be4 <SET_GPIO+0xc4>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	6193      	str	r3, [r2, #24]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8003b42:	f107 031c 	add.w	r3, r7, #28
 8003b46:	4619      	mov	r1, r3
 8003b48:	4827      	ldr	r0, [pc, #156]	; (8003be8 <SET_GPIO+0xc8>)
 8003b4a:	f7fe ffa9 	bl	8002aa0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_10,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <SET_GPIO+0xcc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8003b54:	f107 031c 	add.w	r3, r7, #28
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4823      	ldr	r0, [pc, #140]	; (8003be8 <SET_GPIO+0xc8>)
 8003b5c:	f7fe ffa0 	bl	8002aa0 <MCAL_GPIO_init>
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
		MCAL_GPIO_init(GPIOB, &GPIO);
		}
}
 8003b60:	e038      	b.n	8003bd4 <SET_GPIO+0xb4>
	else if(USARTx==USART2){
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <SET_GPIO+0xd0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d118      	bne.n	8003b9c <SET_GPIO+0x7c>
		RCC->APB2ENR |=(1<<2); // Enable Colck to write on GPIOA
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	; (8003be4 <SET_GPIO+0xc4>)
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	; (8003be4 <SET_GPIO+0xc4>)
 8003b70:	f043 0304 	orr.w	r3, r3, #4
 8003b74:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_2,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8003b76:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <SET_GPIO+0xd4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8003b7c:	f107 031c 	add.w	r3, r7, #28
 8003b80:	4619      	mov	r1, r3
 8003b82:	4819      	ldr	r0, [pc, #100]	; (8003be8 <SET_GPIO+0xc8>)
 8003b84:	f7fe ff8c 	bl	8002aa0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_3,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <SET_GPIO+0xd8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOA, &GPIO);
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	4619      	mov	r1, r3
 8003b94:	4814      	ldr	r0, [pc, #80]	; (8003be8 <SET_GPIO+0xc8>)
 8003b96:	f7fe ff83 	bl	8002aa0 <MCAL_GPIO_init>
}
 8003b9a:	e01b      	b.n	8003bd4 <SET_GPIO+0xb4>
	else if(USARTx==USART3){
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a17      	ldr	r2, [pc, #92]	; (8003bfc <SET_GPIO+0xdc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d117      	bne.n	8003bd4 <SET_GPIO+0xb4>
		RCC->APB2ENR |=(1<<3); // Enable Colck to write on GPIOA
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <SET_GPIO+0xc4>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	4a0e      	ldr	r2, [pc, #56]	; (8003be4 <SET_GPIO+0xc4>)
 8003baa:	f043 0308 	orr.w	r3, r3, #8
 8003bae:	6193      	str	r3, [r2, #24]
		GPIO=(PIN_config){PIN_10,OUTPUT_AF_PP,SPEED_2};// CONFIGRATION OF TX PIN
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <SET_GPIO+0xe0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8003bb6:	f107 031c 	add.w	r3, r7, #28
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4811      	ldr	r0, [pc, #68]	; (8003c04 <SET_GPIO+0xe4>)
 8003bbe:	f7fe ff6f 	bl	8002aa0 <MCAL_GPIO_init>
		GPIO =(PIN_config) {PIN_11,INPUT_FI,0}; //CONFIGRATION OF RX PIN
 8003bc2:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <SET_GPIO+0xe8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	61fb      	str	r3, [r7, #28]
		MCAL_GPIO_init(GPIOB, &GPIO);
 8003bc8:	f107 031c 	add.w	r3, r7, #28
 8003bcc:	4619      	mov	r1, r3
 8003bce:	480d      	ldr	r0, [pc, #52]	; (8003c04 <SET_GPIO+0xe4>)
 8003bd0:	f7fe ff66 	bl	8002aa0 <MCAL_GPIO_init>
}
 8003bd4:	bf00      	nop
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	080048c8 	.word	0x080048c8
 8003be0:	40013800 	.word	0x40013800
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40010800 	.word	0x40010800
 8003bec:	080048cc 	.word	0x080048cc
 8003bf0:	40004400 	.word	0x40004400
 8003bf4:	080048d0 	.word	0x080048d0
 8003bf8:	080048d4 	.word	0x080048d4
 8003bfc:	40004800 	.word	0x40004800
 8003c00:	080048d8 	.word	0x080048d8
 8003c04:	40010c00 	.word	0x40010c00
 8003c08:	080048dc 	.word	0x080048dc

08003c0c <USART1_IRQHandler>:
void USART1_IRQHandler(void){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
	G_P_config[0].P_Call_Back();
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <USART1_IRQHandler+0x10>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4798      	blx	r3
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20004200 	.word	0x20004200

08003c20 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	G_P_config[1].P_Call_Back();
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <USART2_IRQHandler+0x10>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	4798      	blx	r3
}void USART3_IRQHandler(void){
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20004200 	.word	0x20004200

08003c34 <USART3_IRQHandler>:
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
	G_P_config[2].P_Call_Back();
 8003c38:	4b02      	ldr	r3, [pc, #8]	; (8003c44 <USART3_IRQHandler+0x10>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	4798      	blx	r3
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20004200 	.word	0x20004200

08003c48 <Error_Handller>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void Error_Handller(){
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
	while(1);
 8003c4c:	e7fe      	b.n	8003c4c <Error_Handller+0x4>
	...

08003c50 <Sys_Clk_init>:
}


void Sys_Clk_init(){
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
	// system speed 36Mhz
	RCC->CFGR |=(0b0101 <<18); //1111: PLL input clock x 16
 8003c54:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <Sys_Clk_init+0x30>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <Sys_Clk_init+0x30>)
 8003c5a:	f443 13a0 	orr.w	r3, r3, #1310720	; 0x140000
 8003c5e:	6053      	str	r3, [r2, #4]
//	RCC->CFGR |=(0b100<<8); //100: HCLK divided by 2
//	RCC->CFGR |=(1 <<16); //PLL entry clock source
//	RCC->CR|=(1<<16); //HSE clock enable

	RCC->CR|=(1<<24); //PLL ON
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <Sys_Clk_init+0x30>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a06      	ldr	r2, [pc, #24]	; (8003c80 <Sys_Clk_init+0x30>)
 8003c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]
	RCC->CFGR |=(0b10 <<0); //10: PLL selected as system clock
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <Sys_Clk_init+0x30>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a03      	ldr	r2, [pc, #12]	; (8003c80 <Sys_Clk_init+0x30>)
 8003c72:	f043 0302 	orr.w	r3, r3, #2
 8003c76:	6053      	str	r3, [r2, #4]


}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40021000 	.word	0x40021000

08003c84 <DMS_Handller_TASK>:
/************DMS TASK*************/
/************DMS TASK*************/
/************DMS TASK*************/


void DMS_Handller_TASK(){
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0


  while(1){

    if(DMS_read()==0){
 8003c88:	f7fd fb04 	bl	8001294 <DMS_read>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d111      	bne.n	8003cb6 <DMS_Handller_TASK+0x32>
      DMS__one_COUNTER=0;
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <DMS_Handller_TASK+0x58>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
    if(  DMS__zero_COUNTER==0){
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <DMS_Handller_TASK+0x5c>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f3      	bne.n	8003c88 <DMS_Handller_TASK+0x4>
      MCAL_USART_SendData(TSR_UART_INSTANT, DMS_TAKE_ACTION);
 8003ca0:	2166      	movs	r1, #102	; 0x66
 8003ca2:	4810      	ldr	r0, [pc, #64]	; (8003ce4 <DMS_Handller_TASK+0x60>)
 8003ca4:	f7ff feb2 	bl	8003a0c <MCAL_USART_SendData>
      DMS__zero_COUNTER++;
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <DMS_Handller_TASK+0x5c>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <DMS_Handller_TASK+0x5c>)
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	e7e8      	b.n	8003c88 <DMS_Handller_TASK+0x4>
    }

    }else{
      DMS__zero_COUNTER=0;
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <DMS_Handller_TASK+0x5c>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
      if(DMS__one_COUNTER==0){
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <DMS_Handller_TASK+0x58>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e1      	bne.n	8003c88 <DMS_Handller_TASK+0x4>
        MCAL_USART_SendData(TSR_UART_INSTANT, DMS_Release_ACTION);
 8003cc4:	2155      	movs	r1, #85	; 0x55
 8003cc6:	4807      	ldr	r0, [pc, #28]	; (8003ce4 <DMS_Handller_TASK+0x60>)
 8003cc8:	f7ff fea0 	bl	8003a0c <MCAL_USART_SendData>
        DMS__one_COUNTER++;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	; (8003cdc <DMS_Handller_TASK+0x58>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	4b01      	ldr	r3, [pc, #4]	; (8003cdc <DMS_Handller_TASK+0x58>)
 8003cd6:	701a      	strb	r2, [r3, #0]
    if(DMS_read()==0){
 8003cd8:	e7d6      	b.n	8003c88 <DMS_Handller_TASK+0x4>
 8003cda:	bf00      	nop
 8003cdc:	20004244 	.word	0x20004244
 8003ce0:	20004243 	.word	0x20004243
 8003ce4:	40013800 	.word	0x40013800

08003ce8 <ACC_CONVERT_ADC_TODICMAL>:



uint16_t ACC_THROTTEL_DATA=0x00;
uint8_t  ACC_DICIMAL_VAL=0;
uint8_t ACC_CONVERT_ADC_TODICMAL(uint8_t ACC_THROTTEL_){
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	71fb      	strb	r3, [r7, #7]
	uint8_t ACC_DICIMAL_VAL=((((ACC_THROTTEL_-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL))/(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL))+ACC_DAC_MIN_DECIMAL);
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	f5a3 6296 	sub.w	r2, r3, #1200	; 0x4b0
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	019b      	lsls	r3, r3, #6
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <ACC_CONVERT_ADC_TODICMAL+0x3c>)
 8003d04:	fb82 1203 	smull	r1, r2, r2, r3
 8003d08:	441a      	add	r2, r3
 8003d0a:	1292      	asrs	r2, r2, #10
 8003d0c:	17db      	asrs	r3, r3, #31
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	3340      	adds	r3, #64	; 0x40
 8003d14:	73fb      	strb	r3, [r7, #15]

	return ACC_DICIMAL_VAL;
 8003d16:	7bfb      	ldrb	r3, [r7, #15]

}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	ec2a6fa1 	.word	0xec2a6fa1

08003d28 <ACC_ADC_CallBack>:
void ACC_ADC_CallBack(){
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
	ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 8003d2c:	4a03      	ldr	r2, [pc, #12]	; (8003d3c <ACC_ADC_CallBack+0x14>)
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4803      	ldr	r0, [pc, #12]	; (8003d40 <ACC_ADC_CallBack+0x18>)
 8003d32:	f7fe f979 	bl	8002028 <ADC_read>

}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20004252 	.word	0x20004252
 8003d40:	40012400 	.word	0x40012400

08003d44 <ACC_throtel_init>:

void ACC_throtel_init(){
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
	ADC_Analog_WDG AWDG={0,0,0,0};
 8003d4a:	f107 0310 	add.w	r3, r7, #16
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	809a      	strh	r2, [r3, #4]
	ADC_CONFIG config={ACC_THROTTEL_CHx,ADC_Continuous_conversion,ADC_1_5_cycles,ADC_Polling,&AWDG,ACC_ADC_CallBack};
 8003d54:	2300      	movs	r3, #0
 8003d56:	713b      	strb	r3, [r7, #4]
 8003d58:	2301      	movs	r3, #1
 8003d5a:	717b      	strb	r3, [r7, #5]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	71bb      	strb	r3, [r7, #6]
 8003d60:	2300      	movs	r3, #0
 8003d62:	71fb      	strb	r3, [r7, #7]
 8003d64:	f107 0310 	add.w	r3, r7, #16
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <ACC_throtel_init+0x54>)
 8003d6c:	60fb      	str	r3, [r7, #12]
	ADC_init(ADC1,&config);
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	480a      	ldr	r0, [pc, #40]	; (8003d9c <ACC_throtel_init+0x58>)
 8003d74:	f7fd ffcc 	bl	8001d10 <ADC_init>
	//	ADC_interrupt_Enable(ADC1);
	PIN_config PINx={ACC_BOTTON_PIN,INPUT_PD,0};
 8003d78:	2300      	movs	r3, #0
 8003d7a:	803b      	strh	r3, [r7, #0]
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	70bb      	strb	r3, [r7, #2]
 8003d80:	2300      	movs	r3, #0
 8003d82:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_init(ACC_BOTTON_PORT, &PINx);
 8003d84:	463b      	mov	r3, r7
 8003d86:	4619      	mov	r1, r3
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <ACC_throtel_init+0x5c>)
 8003d8a:	f7fe fe89 	bl	8002aa0 <MCAL_GPIO_init>

}
 8003d8e:	bf00      	nop
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	08003d29 	.word	0x08003d29
 8003d9c:	40012400 	.word	0x40012400
 8003da0:	40010c00 	.word	0x40010c00

08003da4 <ACC_DAC_init>:
void ACC_DAC_init(){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
	PIN_config PINx={ACC_DAC_0,OUTPUT_PP,SPEED_10};
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <ACC_DAC_init+0xa0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOA, &PINx);
 8003db0:	f107 031c 	add.w	r3, r7, #28
 8003db4:	4619      	mov	r1, r3
 8003db6:	4824      	ldr	r0, [pc, #144]	; (8003e48 <ACC_DAC_init+0xa4>)
 8003db8:	f7fe fe72 	bl	8002aa0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_1,OUTPUT_PP,SPEED_10};
 8003dbc:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <ACC_DAC_init+0xa8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8003dc2:	f107 031c 	add.w	r3, r7, #28
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4821      	ldr	r0, [pc, #132]	; (8003e50 <ACC_DAC_init+0xac>)
 8003dca:	f7fe fe69 	bl	8002aa0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_2,OUTPUT_PP,SPEED_10};
 8003dce:	4b21      	ldr	r3, [pc, #132]	; (8003e54 <ACC_DAC_init+0xb0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8003dd4:	f107 031c 	add.w	r3, r7, #28
 8003dd8:	4619      	mov	r1, r3
 8003dda:	481d      	ldr	r0, [pc, #116]	; (8003e50 <ACC_DAC_init+0xac>)
 8003ddc:	f7fe fe60 	bl	8002aa0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_3,OUTPUT_PP,SPEED_10};
 8003de0:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <ACC_DAC_init+0xb4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8003de6:	f107 031c 	add.w	r3, r7, #28
 8003dea:	4619      	mov	r1, r3
 8003dec:	4818      	ldr	r0, [pc, #96]	; (8003e50 <ACC_DAC_init+0xac>)
 8003dee:	f7fe fe57 	bl	8002aa0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_4,OUTPUT_PP,SPEED_10};
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <ACC_DAC_init+0xb8>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4814      	ldr	r0, [pc, #80]	; (8003e50 <ACC_DAC_init+0xac>)
 8003e00:	f7fe fe4e 	bl	8002aa0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_5,OUTPUT_PP,SPEED_10};
 8003e04:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <ACC_DAC_init+0xbc>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8003e0a:	f107 031c 	add.w	r3, r7, #28
 8003e0e:	4619      	mov	r1, r3
 8003e10:	480f      	ldr	r0, [pc, #60]	; (8003e50 <ACC_DAC_init+0xac>)
 8003e12:	f7fe fe45 	bl	8002aa0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_6,OUTPUT_PP,SPEED_10};
 8003e16:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <ACC_DAC_init+0xc0>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8003e1c:	f107 031c 	add.w	r3, r7, #28
 8003e20:	4619      	mov	r1, r3
 8003e22:	480b      	ldr	r0, [pc, #44]	; (8003e50 <ACC_DAC_init+0xac>)
 8003e24:	f7fe fe3c 	bl	8002aa0 <MCAL_GPIO_init>
	PINx=(PIN_config){ACC_DAC_7,OUTPUT_PP,SPEED_10};
 8003e28:	4b0f      	ldr	r3, [pc, #60]	; (8003e68 <ACC_DAC_init+0xc4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61fb      	str	r3, [r7, #28]
	MCAL_GPIO_init(GPIOB, &PINx);
 8003e2e:	f107 031c 	add.w	r3, r7, #28
 8003e32:	4619      	mov	r1, r3
 8003e34:	4806      	ldr	r0, [pc, #24]	; (8003e50 <ACC_DAC_init+0xac>)
 8003e36:	f7fe fe33 	bl	8002aa0 <MCAL_GPIO_init>

}
 8003e3a:	bf00      	nop
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	080048e0 	.word	0x080048e0
 8003e48:	40010800 	.word	0x40010800
 8003e4c:	080048e4 	.word	0x080048e4
 8003e50:	40010c00 	.word	0x40010c00
 8003e54:	080048e8 	.word	0x080048e8
 8003e58:	080048ec 	.word	0x080048ec
 8003e5c:	080048f0 	.word	0x080048f0
 8003e60:	080048f4 	.word	0x080048f4
 8003e64:	080048f8 	.word	0x080048f8
 8003e68:	080048fc 	.word	0x080048fc

08003e6c <ACC_FROM_ADC_TO_DAC>:
 * Note-
 */



void ACC_FROM_ADC_TO_DAC(uint16_t decimal_val){
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	80fb      	strh	r3, [r7, #6]
	//	uint16_t PWM_V=(uint16_t)(((ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL)*100)/(ACC_TROTTEL_Max_ADC_VAL_shifted));
	/*MY CLOCK IS 28Mhz so i the prescaler will be 27
	 * and i need to proudce and it will make tick every 1us and i need 3KHZ PWM so the ARR= will be 333.33
	 * */
	//	PWM_V=((PWM_V*35)/100);
	MCAL_write_PIN(GPIOA, ACC_DAC_0, ((decimal_val >>0) &1));
 8003e76:	88fb      	ldrh	r3, [r7, #6]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	461a      	mov	r2, r3
 8003e82:	210f      	movs	r1, #15
 8003e84:	482d      	ldr	r0, [pc, #180]	; (8003f3c <ACC_FROM_ADC_TO_DAC+0xd0>)
 8003e86:	f7fe fef5 	bl	8002c74 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_1, ((decimal_val >>1) &1));
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	4828      	ldr	r0, [pc, #160]	; (8003f40 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8003e9e:	f7fe fee9 	bl	8002c74 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_2, ((decimal_val >>2) &1));
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	089b      	lsrs	r3, r3, #2
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	4822      	ldr	r0, [pc, #136]	; (8003f40 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8003eb6:	f7fe fedd 	bl	8002c74 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_3, ((decimal_val >>3) &1));
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	08db      	lsrs	r3, r3, #3
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2105      	movs	r1, #5
 8003ecc:	481c      	ldr	r0, [pc, #112]	; (8003f40 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8003ece:	f7fe fed1 	bl	8002c74 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_4, ((decimal_val >>4) &1));
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	091b      	lsrs	r3, r3, #4
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2106      	movs	r1, #6
 8003ee4:	4816      	ldr	r0, [pc, #88]	; (8003f40 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8003ee6:	f7fe fec5 	bl	8002c74 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_5, ((decimal_val >>5) &1));
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2107      	movs	r1, #7
 8003efc:	4810      	ldr	r0, [pc, #64]	; (8003f40 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8003efe:	f7fe feb9 	bl	8002c74 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_6, ((decimal_val >>6) &1));
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	099b      	lsrs	r3, r3, #6
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	2108      	movs	r1, #8
 8003f14:	480a      	ldr	r0, [pc, #40]	; (8003f40 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8003f16:	f7fe fead 	bl	8002c74 <MCAL_write_PIN>
	MCAL_write_PIN(GPIOB, ACC_DAC_7, ((decimal_val >>7) &1));
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	09db      	lsrs	r3, r3, #7
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2109      	movs	r1, #9
 8003f2c:	4804      	ldr	r0, [pc, #16]	; (8003f40 <ACC_FROM_ADC_TO_DAC+0xd4>)
 8003f2e:	f7fe fea1 	bl	8002c74 <MCAL_write_PIN>

}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40010800 	.word	0x40010800
 8003f40:	40010c00 	.word	0x40010c00

08003f44 <ACC_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void ACC_Handller_TASK(){
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
	while(1){

		//      ACC_AMP=500;
		if((LUNA_AMP>=100) && (LUNA_AMP<=65535) ){
 8003f48:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <ACC_Handller_TASK+0x64>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	2b63      	cmp	r3, #99	; 0x63
 8003f4e:	d922      	bls.n	8003f96 <ACC_Handller_TASK+0x52>
			if(LUNA_dis ==0x00){
 8003f50:	4b16      	ldr	r3, [pc, #88]	; (8003fac <ACC_Handller_TASK+0x68>)
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d103      	bne.n	8003f60 <ACC_Handller_TASK+0x1c>
				ACC_ACTION=ACC_CAR_GO;
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <ACC_Handller_TASK+0x6c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e7f3      	b.n	8003f48 <ACC_Handller_TASK+0x4>

			}else if(LUNA_dis <= Distance_SET){
 8003f60:	4b12      	ldr	r3, [pc, #72]	; (8003fac <ACC_Handller_TASK+0x68>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003f68:	d803      	bhi.n	8003f72 <ACC_Handller_TASK+0x2e>
				// here should send CAN fram to atmega to stop the motor
				ACC_ACTION=ACC_CAR_STOP;
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <ACC_Handller_TASK+0x6c>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]
 8003f70:	e7ea      	b.n	8003f48 <ACC_Handller_TASK+0x4>

			}else if((LUNA_dis > Distance_SET) &&(LUNA_dis <MAX_Distance_SET)){
 8003f72:	4b0e      	ldr	r3, [pc, #56]	; (8003fac <ACC_Handller_TASK+0x68>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003f7a:	d908      	bls.n	8003f8e <ACC_Handller_TASK+0x4a>
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <ACC_Handller_TASK+0x68>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f84:	d203      	bcs.n	8003f8e <ACC_Handller_TASK+0x4a>
				ACC_ACTION=ACC_CAR_SLOW_DOWN;
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <ACC_Handller_TASK+0x6c>)
 8003f88:	2202      	movs	r2, #2
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e00a      	b.n	8003fa4 <ACC_Handller_TASK+0x60>


			}else{
				ACC_ACTION=ACC_CAR_GO;
 8003f8e:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <ACC_Handller_TASK+0x6c>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
 8003f94:	e7d8      	b.n	8003f48 <ACC_Handller_TASK+0x4>


		}
		// if the Signal strength indicator not strong dequeue its disance value
		else{
			if(LUNA_dis ==0x00){
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <ACC_Handller_TASK+0x68>)
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1d4      	bne.n	8003f48 <ACC_Handller_TASK+0x4>
				ACC_ACTION=ACC_CAR_GO;
 8003f9e:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <ACC_Handller_TASK+0x6c>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]
		if((LUNA_AMP>=100) && (LUNA_AMP<=65535) ){
 8003fa4:	e7d0      	b.n	8003f48 <ACC_Handller_TASK+0x4>
 8003fa6:	bf00      	nop
 8003fa8:	20003fce 	.word	0x20003fce
 8003fac:	20003fcc 	.word	0x20003fcc
 8003fb0:	20000021 	.word	0x20000021

08003fb4 <ACC_throttel_Handller_TASK>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void ACC_throttel_Handller_TASK(){
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
	uint8_t ACC_counter=0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	71fb      	strb	r3, [r7, #7]
	uint16_t ADC_to_send=0,ADC_SAVED=0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	807b      	strh	r3, [r7, #2]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	80bb      	strh	r3, [r7, #4]
	while(1){

		if(ACC_ST==ACC_ON){
 8003fc6:	4b30      	ldr	r3, [pc, #192]	; (8004088 <ACC_throttel_Handller_TASK+0xd4>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d136      	bne.n	800403c <ACC_throttel_Handller_TASK+0x88>
			if(ACC_counter ==0){
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <ACC_throttel_Handller_TASK+0x36>
				ADC_SAVED=ACC_CONVERT_ADC_TODICMAL(ACC_THROTTEL_DATA);
 8003fd4:	4b2d      	ldr	r3, [pc, #180]	; (800408c <ACC_throttel_Handller_TASK+0xd8>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fe84 	bl	8003ce8 <ACC_CONVERT_ADC_TODICMAL>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	80bb      	strh	r3, [r7, #4]
				ACC_counter++;
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	71fb      	strb	r3, [r7, #7]
			}
			if(ADC_SAVED<ACC_DICIMAL_VAL){
 8003fea:	4b29      	ldr	r3, [pc, #164]	; (8004090 <ACC_throttel_Handller_TASK+0xdc>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	88ba      	ldrh	r2, [r7, #4]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d206      	bcs.n	8004004 <ACC_throttel_Handller_TASK+0x50>
				ACC_FROM_ADC_TO_DAC(ACC_DICIMAL_VAL);
 8003ff6:	4b26      	ldr	r3, [pc, #152]	; (8004090 <ACC_throttel_Handller_TASK+0xdc>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff35 	bl	8003e6c <ACC_FROM_ADC_TO_DAC>
 8004002:	e7e0      	b.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>
			}else{

				if(ACC_ACTION ==ACC_CAR_STOP){
 8004004:	4b23      	ldr	r3, [pc, #140]	; (8004094 <ACC_throttel_Handller_TASK+0xe0>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d103      	bne.n	8004014 <ACC_throttel_Handller_TASK+0x60>
					ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 800400c:	2040      	movs	r0, #64	; 0x40
 800400e:	f7ff ff2d 	bl	8003e6c <ACC_FROM_ADC_TO_DAC>
 8004012:	e7d8      	b.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>
				}else if(ACC_ACTION ==ACC_CAR_SLOW_DOWN){
 8004014:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <ACC_throttel_Handller_TASK+0xe0>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d106      	bne.n	800402a <ACC_throttel_Handller_TASK+0x76>

					ACC_FROM_ADC_TO_DAC((ADC_SAVED/2));
 800401c:	88bb      	ldrh	r3, [r7, #4]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	b29b      	uxth	r3, r3
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff ff22 	bl	8003e6c <ACC_FROM_ADC_TO_DAC>
 8004028:	e7cd      	b.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>
				}else if(ACC_ACTION ==ACC_CAR_GO){
 800402a:	4b1a      	ldr	r3, [pc, #104]	; (8004094 <ACC_throttel_Handller_TASK+0xe0>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1c9      	bne.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>
					ACC_FROM_ADC_TO_DAC(ADC_SAVED);
 8004032:	88bb      	ldrh	r3, [r7, #4]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff19 	bl	8003e6c <ACC_FROM_ADC_TO_DAC>
 800403a:	e7c4      	b.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>

				}
			}


		}else if(ACC_ST==ACC_OFF){
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <ACC_throttel_Handller_TASK+0xd4>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1c0      	bne.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>
			ACC_counter=0;
 8004044:	2300      	movs	r3, #0
 8004046:	71fb      	strb	r3, [r7, #7]
			if(ACC_ACTION ==ACC_CAR_STOP){
 8004048:	4b12      	ldr	r3, [pc, #72]	; (8004094 <ACC_throttel_Handller_TASK+0xe0>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d103      	bne.n	8004058 <ACC_throttel_Handller_TASK+0xa4>
				ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 8004050:	2040      	movs	r0, #64	; 0x40
 8004052:	f7ff ff0b 	bl	8003e6c <ACC_FROM_ADC_TO_DAC>
 8004056:	e7b6      	b.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>
			}else if(ACC_ACTION ==ACC_CAR_SLOW_DOWN){
 8004058:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <ACC_throttel_Handller_TASK+0xe0>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d108      	bne.n	8004072 <ACC_throttel_Handller_TASK+0xbe>
				ACC_FROM_ADC_TO_DAC((ACC_DICIMAL_VAL/2));
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <ACC_throttel_Handller_TASK+0xdc>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	b29b      	uxth	r3, r3
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fefe 	bl	8003e6c <ACC_FROM_ADC_TO_DAC>
 8004070:	e7a9      	b.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>
			}else if(ACC_ACTION ==ACC_CAR_GO){
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <ACC_throttel_Handller_TASK+0xe0>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1a5      	bne.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>
				ACC_FROM_ADC_TO_DAC(ACC_DICIMAL_VAL);
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <ACC_throttel_Handller_TASK+0xdc>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fef3 	bl	8003e6c <ACC_FROM_ADC_TO_DAC>
		if(ACC_ST==ACC_ON){
 8004086:	e79e      	b.n	8003fc6 <ACC_throttel_Handller_TASK+0x12>
 8004088:	2000423d 	.word	0x2000423d
 800408c:	20004252 	.word	0x20004252
 8004090:	20004254 	.word	0x20004254
 8004094:	20000021 	.word	0x20000021

08004098 <ACC_STATE_READ_TASK>:
 * @param [out] - Void
 * @retval -
 * Note-
 */

void ACC_STATE_READ_TASK(){
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
	while(1){

//		LUNA_dist();
		if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 800409c:	2100      	movs	r1, #0
 800409e:	4822      	ldr	r0, [pc, #136]	; (8004128 <ACC_STATE_READ_TASK+0x90>)
 80040a0:	f7fe fe10 	bl	8002cc4 <MCAL_Read_PIN>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00d      	beq.n	80040c6 <ACC_STATE_READ_TASK+0x2e>
			_TIM1_delay_ms(30);
 80040aa:	201e      	movs	r0, #30
 80040ac:	f7ff fb2a 	bl	8003704 <_TIM1_delay_ms>
			if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 80040b0:	2100      	movs	r1, #0
 80040b2:	481d      	ldr	r0, [pc, #116]	; (8004128 <ACC_STATE_READ_TASK+0x90>)
 80040b4:	f7fe fe06 	bl	8002cc4 <MCAL_Read_PIN>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d006      	beq.n	80040cc <ACC_STATE_READ_TASK+0x34>
				ACC_ST=1;
 80040be:	4b1b      	ldr	r3, [pc, #108]	; (800412c <ACC_STATE_READ_TASK+0x94>)
 80040c0:	2201      	movs	r2, #1
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e002      	b.n	80040cc <ACC_STATE_READ_TASK+0x34>
			}
		}else{
			ACC_ST=0;
 80040c6:	4b19      	ldr	r3, [pc, #100]	; (800412c <ACC_STATE_READ_TASK+0x94>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]

		}
		ADC_read(ADC1,ACC_THROTTEL_CHx,&ACC_THROTTEL_DATA);
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <ACC_STATE_READ_TASK+0x98>)
 80040ce:	2100      	movs	r1, #0
 80040d0:	4818      	ldr	r0, [pc, #96]	; (8004134 <ACC_STATE_READ_TASK+0x9c>)
 80040d2:	f7fd ffa9 	bl	8002028 <ADC_read>
		if(ACC_THROTTEL_DATA<ACC_TROTTEL_MIN_ADC_VAL){
 80040d6:	4b16      	ldr	r3, [pc, #88]	; (8004130 <ACC_STATE_READ_TASK+0x98>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80040de:	d203      	bcs.n	80040e8 <ACC_STATE_READ_TASK+0x50>
			ACC_DICIMAL_VAL=64;
 80040e0:	4b15      	ldr	r3, [pc, #84]	; (8004138 <ACC_STATE_READ_TASK+0xa0>)
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e7d9      	b.n	800409c <ACC_STATE_READ_TASK+0x4>
		}else if(ACC_THROTTEL_DATA>ACC_TROTTEL_Max_ADC_VAL){
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <ACC_STATE_READ_TASK+0x98>)
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	f640 1206 	movw	r2, #2310	; 0x906
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d903      	bls.n	80040fc <ACC_STATE_READ_TASK+0x64>
			ACC_DICIMAL_VAL=255;
 80040f4:	4b10      	ldr	r3, [pc, #64]	; (8004138 <ACC_STATE_READ_TASK+0xa0>)
 80040f6:	22ff      	movs	r2, #255	; 0xff
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	e7cf      	b.n	800409c <ACC_STATE_READ_TASK+0x4>
		else{
			//		uint32_t step1=((uint32_t)(ACC_THROTTEL_DATA-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL)); //884.3
			//		uint32_t step2=(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL);//1539
			//		uint32_t step3=(step1/step2);
			//		ACC_DICIMAL_VAL=step3+ACC_DAC_MIN_DECIMAL;
			ACC_DICIMAL_VAL=((((ACC_THROTTEL_DATA-ACC_TROTTEL_MIN_ADC_VAL)*(ACC_DAC_MAX_DECIMAL-ACC_DAC_MIN_DECIMAL))/(ACC_TROTTEL_Max_ADC_VAL-ACC_TROTTEL_MIN_ADC_VAL))+ACC_DAC_MIN_DECIMAL);
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <ACC_STATE_READ_TASK+0x98>)
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	f5a3 6296 	sub.w	r2, r3, #1200	; 0x4b0
 8004104:	4613      	mov	r3, r2
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	4413      	add	r3, r2
 800410a:	019b      	lsls	r3, r3, #6
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	4a0b      	ldr	r2, [pc, #44]	; (800413c <ACC_STATE_READ_TASK+0xa4>)
 8004110:	fb82 1203 	smull	r1, r2, r2, r3
 8004114:	441a      	add	r2, r3
 8004116:	1292      	asrs	r2, r2, #10
 8004118:	17db      	asrs	r3, r3, #31
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	b2db      	uxtb	r3, r3
 800411e:	3340      	adds	r3, #64	; 0x40
 8004120:	b2da      	uxtb	r2, r3
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <ACC_STATE_READ_TASK+0xa0>)
 8004124:	701a      	strb	r2, [r3, #0]
		if(MCAL_Read_PIN(ACC_BOTTON_PORT, ACC_BOTTON_PIN)){
 8004126:	e7b9      	b.n	800409c <ACC_STATE_READ_TASK+0x4>
 8004128:	40010c00 	.word	0x40010c00
 800412c:	2000423d 	.word	0x2000423d
 8004130:	20004252 	.word	0x20004252
 8004134:	40012400 	.word	0x40012400
 8004138:	20004254 	.word	0x20004254
 800413c:	ec2a6fa1 	.word	0xec2a6fa1

08004140 <TSR_Handller_TASK>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_Handller_TASK(){
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
	while(1){
		//	  if(GR_TSR_FLAG_OLED_send !=0x99){
		vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004144:	4b08      	ldr	r3, [pc, #32]	; (8004168 <TSR_Handller_TASK+0x28>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2104      	movs	r1, #4
 800414a:	4618      	mov	r0, r3
 800414c:	f7fc f9c8 	bl	80004e0 <vTaskPrioritySet>
		TFT_send_image(GR_TSR_FLAG_OLED_send);
 8004150:	4b06      	ldr	r3, [pc, #24]	; (800416c <TSR_Handller_TASK+0x2c>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd fc7d 	bl	8001a54 <TFT_send_image>
		vTaskPrioritySet(TSR_Handller_TASK_Handle,2);
 800415a:	4b03      	ldr	r3, [pc, #12]	; (8004168 <TSR_Handller_TASK+0x28>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2102      	movs	r1, #2
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc f9bd 	bl	80004e0 <vTaskPrioritySet>
		vTaskPrioritySet(TSR_Handller_TASK_Handle,4);
 8004166:	e7ed      	b.n	8004144 <TSR_Handller_TASK+0x4>
 8004168:	2000424c 	.word	0x2000424c
 800416c:	20004232 	.word	0x20004232

08004170 <TSR_call_Back>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_call_Back(void){
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
	if(  USART1->SR &(1<<5)){
 8004174:	4ba6      	ldr	r3, [pc, #664]	; (8004410 <TSR_call_Back+0x2a0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d006      	beq.n	800418e <TSR_call_Back+0x1e>
		PC_Uart_Flag=  MCAL_USART_ReciveData(USART1);
 8004180:	48a3      	ldr	r0, [pc, #652]	; (8004410 <TSR_call_Back+0x2a0>)
 8004182:	f7ff fc83 	bl	8003a8c <MCAL_USART_ReciveData>
 8004186:	4603      	mov	r3, r0
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4ba2      	ldr	r3, [pc, #648]	; (8004414 <TSR_call_Back+0x2a4>)
 800418c:	701a      	strb	r2, [r3, #0]
	  0x0008

	  0x0000 | 0x0008
	  0x0008
	 */
	switch(PC_Uart_Flag){
 800418e:	4ba1      	ldr	r3, [pc, #644]	; (8004414 <TSR_call_Back+0x2a4>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	3b23      	subs	r3, #35	; 0x23
 8004194:	2b1d      	cmp	r3, #29
 8004196:	d860      	bhi.n	800425a <TSR_call_Back+0xea>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <TSR_call_Back+0x30>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	08004219 	.word	0x08004219
 80041a4:	0800425b 	.word	0x0800425b
 80041a8:	0800425b 	.word	0x0800425b
 80041ac:	08004253 	.word	0x08004253
 80041b0:	0800425b 	.word	0x0800425b
 80041b4:	0800425b 	.word	0x0800425b
 80041b8:	0800425b 	.word	0x0800425b
 80041bc:	08004227 	.word	0x08004227
 80041c0:	0800423d 	.word	0x0800423d
 80041c4:	0800425b 	.word	0x0800425b
 80041c8:	0800425b 	.word	0x0800425b
 80041cc:	0800425b 	.word	0x0800425b
 80041d0:	0800422f 	.word	0x0800422f
 80041d4:	0800425b 	.word	0x0800425b
 80041d8:	0800425b 	.word	0x0800425b
 80041dc:	0800425b 	.word	0x0800425b
 80041e0:	0800425b 	.word	0x0800425b
 80041e4:	0800425b 	.word	0x0800425b
 80041e8:	0800425b 	.word	0x0800425b
 80041ec:	0800425b 	.word	0x0800425b
 80041f0:	0800425b 	.word	0x0800425b
 80041f4:	0800425b 	.word	0x0800425b
 80041f8:	0800425b 	.word	0x0800425b
 80041fc:	0800425b 	.word	0x0800425b
 8004200:	0800425b 	.word	0x0800425b
 8004204:	0800425b 	.word	0x0800425b
 8004208:	0800425b 	.word	0x0800425b
 800420c:	0800425b 	.word	0x0800425b
 8004210:	0800425b 	.word	0x0800425b
 8004214:	08004245 	.word	0x08004245
	case '#':
		TSR_START_Flag=1;
 8004218:	4b7f      	ldr	r3, [pc, #508]	; (8004418 <TSR_call_Back+0x2a8>)
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
		TSR_END_Flag=0;
 800421e:	4b7f      	ldr	r3, [pc, #508]	; (800441c <TSR_call_Back+0x2ac>)
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
		break;
 8004224:	e019      	b.n	800425a <TSR_call_Back+0xea>
	case '*':
		TSR_END_Flag=1;
 8004226:	4b7d      	ldr	r3, [pc, #500]	; (800441c <TSR_call_Back+0x2ac>)
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
		break;
 800422c:	e015      	b.n	800425a <TSR_call_Back+0xea>
	case 0x2F:
		FACE_START_Flag=1;
 800422e:	4b7c      	ldr	r3, [pc, #496]	; (8004420 <TSR_call_Back+0x2b0>)
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
		FACE_END_Flag=0;
 8004234:	4b7b      	ldr	r3, [pc, #492]	; (8004424 <TSR_call_Back+0x2b4>)
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
		break;
 800423a:	e00e      	b.n	800425a <TSR_call_Back+0xea>
	case 0x2B:
		FACE_END_Flag=1;
 800423c:	4b79      	ldr	r3, [pc, #484]	; (8004424 <TSR_call_Back+0x2b4>)
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
		break;
 8004242:	e00a      	b.n	800425a <TSR_call_Back+0xea>

	case '@':
		ACC_START_OF_FRAME=1;
 8004244:	4b78      	ldr	r3, [pc, #480]	; (8004428 <TSR_call_Back+0x2b8>)
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
		ACC_END_OF_FRAME=0;
 800424a:	4b78      	ldr	r3, [pc, #480]	; (800442c <TSR_call_Back+0x2bc>)
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
		break;
 8004250:	e003      	b.n	800425a <TSR_call_Back+0xea>
	case '&':
		ACC_END_OF_FRAME=1;
 8004252:	4b76      	ldr	r3, [pc, #472]	; (800442c <TSR_call_Back+0x2bc>)
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
		break;
 8004258:	bf00      	nop

	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////

	if (FACE_START_Flag){
 800425a:	4b71      	ldr	r3, [pc, #452]	; (8004420 <TSR_call_Back+0x2b0>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d043      	beq.n	80042ea <TSR_call_Back+0x17a>
		if(PC_Counter ==0)
 8004262:	4b73      	ldr	r3, [pc, #460]	; (8004430 <TSR_call_Back+0x2c0>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <TSR_call_Back+0x100>
			PC_Uart_Flag=0;
 800426a:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <TSR_call_Back+0x2a4>)
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]

		if(FACE_END_Flag ==0){
 8004270:	4b6c      	ldr	r3, [pc, #432]	; (8004424 <TSR_call_Back+0x2b4>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d112      	bne.n	800429e <TSR_call_Back+0x12e>
			GR_FACE_FLAG_ = (GR_FACE_FLAG_<<8)| PC_Uart_Flag;
 8004278:	4b6e      	ldr	r3, [pc, #440]	; (8004434 <TSR_call_Back+0x2c4>)
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	b21a      	sxth	r2, r3
 8004280:	4b64      	ldr	r3, [pc, #400]	; (8004414 <TSR_call_Back+0x2a4>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b21b      	sxth	r3, r3
 8004286:	4313      	orrs	r3, r2
 8004288:	b21b      	sxth	r3, r3
 800428a:	b29a      	uxth	r2, r3
 800428c:	4b69      	ldr	r3, [pc, #420]	; (8004434 <TSR_call_Back+0x2c4>)
 800428e:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 8004290:	4b67      	ldr	r3, [pc, #412]	; (8004430 <TSR_call_Back+0x2c0>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	3301      	adds	r3, #1
 8004296:	b2da      	uxtb	r2, r3
 8004298:	4b65      	ldr	r3, [pc, #404]	; (8004430 <TSR_call_Back+0x2c0>)
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e025      	b.n	80042ea <TSR_call_Back+0x17a>
			 * 0x0000 | 0x2F =0x
			 *
			 * */

		}else{
			GR_FACE_FLAG_ &=0x0F0F;
 800429e:	4b65      	ldr	r3, [pc, #404]	; (8004434 <TSR_call_Back+0x2c4>)
 80042a0:	881a      	ldrh	r2, [r3, #0]
 80042a2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80042a6:	4013      	ands	r3, r2
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	4b62      	ldr	r3, [pc, #392]	; (8004434 <TSR_call_Back+0x2c4>)
 80042ac:	801a      	strh	r2, [r3, #0]
			GR_FACE_FLAG_send = ((GR_FACE_FLAG_ &0x0F00)>>4) |((GR_FACE_FLAG_&0x000F));
 80042ae:	4b61      	ldr	r3, [pc, #388]	; (8004434 <TSR_call_Back+0x2c4>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	111b      	asrs	r3, r3, #4
 80042b4:	b25b      	sxtb	r3, r3
 80042b6:	f023 030f 	bic.w	r3, r3, #15
 80042ba:	b25a      	sxtb	r2, r3
 80042bc:	4b5d      	ldr	r3, [pc, #372]	; (8004434 <TSR_call_Back+0x2c4>)
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	b25b      	sxtb	r3, r3
 80042c8:	4313      	orrs	r3, r2
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4b5a      	ldr	r3, [pc, #360]	; (8004438 <TSR_call_Back+0x2c8>)
 80042d0:	701a      	strb	r2, [r3, #0]
			GR_FACE_FLAG_=0;
 80042d2:	4b58      	ldr	r3, [pc, #352]	; (8004434 <TSR_call_Back+0x2c4>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	801a      	strh	r2, [r3, #0]

			///////////////
			FACE_START_Flag=0;
 80042d8:	4b51      	ldr	r3, [pc, #324]	; (8004420 <TSR_call_Back+0x2b0>)
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
			FACE_END_Flag=0;
 80042de:	4b51      	ldr	r3, [pc, #324]	; (8004424 <TSR_call_Back+0x2b4>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 80042e4:	4b52      	ldr	r3, [pc, #328]	; (8004430 <TSR_call_Back+0x2c0>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
		}
	}
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	if(TSR_START_Flag){
 80042ea:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <TSR_call_Back+0x2a8>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d043      	beq.n	800437a <TSR_call_Back+0x20a>
		if(PC_Counter ==0)
 80042f2:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <TSR_call_Back+0x2c0>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <TSR_call_Back+0x190>
			PC_Uart_Flag=0;
 80042fa:	4b46      	ldr	r3, [pc, #280]	; (8004414 <TSR_call_Back+0x2a4>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]

		if(TSR_END_Flag ==0){
 8004300:	4b46      	ldr	r3, [pc, #280]	; (800441c <TSR_call_Back+0x2ac>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d112      	bne.n	800432e <TSR_call_Back+0x1be>
			GR_TSR_FLAG_OLED = (GR_TSR_FLAG_OLED<<8)| PC_Uart_Flag;
 8004308:	4b4c      	ldr	r3, [pc, #304]	; (800443c <TSR_call_Back+0x2cc>)
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	b21a      	sxth	r2, r3
 8004310:	4b40      	ldr	r3, [pc, #256]	; (8004414 <TSR_call_Back+0x2a4>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	b21b      	sxth	r3, r3
 8004316:	4313      	orrs	r3, r2
 8004318:	b21b      	sxth	r3, r3
 800431a:	b29a      	uxth	r2, r3
 800431c:	4b47      	ldr	r3, [pc, #284]	; (800443c <TSR_call_Back+0x2cc>)
 800431e:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 8004320:	4b43      	ldr	r3, [pc, #268]	; (8004430 <TSR_call_Back+0x2c0>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	3301      	adds	r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <TSR_call_Back+0x2c0>)
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e025      	b.n	800437a <TSR_call_Back+0x20a>


		}else{
			GR_TSR_FLAG_OLED &=0x0F0F;
 800432e:	4b43      	ldr	r3, [pc, #268]	; (800443c <TSR_call_Back+0x2cc>)
 8004330:	881a      	ldrh	r2, [r3, #0]
 8004332:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004336:	4013      	ands	r3, r2
 8004338:	b29a      	uxth	r2, r3
 800433a:	4b40      	ldr	r3, [pc, #256]	; (800443c <TSR_call_Back+0x2cc>)
 800433c:	801a      	strh	r2, [r3, #0]
			GR_TSR_FLAG_OLED_send = ((GR_TSR_FLAG_OLED &0x0F00)>>4) |((GR_TSR_FLAG_OLED&0x000F));
 800433e:	4b3f      	ldr	r3, [pc, #252]	; (800443c <TSR_call_Back+0x2cc>)
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	111b      	asrs	r3, r3, #4
 8004344:	b25b      	sxtb	r3, r3
 8004346:	f023 030f 	bic.w	r3, r3, #15
 800434a:	b25a      	sxtb	r2, r3
 800434c:	4b3b      	ldr	r3, [pc, #236]	; (800443c <TSR_call_Back+0x2cc>)
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b25b      	sxtb	r3, r3
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	b25b      	sxtb	r3, r3
 8004358:	4313      	orrs	r3, r2
 800435a:	b25b      	sxtb	r3, r3
 800435c:	b2da      	uxtb	r2, r3
 800435e:	4b38      	ldr	r3, [pc, #224]	; (8004440 <TSR_call_Back+0x2d0>)
 8004360:	701a      	strb	r2, [r3, #0]
			GR_TSR_FLAG_OLED=0;
 8004362:	4b36      	ldr	r3, [pc, #216]	; (800443c <TSR_call_Back+0x2cc>)
 8004364:	2200      	movs	r2, #0
 8004366:	801a      	strh	r2, [r3, #0]
			///////////////
			TSR_END_Flag=0;
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <TSR_call_Back+0x2ac>)
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
			TSR_START_Flag=0;
 800436e:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <TSR_call_Back+0x2a8>)
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 8004374:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <TSR_call_Back+0x2c0>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
		}
	}
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////
	if(ACC_START_OF_FRAME){
 800437a:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <TSR_call_Back+0x2b8>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d043      	beq.n	800440a <TSR_call_Back+0x29a>
		if(PC_Counter ==0)
 8004382:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <TSR_call_Back+0x2c0>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d102      	bne.n	8004390 <TSR_call_Back+0x220>
			PC_Uart_Flag=0;
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <TSR_call_Back+0x2a4>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]

		if(ACC_END_OF_FRAME ==0){
 8004390:	4b26      	ldr	r3, [pc, #152]	; (800442c <TSR_call_Back+0x2bc>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d112      	bne.n	80043be <TSR_call_Back+0x24e>
			GR_ACC_FLAG_ = (GR_ACC_FLAG_<<8)| PC_Uart_Flag;
 8004398:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <TSR_call_Back+0x2d4>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	b21a      	sxth	r2, r3
 80043a0:	4b1c      	ldr	r3, [pc, #112]	; (8004414 <TSR_call_Back+0x2a4>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	b21b      	sxth	r3, r3
 80043a6:	4313      	orrs	r3, r2
 80043a8:	b21b      	sxth	r3, r3
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	4b25      	ldr	r3, [pc, #148]	; (8004444 <TSR_call_Back+0x2d4>)
 80043ae:	801a      	strh	r2, [r3, #0]
			PC_Counter++;
 80043b0:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <TSR_call_Back+0x2c0>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	3301      	adds	r3, #1
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <TSR_call_Back+0x2c0>)
 80043ba:	701a      	strb	r2, [r3, #0]
	//    GR_TSR_FLAG_OLED=0;
	//
	//  }


}
 80043bc:	e025      	b.n	800440a <TSR_call_Back+0x29a>
			GR_ACC_FLAG_ &=0x0F0F;
 80043be:	4b21      	ldr	r3, [pc, #132]	; (8004444 <TSR_call_Back+0x2d4>)
 80043c0:	881a      	ldrh	r2, [r3, #0]
 80043c2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80043c6:	4013      	ands	r3, r2
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <TSR_call_Back+0x2d4>)
 80043cc:	801a      	strh	r2, [r3, #0]
			GR_ACC_FLAG_send = ((GR_ACC_FLAG_ &0x0F00)>>4) |((GR_ACC_FLAG_&0x000F));
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <TSR_call_Back+0x2d4>)
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	111b      	asrs	r3, r3, #4
 80043d4:	b25b      	sxtb	r3, r3
 80043d6:	f023 030f 	bic.w	r3, r3, #15
 80043da:	b25a      	sxtb	r2, r3
 80043dc:	4b19      	ldr	r3, [pc, #100]	; (8004444 <TSR_call_Back+0x2d4>)
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	b25b      	sxtb	r3, r3
 80043e8:	4313      	orrs	r3, r2
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <TSR_call_Back+0x2d8>)
 80043f0:	701a      	strb	r2, [r3, #0]
			GR_ACC_FLAG_=0;
 80043f2:	4b14      	ldr	r3, [pc, #80]	; (8004444 <TSR_call_Back+0x2d4>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	801a      	strh	r2, [r3, #0]
			ACC_START_OF_FRAME=0;
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <TSR_call_Back+0x2b8>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
			ACC_END_OF_FRAME=0;
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <TSR_call_Back+0x2bc>)
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
			PC_Counter=0;
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <TSR_call_Back+0x2c0>)
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
}
 800440a:	bf00      	nop
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40013800 	.word	0x40013800
 8004414:	20004234 	.word	0x20004234
 8004418:	20004235 	.word	0x20004235
 800441c:	20004236 	.word	0x20004236
 8004420:	20004237 	.word	0x20004237
 8004424:	20004238 	.word	0x20004238
 8004428:	2000423e 	.word	0x2000423e
 800442c:	2000423f 	.word	0x2000423f
 8004430:	20004233 	.word	0x20004233
 8004434:	2000423a 	.word	0x2000423a
 8004438:	2000423c 	.word	0x2000423c
 800443c:	20004230 	.word	0x20004230
 8004440:	20004232 	.word	0x20004232
 8004444:	20004240 	.word	0x20004240
 8004448:	20004242 	.word	0x20004242

0800444c <TSR_init>:
 * @param [in] - void
 * @param [out] - Void
 * @retval -
 * Note-
 */
void TSR_init(void){
 800444c:	b590      	push	{r4, r7, lr}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
	USART_Config_t UART1_CON={115200,EGHIT_BITS,Parity_DISABLE,Interrupt,ONE_STOP_BIT,Disabled,Asynchronous,TSR_call_Back};
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <TSR_init+0x24>)
 8004454:	463c      	mov	r4, r7
 8004456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MCAL_USART_init(TSR_UART_INSTANT, &UART1_CON);
 800445c:	463b      	mov	r3, r7
 800445e:	4619      	mov	r1, r3
 8004460:	4804      	ldr	r0, [pc, #16]	; (8004474 <TSR_init+0x28>)
 8004462:	f7ff f967 	bl	8003734 <MCAL_USART_init>
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bd90      	pop	{r4, r7, pc}
 800446e:	bf00      	nop
 8004470:	08004900 	.word	0x08004900
 8004474:	40013800 	.word	0x40013800

08004478 <CAR_ON_Handler>:

/************FACE ID TASK*************/
/************FACE ID TASK*************/
/************FACE ID TASK*************/

void CAR_ON_Handler(){
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af04      	add	r7, sp, #16
	CAR_login_counter=0;
 800447e:	4b26      	ldr	r3, [pc, #152]	; (8004518 <CAR_ON_Handler+0xa0>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
	if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==0) ){
 8004484:	2101      	movs	r1, #1
 8004486:	4825      	ldr	r0, [pc, #148]	; (800451c <CAR_ON_Handler+0xa4>)
 8004488:	f7fe fc1c 	bl	8002cc4 <MCAL_Read_PIN>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d13f      	bne.n	8004512 <CAR_ON_Handler+0x9a>
		_TIM1_delay_ms(30);
 8004492:	201e      	movs	r0, #30
 8004494:	f7ff f936 	bl	8003704 <_TIM1_delay_ms>
		if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==0) ){
 8004498:	2101      	movs	r1, #1
 800449a:	4820      	ldr	r0, [pc, #128]	; (800451c <CAR_ON_Handler+0xa4>)
 800449c:	f7fe fc12 	bl	8002cc4 <MCAL_Read_PIN>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d135      	bne.n	8004512 <CAR_ON_Handler+0x9a>

			if(CAR_ON_counter ==1 &&GR_FACE_FLAG_send !=0x99&&GR_FACE_FLAG_send !=0x00){
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <CAR_ON_Handler+0xa8>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d131      	bne.n	8004512 <CAR_ON_Handler+0x9a>
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <CAR_ON_Handler+0xac>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b99      	cmp	r3, #153	; 0x99
 80044b4:	d02d      	beq.n	8004512 <CAR_ON_Handler+0x9a>
 80044b6:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <CAR_ON_Handler+0xac>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d029      	beq.n	8004512 <CAR_ON_Handler+0x9a>
				//				MCAL_USART_Deinit(LUNA_UART_INSTANT);
				//				NVIC_ISER1 |=(1<<(USART1_IRQ-32));
				CAR_ON_counter=0;
 80044be:	4b18      	ldr	r3, [pc, #96]	; (8004520 <CAR_ON_Handler+0xa8>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
				GR_FACE_FLAG_send=0;
 80044c4:	4b17      	ldr	r3, [pc, #92]	; (8004524 <CAR_ON_Handler+0xac>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
				CAR_login_counter=0;
 80044ca:	4b13      	ldr	r3, [pc, #76]	; (8004518 <CAR_ON_Handler+0xa0>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
				DMS__zero_COUNTER=0;
 80044d0:	4b15      	ldr	r3, [pc, #84]	; (8004528 <CAR_ON_Handler+0xb0>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
				DMS__one_COUNTER=0;
 80044d6:	4b15      	ldr	r3, [pc, #84]	; (800452c <CAR_ON_Handler+0xb4>)
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
				//UART SEND
				TFT_SET_BACKGROUND(0,159,0,127,0xff,0xff,0xff);
 80044dc:	23ff      	movs	r3, #255	; 0xff
 80044de:	9302      	str	r3, [sp, #8]
 80044e0:	23ff      	movs	r3, #255	; 0xff
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	23ff      	movs	r3, #255	; 0xff
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	237f      	movs	r3, #127	; 0x7f
 80044ea:	2200      	movs	r2, #0
 80044ec:	219f      	movs	r1, #159	; 0x9f
 80044ee:	2000      	movs	r0, #0
 80044f0:	f7fd fa29 	bl	8001946 <TFT_SET_BACKGROUND>
//
				ACC_FROM_ADC_TO_DAC(ACC_DAC_MIN_DECIMAL);
 80044f4:	2040      	movs	r0, #64	; 0x40
 80044f6:	f7ff fcb9 	bl	8003e6c <ACC_FROM_ADC_TO_DAC>
				MCAL_USART_SendData(TSR_UART_INSTANT,CAR_OFF_FLAG);
 80044fa:	2133      	movs	r1, #51	; 0x33
 80044fc:	480c      	ldr	r0, [pc, #48]	; (8004530 <CAR_ON_Handler+0xb8>)
 80044fe:	f7ff fa85 	bl	8003a0c <MCAL_USART_SendData>
				_TIM1_delay_ms(30);
 8004502:	201e      	movs	r0, #30
 8004504:	f7ff f8fe 	bl	8003704 <_TIM1_delay_ms>

				vTaskResume(FACE_ID_TASK_Handle);
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <CAR_ON_Handler+0xbc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fc f95b 	bl	80007c8 <vTaskResume>
		}

	}


}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20004251 	.word	0x20004251
 800451c:	40010c00 	.word	0x40010c00
 8004520:	20004250 	.word	0x20004250
 8004524:	2000423c 	.word	0x2000423c
 8004528:	20004243 	.word	0x20004243
 800452c:	20004244 	.word	0x20004244
 8004530:	40013800 	.word	0x40013800
 8004534:	20004248 	.word	0x20004248

08004538 <CAR_ON_init>:
void CAR_ON_init(){
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	; 0x28
 800453c:	af00      	add	r7, sp, #0
	EXTI_config_t CAR_BOTTON_SITTING={EXT1PB1,FALLING,ENABLE,CAR_ON_Handler};
 800453e:	2301      	movs	r3, #1
 8004540:	82bb      	strh	r3, [r7, #20]
 8004542:	4b11      	ldr	r3, [pc, #68]	; (8004588 <CAR_ON_init+0x50>)
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	2301      	movs	r3, #1
 8004548:	83bb      	strh	r3, [r7, #28]
 800454a:	2307      	movs	r3, #7
 800454c:	83fb      	strh	r3, [r7, #30]
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3020 	strb.w	r3, [r7, #32]
 8004554:	2301      	movs	r3, #1
 8004556:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800455a:	4b0c      	ldr	r3, [pc, #48]	; (800458c <CAR_ON_init+0x54>)
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
	MCAL_EXTI_init(&CAR_BOTTON_SITTING);
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe f894 	bl	8002690 <MCAL_EXTI_init>
	PIN_config pin={CONTACT_BOTTON_PIN,INPUT_PD};
 8004568:	2300      	movs	r3, #0
 800456a:	607b      	str	r3, [r7, #4]
 800456c:	2301      	movs	r3, #1
 800456e:	80bb      	strh	r3, [r7, #4]
 8004570:	2303      	movs	r3, #3
 8004572:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init(CONTACT_BOTTON_PORT, &pin);
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4803      	ldr	r0, [pc, #12]	; (8004588 <CAR_ON_init+0x50>)
 800457a:	f7fe fa91 	bl	8002aa0 <MCAL_GPIO_init>
}
 800457e:	bf00      	nop
 8004580:	3728      	adds	r7, #40	; 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40010c00 	.word	0x40010c00
 800458c:	08004479 	.word	0x08004479

08004590 <FACE_ID_TASK>:
void FACE_ID_TASK(){
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	while(1){
//		_TIM1_delay_ms(500);
		if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==1) ){
 8004594:	2101      	movs	r1, #1
 8004596:	4819      	ldr	r0, [pc, #100]	; (80045fc <FACE_ID_TASK+0x6c>)
 8004598:	f7fe fb94 	bl	8002cc4 <MCAL_Read_PIN>
 800459c:	4603      	mov	r3, r0
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d1f8      	bne.n	8004594 <FACE_ID_TASK+0x4>
			_TIM1_delay_ms(30);
 80045a2:	201e      	movs	r0, #30
 80045a4:	f7ff f8ae 	bl	8003704 <_TIM1_delay_ms>
			if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==1) ){
 80045a8:	2101      	movs	r1, #1
 80045aa:	4814      	ldr	r0, [pc, #80]	; (80045fc <FACE_ID_TASK+0x6c>)
 80045ac:	f7fe fb8a 	bl	8002cc4 <MCAL_Read_PIN>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d1ee      	bne.n	8004594 <FACE_ID_TASK+0x4>
				//UART SEND

				//				MCAL_USART_Deinit(LUNA_UART_INSTANT);
				if(CAR_login_counter==0){
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <FACE_ID_TASK+0x70>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <FACE_ID_TASK+0x42>
					MCAL_USART_SendData(TSR_UART_INSTANT,CAR_ON_FLAG);
 80045be:	2122      	movs	r1, #34	; 0x22
 80045c0:	4810      	ldr	r0, [pc, #64]	; (8004604 <FACE_ID_TASK+0x74>)
 80045c2:	f7ff fa23 	bl	8003a0c <MCAL_USART_SendData>
					CAR_login_counter++;
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <FACE_ID_TASK+0x70>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	3301      	adds	r3, #1
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <FACE_ID_TASK+0x70>)
 80045d0:	701a      	strb	r2, [r3, #0]
				}
				//				if(GR_FACE_FLAG_send ==0x99){
				//					MCAL_USART_SendData(TSR_UART_INSTANT,CAR_OFF_FLAG);
				//
				//				}
				if(GR_FACE_FLAG_send !=0x99 && GR_FACE_FLAG_send !=0x00){
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <FACE_ID_TASK+0x78>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b99      	cmp	r3, #153	; 0x99
 80045d8:	d0dc      	beq.n	8004594 <FACE_ID_TASK+0x4>
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <FACE_ID_TASK+0x78>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0d8      	beq.n	8004594 <FACE_ID_TASK+0x4>
					CAR_ON_counter=1;
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <FACE_ID_TASK+0x7c>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
					CAR_login_counter=0;
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <FACE_ID_TASK+0x70>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
					//				////////////*********LUNA_INIT***************//////////////////
					//				LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
					//				LUNA_ENABLE();
					vTaskSuspend(FACE_ID_TASK_Handle);
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <FACE_ID_TASK+0x80>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fc f838 	bl	8000668 <vTaskSuspend>
		if((MCAL_Read_PIN(CONTACT_BOTTON_PORT, CONTACT_BOTTON_PIN)==1) ){
 80045f8:	e7cc      	b.n	8004594 <FACE_ID_TASK+0x4>
 80045fa:	bf00      	nop
 80045fc:	40010c00 	.word	0x40010c00
 8004600:	20004251 	.word	0x20004251
 8004604:	40013800 	.word	0x40013800
 8004608:	2000423c 	.word	0x2000423c
 800460c:	20004250 	.word	0x20004250
 8004610:	20004248 	.word	0x20004248

08004614 <HW_init>:





void HW_init(){
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
	Sys_Clk_init();
 8004618:	f7ff fb1a 	bl	8003c50 <Sys_Clk_init>
	_TIM1_delay_ms(100);
 800461c:	2064      	movs	r0, #100	; 0x64
 800461e:	f7ff f871 	bl	8003704 <_TIM1_delay_ms>
	////////////*********TFT_init***************//////////////////
	TFT_init(RGB_5_6_5);
 8004622:	2055      	movs	r0, #85	; 0x55
 8004624:	f7fd f878 	bl	8001718 <TFT_init>
	_TIM1_delay_ms(100);
 8004628:	2064      	movs	r0, #100	; 0x64
 800462a:	f7ff f86b 	bl	8003704 <_TIM1_delay_ms>

	////////////*********TSR init***************//////////////////
	TSR_init();
 800462e:	f7ff ff0d 	bl	800444c <TSR_init>
	_TIM1_delay_ms(100);
 8004632:	2064      	movs	r0, #100	; 0x64
 8004634:	f7ff f866 	bl	8003704 <_TIM1_delay_ms>

	////////////*********ACC_throtel_init*********//////////////////
	ACC_throtel_init();
 8004638:	f7ff fb84 	bl	8003d44 <ACC_throtel_init>
	_TIM1_delay_ms(100);
 800463c:	2064      	movs	r0, #100	; 0x64
 800463e:	f7ff f861 	bl	8003704 <_TIM1_delay_ms>

	////////////*********DAC init***************//////////////////
	ACC_DAC_init();
 8004642:	f7ff fbaf 	bl	8003da4 <ACC_DAC_init>
	_TIM1_delay_ms(100);
 8004646:	2064      	movs	r0, #100	; 0x64
 8004648:	f7ff f85c 	bl	8003704 <_TIM1_delay_ms>

	////////////*********DMS_init***************//////////////////
	DMS_init();
 800464c:	f7fc fdec 	bl	8001228 <DMS_init>
	_TIM1_delay_ms(100);
 8004650:	2064      	movs	r0, #100	; 0x64
 8004652:	f7ff f857 	bl	8003704 <_TIM1_delay_ms>

	////////////*********CAR_ON_init***************//////////////////
	CAR_ON_init();
 8004656:	f7ff ff6f 	bl	8004538 <CAR_ON_init>
	_TIM1_delay_ms(100);
 800465a:	2064      	movs	r0, #100	; 0x64
 800465c:	f7ff f852 	bl	8003704 <_TIM1_delay_ms>

	////////////*********LUNA_INIT***************//////////////////
	LUNA_INIT(CONTIOUS_RANGING_MODE,BYTE_9_CM);
 8004660:	2100      	movs	r1, #0
 8004662:	2000      	movs	r0, #0
 8004664:	f7fc ff2e 	bl	80014c4 <LUNA_INIT>
	_TIM1_delay_ms(100);
 8004668:	2064      	movs	r0, #100	; 0x64
 800466a:	f7ff f84b 	bl	8003704 <_TIM1_delay_ms>
	//	PIN_config PINx={PIN_13,OUTPUT_PP,SPEED_10};
	//	MCAL_GPIO_init(GPIOB, &PINx);



}
 800466e:	bf00      	nop
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <main>:
int main(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af02      	add	r7, sp, #8
//	_TIM1_delay_s(2);
	HW_init();
 800467a:	f7ff ffcb 	bl	8004614 <HW_init>

	///////////////////////////
	if(xTaskCreate(ACC_throttel_Handller_TASK,"ACC_throttel_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 800467e:	2300      	movs	r3, #0
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	2302      	movs	r3, #2
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800468c:	492f      	ldr	r1, [pc, #188]	; (800474c <main+0xd8>)
 800468e:	4830      	ldr	r0, [pc, #192]	; (8004750 <main+0xdc>)
 8004690:	f7fb fde5 	bl	800025e <xTaskCreate>
 8004694:	4603      	mov	r3, r0
 8004696:	2b01      	cmp	r3, #1
 8004698:	d001      	beq.n	800469e <main+0x2a>
		Error_Handller();
 800469a:	f7ff fad5 	bl	8003c48 <Error_Handller>
	}

	if(xTaskCreate(ACC_Handller_TASK,"ACC_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 800469e:	2300      	movs	r3, #0
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	2302      	movs	r3, #2
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	2300      	movs	r3, #0
 80046a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ac:	4929      	ldr	r1, [pc, #164]	; (8004754 <main+0xe0>)
 80046ae:	482a      	ldr	r0, [pc, #168]	; (8004758 <main+0xe4>)
 80046b0:	f7fb fdd5 	bl	800025e <xTaskCreate>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d001      	beq.n	80046be <main+0x4a>
		Error_Handller();
 80046ba:	f7ff fac5 	bl	8003c48 <Error_Handller>
	}


	if(xTaskCreate(ACC_STATE_READ_TASK,"BOTTON_READ",256,NULL,2,NULL)!=pdPASS ){
 80046be:	2300      	movs	r3, #0
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	2302      	movs	r3, #2
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	2300      	movs	r3, #0
 80046c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046cc:	4923      	ldr	r1, [pc, #140]	; (800475c <main+0xe8>)
 80046ce:	4824      	ldr	r0, [pc, #144]	; (8004760 <main+0xec>)
 80046d0:	f7fb fdc5 	bl	800025e <xTaskCreate>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d001      	beq.n	80046de <main+0x6a>
		Error_Handller();
 80046da:	f7ff fab5 	bl	8003c48 <Error_Handller>
	}
	///////////////////////

	if(xTaskCreate(TSR_Handller_TASK,"TSR_Handller_TASK",256,NULL,2,&TSR_Handller_TASK_Handle)!=pdPASS ){
 80046de:	4b21      	ldr	r3, [pc, #132]	; (8004764 <main+0xf0>)
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	2302      	movs	r3, #2
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	2300      	movs	r3, #0
 80046e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ec:	491e      	ldr	r1, [pc, #120]	; (8004768 <main+0xf4>)
 80046ee:	481f      	ldr	r0, [pc, #124]	; (800476c <main+0xf8>)
 80046f0:	f7fb fdb5 	bl	800025e <xTaskCreate>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <main+0x8a>
		Error_Handller();
 80046fa:	f7ff faa5 	bl	8003c48 <Error_Handller>
	}

	///////////////////////

	if(xTaskCreate(DMS_Handller_TASK,"DMS_Handller_TASK",256,NULL,2,NULL)!=pdPASS ){
 80046fe:	2300      	movs	r3, #0
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	2302      	movs	r3, #2
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	2300      	movs	r3, #0
 8004708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800470c:	4918      	ldr	r1, [pc, #96]	; (8004770 <main+0xfc>)
 800470e:	4819      	ldr	r0, [pc, #100]	; (8004774 <main+0x100>)
 8004710:	f7fb fda5 	bl	800025e <xTaskCreate>
 8004714:	4603      	mov	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d001      	beq.n	800471e <main+0xaa>
		Error_Handller();
 800471a:	f7ff fa95 	bl	8003c48 <Error_Handller>
	}


	///////////////////////
	if(xTaskCreate(FACE_ID_TASK,"FACE_ID_TASK",256,NULL,5,&FACE_ID_TASK_Handle)!=pdPASS ){
 800471e:	4b16      	ldr	r3, [pc, #88]	; (8004778 <main+0x104>)
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	2305      	movs	r3, #5
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	2300      	movs	r3, #0
 8004728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800472c:	4913      	ldr	r1, [pc, #76]	; (800477c <main+0x108>)
 800472e:	4814      	ldr	r0, [pc, #80]	; (8004780 <main+0x10c>)
 8004730:	f7fb fd95 	bl	800025e <xTaskCreate>
 8004734:	4603      	mov	r3, r0
 8004736:	2b01      	cmp	r3, #1
 8004738:	d001      	beq.n	800473e <main+0xca>
		Error_Handller();
 800473a:	f7ff fa85 	bl	8003c48 <Error_Handller>
	}


    MCAL_USART_SendData(TSR_UART_INSTANT, 'D');
 800473e:	2144      	movs	r1, #68	; 0x44
 8004740:	4810      	ldr	r0, [pc, #64]	; (8004784 <main+0x110>)
 8004742:	f7ff f963 	bl	8003a0c <MCAL_USART_SendData>

	vTaskStartScheduler();
 8004746:	f7fc f8b7 	bl	80008b8 <vTaskStartScheduler>

	for(;;);
 800474a:	e7fe      	b.n	800474a <main+0xd6>
 800474c:	08004910 	.word	0x08004910
 8004750:	08003fb5 	.word	0x08003fb5
 8004754:	0800492c 	.word	0x0800492c
 8004758:	08003f45 	.word	0x08003f45
 800475c:	08004940 	.word	0x08004940
 8004760:	08004099 	.word	0x08004099
 8004764:	2000424c 	.word	0x2000424c
 8004768:	0800494c 	.word	0x0800494c
 800476c:	08004141 	.word	0x08004141
 8004770:	08004960 	.word	0x08004960
 8004774:	08003c85 	.word	0x08003c85
 8004778:	20004248 	.word	0x20004248
 800477c:	08004974 	.word	0x08004974
 8004780:	08004591 	.word	0x08004591
 8004784:	40013800 	.word	0x40013800

08004788 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004788:	480d      	ldr	r0, [pc, #52]	; (80047c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800478a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800478c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004790:	480c      	ldr	r0, [pc, #48]	; (80047c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004792:	490d      	ldr	r1, [pc, #52]	; (80047c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004794:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <LoopForever+0xe>)
  movs r3, #0
 8004796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004798:	e002      	b.n	80047a0 <LoopCopyDataInit>

0800479a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800479a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800479c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800479e:	3304      	adds	r3, #4

080047a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047a4:	d3f9      	bcc.n	800479a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047a8:	4c0a      	ldr	r4, [pc, #40]	; (80047d4 <LoopForever+0x16>)
  movs r3, #0
 80047aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047ac:	e001      	b.n	80047b2 <LoopFillZerobss>

080047ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047b0:	3204      	adds	r2, #4

080047b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047b4:	d3fb      	bcc.n	80047ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80047b6:	f000 f819 	bl	80047ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80047ba:	f7ff ff5b 	bl	8004674 <main>

080047be <LoopForever>:

LoopForever:
  b LoopForever
 80047be:	e7fe      	b.n	80047be <LoopForever>
  ldr   r0, =_estack
 80047c0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80047c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047c8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80047cc:	0801d02c 	.word	0x0801d02c
  ldr r2, =_sbss
 80047d0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80047d4:	20004258 	.word	0x20004258

080047d8 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047d8:	e7fe      	b.n	80047d8 <ADC3_IRQHandler>

080047da <memset>:
 80047da:	4603      	mov	r3, r0
 80047dc:	4402      	add	r2, r0
 80047de:	4293      	cmp	r3, r2
 80047e0:	d100      	bne.n	80047e4 <memset+0xa>
 80047e2:	4770      	bx	lr
 80047e4:	f803 1b01 	strb.w	r1, [r3], #1
 80047e8:	e7f9      	b.n	80047de <memset+0x4>
	...

080047ec <__libc_init_array>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	2600      	movs	r6, #0
 80047f0:	4d0c      	ldr	r5, [pc, #48]	; (8004824 <__libc_init_array+0x38>)
 80047f2:	4c0d      	ldr	r4, [pc, #52]	; (8004828 <__libc_init_array+0x3c>)
 80047f4:	1b64      	subs	r4, r4, r5
 80047f6:	10a4      	asrs	r4, r4, #2
 80047f8:	42a6      	cmp	r6, r4
 80047fa:	d109      	bne.n	8004810 <__libc_init_array+0x24>
 80047fc:	f000 f81a 	bl	8004834 <_init>
 8004800:	2600      	movs	r6, #0
 8004802:	4d0a      	ldr	r5, [pc, #40]	; (800482c <__libc_init_array+0x40>)
 8004804:	4c0a      	ldr	r4, [pc, #40]	; (8004830 <__libc_init_array+0x44>)
 8004806:	1b64      	subs	r4, r4, r5
 8004808:	10a4      	asrs	r4, r4, #2
 800480a:	42a6      	cmp	r6, r4
 800480c:	d105      	bne.n	800481a <__libc_init_array+0x2e>
 800480e:	bd70      	pop	{r4, r5, r6, pc}
 8004810:	f855 3b04 	ldr.w	r3, [r5], #4
 8004814:	4798      	blx	r3
 8004816:	3601      	adds	r6, #1
 8004818:	e7ee      	b.n	80047f8 <__libc_init_array+0xc>
 800481a:	f855 3b04 	ldr.w	r3, [r5], #4
 800481e:	4798      	blx	r3
 8004820:	3601      	adds	r6, #1
 8004822:	e7f2      	b.n	800480a <__libc_init_array+0x1e>
 8004824:	0801d024 	.word	0x0801d024
 8004828:	0801d024 	.word	0x0801d024
 800482c:	0801d024 	.word	0x0801d024
 8004830:	0801d028 	.word	0x0801d028

08004834 <_init>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr

08004840 <_fini>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr
